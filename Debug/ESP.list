
ESP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012610  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002890  080127e0  080127e0  000227e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015070  08015070  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08015070  08015070  00025070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015078  08015078  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015078  08015078  00025078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801507c  0801507c  0002507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08015080  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000078  080150f8  00030078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  080150f8  000307a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156e1  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c1  00000000  00000000  00045789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00049150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0004a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005605  00000000  00000000  0004b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181cb  00000000  00000000  0005098d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d268f  00000000  00000000  00068b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b1e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  0013b238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080127c8 	.word	0x080127c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080127c8 	.word	0x080127c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <store_char>:
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005d6:	3301      	adds	r3, #1
 80005d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005dc:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d009      	beq.n	80005fe <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	79f9      	ldrb	r1, [r7, #7]
 80005f4:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <Uart_isr>:
	if (so_far == len) return 1;
	else return -1;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	f003 0320 	and.w	r3, r3, #32
 800062a:	2b00      	cmp	r3, #0
 800062c:	d023      	beq.n	8000676 <Uart_isr+0x6a>
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	f003 0320 	and.w	r3, r3, #32
 8000634:	2b00      	cmp	r3, #0
 8000636:	d01e      	beq.n	8000676 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <Uart_isr+0x13c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d107      	bne.n	800065e <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 800064e:	4b3f      	ldr	r3, [pc, #252]	; (800074c <Uart_isr+0x140>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffb4 	bl	80005c4 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 800065c:	e06d      	b.n	800073a <Uart_isr+0x12e>
        else if (huart == pc_uart)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a3b      	ldr	r2, [pc, #236]	; (8000750 <Uart_isr+0x144>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d169      	bne.n	800073a <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8000666:	4b3b      	ldr	r3, [pc, #236]	; (8000754 <Uart_isr+0x148>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffa8 	bl	80005c4 <store_char>
        return;
 8000674:	e061      	b.n	800073a <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067c:	2b00      	cmp	r3, #0
 800067e:	d05f      	beq.n	8000740 <Uart_isr+0x134>
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	2b00      	cmp	r3, #0
 8000688:	d05a      	beq.n	8000740 <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <Uart_isr+0x13c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d127      	bne.n	80006e2 <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <Uart_isr+0x14c>)
 8000694:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000698:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <Uart_isr+0x14c>)
 800069a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800069e:	429a      	cmp	r2, r3
 80006a0:	d108      	bne.n	80006b4 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006b0:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 80006b2:	e044      	b.n	800073e <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <Uart_isr+0x14c>)
 80006b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006ba:	4a27      	ldr	r2, [pc, #156]	; (8000758 <Uart_isr+0x14c>)
 80006bc:	5cd3      	ldrb	r3, [r2, r3]
 80006be:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <Uart_isr+0x14c>)
 80006c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006c6:	3301      	adds	r3, #1
 80006c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006cc:	4a22      	ldr	r2, [pc, #136]	; (8000758 <Uart_isr+0x14c>)
 80006ce:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	7b7a      	ldrb	r2, [r7, #13]
 80006de:	605a      	str	r2, [r3, #4]
    	return;
 80006e0:	e02d      	b.n	800073e <Uart_isr+0x132>
    	else if (huart == pc_uart){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <Uart_isr+0x144>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d129      	bne.n	800073e <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <Uart_isr+0x150>)
 80006ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <Uart_isr+0x150>)
 80006f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d108      	bne.n	800070c <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68da      	ldr	r2, [r3, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000708:	60da      	str	r2, [r3, #12]
    	return;
 800070a:	e018      	b.n	800073e <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <Uart_isr+0x150>)
 800070e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <Uart_isr+0x150>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <Uart_isr+0x150>)
 800071a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800071e:	3301      	adds	r3, #1
 8000720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <Uart_isr+0x150>)
 8000726:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7bba      	ldrb	r2, [r7, #14]
 8000736:	605a      	str	r2, [r3, #4]
    	return;
 8000738:	e001      	b.n	800073e <Uart_isr+0x132>
        return;
 800073a:	bf00      	nop
 800073c:	e000      	b.n	8000740 <Uart_isr+0x134>
    	return;
 800073e:	bf00      	nop
    }
}
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200004ac 	.word	0x200004ac
 800074c:	200004a4 	.word	0x200004a4
 8000750:	200004f0 	.word	0x200004f0
 8000754:	200004a8 	.word	0x200004a8
 8000758:	20000094 	.word	0x20000094
 800075c:	2000029c 	.word	0x2000029c

08000760 <mbedtls_pk_ec>:
 *
 * \warning You must make sure the PK context actually holds an EC context
 * before using this function!
 */
static inline mbedtls_ecp_keypair *mbedtls_pk_ec( const mbedtls_pk_context pk )
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	463b      	mov	r3, r7
 8000768:	e883 0003 	stmia.w	r3, {r0, r1}
    return( (mbedtls_ecp_keypair *) (pk).pk_ctx );
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <init_random_number_generator>:
int sign_message (void);
int verify_signature (void);
/* USER CODE BEGIN PFP */


void init_random_number_generator(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af02      	add	r7, sp, #8
    mbedtls_entropy_init(&entropy);
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <init_random_number_generator+0x40>)
 8000784:	f00d fd9a 	bl	800e2bc <mbedtls_entropy_init>
    mbedtls_ctr_drbg_init(&ctr_drbg);
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <init_random_number_generator+0x44>)
 800078a:	f007 fe5d 	bl	8008448 <mbedtls_ctr_drbg_init>

    const char *pers = "ecc_key_generation";  // Personalization string
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <init_random_number_generator+0x48>)
 8000790:	607b      	str	r3, [r7, #4]
    if (mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, (const unsigned char *)pers, strlen(pers)) != 0) {
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fd3c 	bl	8000210 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <init_random_number_generator+0x40>)
 80007a0:	4909      	ldr	r1, [pc, #36]	; (80007c8 <init_random_number_generator+0x4c>)
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <init_random_number_generator+0x44>)
 80007a4:	f007 fe9f 	bl	80084e6 <mbedtls_ctr_drbg_seed>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <init_random_number_generator+0x38>
        // Handle initialization error
        printf("Failed to seed the random number generator");
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <init_random_number_generator+0x50>)
 80007b0:	f011 f95c 	bl	8011a6c <iprintf>
    }
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000678 	.word	0x20000678
 80007c0:	20000534 	.word	0x20000534
 80007c4:	080127e0 	.word	0x080127e0
 80007c8:	0800e4d5 	.word	0x0800e4d5
 80007cc:	080127f4 	.word	0x080127f4

080007d0 <generate_ecc_key_pair>:



void generate_ecc_key_pair(void) {
 80007d0:	b5b0      	push	{r4, r5, r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
    mbedtls_pk_context pk;
    mbedtls_pk_init(&pk);
 80007d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007da:	4618      	mov	r0, r3
 80007dc:	f00d ff36 	bl	800e64c <mbedtls_pk_init>

    // Initialize random number generator
    init_random_number_generator();
 80007e0:	f7ff ffcc 	bl	800077c <init_random_number_generator>

    // Generate the ECC key pair
    // Generate the ECC key pair
        if (mbedtls_pk_setup(&pk, mbedtls_pk_info_from_type(MBEDTLS_PK_ECKEY)) == 0) {
 80007e4:	2002      	movs	r0, #2
 80007e6:	f00d ff5d 	bl	800e6a4 <mbedtls_pk_info_from_type>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00d ff78 	bl	800e6e8 <mbedtls_pk_setup>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d138      	bne.n	8000870 <generate_ecc_key_pair+0xa0>
            if (mbedtls_ecp_gen_key(MBEDTLS_ECP_DP_SECP256R1, mbedtls_pk_ec(pk), mbedtls_ctr_drbg_random, &ctr_drbg) == 0) {
 80007fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000802:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000806:	f7ff ffab 	bl	8000760 <mbedtls_pk_ec>
 800080a:	4601      	mov	r1, r0
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <generate_ecc_key_pair+0xd8>)
 800080e:	4a27      	ldr	r2, [pc, #156]	; (80008ac <generate_ecc_key_pair+0xdc>)
 8000810:	2003      	movs	r0, #3
 8000812:	f00c f81a 	bl	800c84a <mbedtls_ecp_gen_key>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d115      	bne.n	8000848 <generate_ecc_key_pair+0x78>
                char message[] = "ECC key pair generated successfully\n \r";
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <generate_ecc_key_pair+0xe0>)
 800081e:	463c      	mov	r4, r7
 8000820:	461d      	mov	r5, r3
 8000822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800082e:	6020      	str	r0, [r4, #0]
 8000830:	3404      	adds	r4, #4
 8000832:	8021      	strh	r1, [r4, #0]
 8000834:	3402      	adds	r4, #2
 8000836:	0c0b      	lsrs	r3, r1, #16
 8000838:	7023      	strb	r3, [r4, #0]
                HAL_UART_Transmit(&huart2, (uint8_t*)message, 40, 10);
 800083a:	4639      	mov	r1, r7
 800083c:	230a      	movs	r3, #10
 800083e:	2228      	movs	r2, #40	; 0x28
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <generate_ecc_key_pair+0xe4>)
 8000842:	f001 fd68 	bl	8002316 <HAL_UART_Transmit>
 8000846:	e025      	b.n	8000894 <generate_ecc_key_pair+0xc4>
            } else {
                char message[] = "Failed to generate ECC key pair\n \r";
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <generate_ecc_key_pair+0xe8>)
 800084a:	463c      	mov	r4, r7
 800084c:	461d      	mov	r5, r3
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000856:	682b      	ldr	r3, [r5, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	8022      	strh	r2, [r4, #0]
 800085c:	3402      	adds	r4, #2
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	7023      	strb	r3, [r4, #0]
                HAL_UART_Transmit(&huart2, (uint8_t*)message, 40 , 10);
 8000862:	4639      	mov	r1, r7
 8000864:	230a      	movs	r3, #10
 8000866:	2228      	movs	r2, #40	; 0x28
 8000868:	4812      	ldr	r0, [pc, #72]	; (80008b4 <generate_ecc_key_pair+0xe4>)
 800086a:	f001 fd54 	bl	8002316 <HAL_UART_Transmit>
 800086e:	e011      	b.n	8000894 <generate_ecc_key_pair+0xc4>
            }
        } else {
            char message[] = "Failed to setup PK context for ECC\n \r";
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <generate_ecc_key_pair+0xec>)
 8000872:	463c      	mov	r4, r7
 8000874:	461d      	mov	r5, r3
 8000876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000882:	6020      	str	r0, [r4, #0]
 8000884:	3404      	adds	r4, #4
 8000886:	8021      	strh	r1, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)message, 40, 10);
 8000888:	4639      	mov	r1, r7
 800088a:	230a      	movs	r3, #10
 800088c:	2228      	movs	r2, #40	; 0x28
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <generate_ecc_key_pair+0xe4>)
 8000890:	f001 fd41 	bl	8002316 <HAL_UART_Transmit>
        }

        mbedtls_pk_free(&pk);
 8000894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000898:	4618      	mov	r0, r3
 800089a:	f00d fee7 	bl	800e66c <mbedtls_pk_free>
}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bdb0      	pop	{r4, r5, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000534 	.word	0x20000534
 80008ac:	08008c6b 	.word	0x08008c6b
 80008b0:	08012820 	.word	0x08012820
 80008b4:	200004f0 	.word	0x200004f0
 80008b8:	08012848 	.word	0x08012848
 80008bc:	0801286c 	.word	0x0801286c

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fb0a 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f812 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 f8d0 	bl	8000a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d0:	f000 f8a4 	bl	8000a1c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80008d4:	f000 f878 	bl	80009c8 <MX_USART1_UART_Init>
  MX_MBEDTLS_Init();
 80008d8:	f002 fce4 	bl	80032a4 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */

  // Generate ECC key pair
     generate_ecc_key_pair();
 80008dc:	f7ff ff78 	bl	80007d0 <generate_ecc_key_pair>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  generate_ecc_key_pair();
 80008e0:	f7ff ff76 	bl	80007d0 <generate_ecc_key_pair>
	  HAL_Delay(1000);
 80008e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e8:	f000 fb6a 	bl	8000fc0 <HAL_Delay>
	  generate_ecc_key_pair();
 80008ec:	e7f8      	b.n	80008e0 <main+0x20>
	...

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2234      	movs	r2, #52	; 0x34
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f010 ffb6 	bl	8011870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <SystemClock_Config+0xd0>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <SystemClock_Config+0xd0>)
 800091e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <SystemClock_Config+0xd0>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <SystemClock_Config+0xd4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <SystemClock_Config+0xd4>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <SystemClock_Config+0xd4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000958:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000968:	2332      	movs	r3, #50	; 0x32
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f9df 	bl	8001d40 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000988:	f000 f8e0 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2101      	movs	r1, #1
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fe7f 	bl	80016ac <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009b4:	f000 f8ca 	bl	8000b4c <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	; 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART1_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 8000a00:	f001 fc3c 	bl	800227c <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f000 f89f 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200004ac 	.word	0x200004ac
 8000a18:	40011000 	.word	0x40011000

08000a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART2_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f001 fc12 	bl	800227c <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f875 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200004f0 	.word	0x200004f0
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a2c      	ldr	r2, [pc, #176]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a25      	ldr	r2, [pc, #148]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2120      	movs	r1, #32
 8000afa:	4812      	ldr	r0, [pc, #72]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000afc:	f000 fdbc 	bl	8001678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_GPIO_Init+0xd8>)
 8000b18:	f000 fc1a 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000b34:	f000 fc0c 	bl	8001350 <HAL_GPIO_Init>

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020800 	.word	0x40020800

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b96:	2007      	movs	r0, #7
 8000b98:	f000 fb06 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <HAL_UART_MspInit+0xf8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d135      	bne.n	8000c36 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c14:	2307      	movs	r3, #7
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4822      	ldr	r0, [pc, #136]	; (8000ca8 <HAL_UART_MspInit+0x100>)
 8000c20:	f000 fb96 	bl	8001350 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2025      	movs	r0, #37	; 0x25
 8000c2a:	f000 fac8 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c2e:	2025      	movs	r0, #37	; 0x25
 8000c30:	f000 fae1 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c34:	e030      	b.n	8000c98 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <HAL_UART_MspInit+0x104>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d12b      	bne.n	8000c98 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_UART_MspInit+0xfc>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c78:	230c      	movs	r3, #12
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_UART_MspInit+0x100>)
 8000c94:	f000 fb5c 	bl	8001350 <HAL_GPIO_Init>
}
 8000c98:	bf00      	nop
 8000c9a:	3730      	adds	r7, #48	; 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40004400 	.word	0x40004400

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f940 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr (&huart1);
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <USART1_IRQHandler+0x14>)
 8000d0a:	f7ff fc7f 	bl	800060c <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d0e:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USART1_IRQHandler+0x14>)
 8000d10:	f001 fb94 	bl	800243c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200004ac 	.word	0x200004ac

08000d1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e00a      	b.n	8000d44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d2e:	f3af 8000 	nop.w
 8000d32:	4601      	mov	r1, r0
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	b2ca      	uxtb	r2, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf0      	blt.n	8000d2e <_read+0x12>
	}

return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	e009      	b.n	8000d7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dbf1      	blt.n	8000d68 <_write+0x12>
	}
	return len;
 8000d84:	687b      	ldr	r3, [r7, #4]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_close>:

int _close(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	return -1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db6:	605a      	str	r2, [r3, #4]
	return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <_isatty>:

int _isatty(int file)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f010 fce2 	bl	80117f0 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20020000 	.word	0x20020000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	20000788 	.word	0x20000788
 8000e60:	200007a0 	.word	0x200007a0

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea4:	4c0b      	ldr	r4, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb2:	f7ff ffd7 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f010 fca1 	bl	80117fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fd01 	bl	80008c0 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ecc:	08015080 	.word	0x08015080
  ldr r2, =_sbss
 8000ed0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ed4:	200007a0 	.word	0x200007a0

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f94f 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fe22 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f967 	bl	8001212 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f92f 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	2000078c 	.word	0x2000078c

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2000078c 	.word	0x2000078c

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff feb6 	bl	8000fa8 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d008      	beq.n	800125c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e052      	b.n	8001302 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0216 	bic.w	r2, r2, #22
 800126a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800127a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	2b00      	cmp	r3, #0
 8001282:	d103      	bne.n	800128c <HAL_DMA_Abort+0x62>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0208 	bic.w	r2, r2, #8
 800129a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ac:	e013      	b.n	80012d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ae:	f7ff fe7b 	bl	8000fa8 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d90c      	bls.n	80012d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2220      	movs	r2, #32
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e015      	b.n	8001302 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e4      	bne.n	80012ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e8:	223f      	movs	r2, #63	; 0x3f
 80012ea:	409a      	lsls	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d004      	beq.n	8001328 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e00c      	b.n	8001342 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2205      	movs	r2, #5
 800132c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e165      	b.n	8001638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8154 	bne.w	8001632 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d005      	beq.n	80013a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d123      	bne.n	8001494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80ae 	beq.w	8001632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_GPIO_Init+0x300>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a5c      	ldr	r2, [pc, #368]	; (8001650 <HAL_GPIO_Init+0x300>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b5a      	ldr	r3, [pc, #360]	; (8001650 <HAL_GPIO_Init+0x300>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_GPIO_Init+0x304>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <HAL_GPIO_Init+0x308>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d025      	beq.n	800156a <HAL_GPIO_Init+0x21a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4e      	ldr	r2, [pc, #312]	; (800165c <HAL_GPIO_Init+0x30c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01f      	beq.n	8001566 <HAL_GPIO_Init+0x216>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4d      	ldr	r2, [pc, #308]	; (8001660 <HAL_GPIO_Init+0x310>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x212>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4c      	ldr	r2, [pc, #304]	; (8001664 <HAL_GPIO_Init+0x314>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x20e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4b      	ldr	r2, [pc, #300]	; (8001668 <HAL_GPIO_Init+0x318>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x20a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4a      	ldr	r2, [pc, #296]	; (800166c <HAL_GPIO_Init+0x31c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x206>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a49      	ldr	r2, [pc, #292]	; (8001670 <HAL_GPIO_Init+0x320>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x202>
 800154e:	2306      	movs	r3, #6
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001552:	2307      	movs	r3, #7
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x21c>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x21c>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	; (8001654 <HAL_GPIO_Init+0x304>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <HAL_GPIO_Init+0x324>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a31      	ldr	r2, [pc, #196]	; (8001674 <HAL_GPIO_Init+0x324>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_GPIO_Init+0x324>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a26      	ldr	r2, [pc, #152]	; (8001674 <HAL_GPIO_Init+0x324>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_GPIO_Init+0x324>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_GPIO_Init+0x324>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_GPIO_Init+0x324>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_GPIO_Init+0x324>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f ae96 	bls.w	800136c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40021400 	.word	0x40021400
 8001670:	40021800 	.word	0x40021800
 8001674:	40013c00 	.word	0x40013c00

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0cc      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d90c      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b65      	ldr	r3, [pc, #404]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b8      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800170a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	494d      	ldr	r1, [pc, #308]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d044      	beq.n	80017cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d119      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d003      	beq.n	800176a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001766:	2b03      	cmp	r3, #3
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e06f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e067      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178a:	4b37      	ldr	r3, [pc, #220]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f023 0203 	bic.w	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4934      	ldr	r1, [pc, #208]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800179c:	f7ff fc04 	bl	8000fa8 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a4:	f7ff fc00 	bl	8000fa8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e04f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 020c 	and.w	r2, r3, #12
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1eb      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d20c      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e032      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4916      	ldr	r1, [pc, #88]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001832:	f000 f855 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490a      	ldr	r1, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1c8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fb64 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00
 8001868:	40023800 	.word	0x40023800
 800186c:	080128f4 	.word	0x080128f4
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_RCC_GetHCLKFreq+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001894:	f7ff fff0 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0a9b      	lsrs	r3, r3, #10
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08012904 	.word	0x08012904

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018bc:	f7ff ffdc 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0b5b      	lsrs	r3, r3, #13
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	08012904 	.word	0x08012904

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e4:	b0ae      	sub	sp, #184	; 0xb8
 80018e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001906:	4bcb      	ldr	r3, [pc, #812]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b0c      	cmp	r3, #12
 8001910:	f200 8206 	bhi.w	8001d20 <HAL_RCC_GetSysClockFreq+0x440>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001951 	.word	0x08001951
 8001920:	08001d21 	.word	0x08001d21
 8001924:	08001d21 	.word	0x08001d21
 8001928:	08001d21 	.word	0x08001d21
 800192c:	08001959 	.word	0x08001959
 8001930:	08001d21 	.word	0x08001d21
 8001934:	08001d21 	.word	0x08001d21
 8001938:	08001d21 	.word	0x08001d21
 800193c:	08001961 	.word	0x08001961
 8001940:	08001d21 	.word	0x08001d21
 8001944:	08001d21 	.word	0x08001d21
 8001948:	08001d21 	.word	0x08001d21
 800194c:	08001b51 	.word	0x08001b51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4bb9      	ldr	r3, [pc, #740]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8001952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001956:	e1e7      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001958:	4bb8      	ldr	r3, [pc, #736]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x35c>)
 800195a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800195e:	e1e3      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001960:	4bb4      	ldr	r3, [pc, #720]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196c:	4bb1      	ldr	r3, [pc, #708]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d071      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001978:	4bae      	ldr	r3, [pc, #696]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	2200      	movs	r2, #0
 8001980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001984:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800198c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800199a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800199e:	4622      	mov	r2, r4
 80019a0:	462b      	mov	r3, r5
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4621      	mov	r1, r4
 80019b8:	1a51      	subs	r1, r2, r1
 80019ba:	6439      	str	r1, [r7, #64]	; 0x40
 80019bc:	4629      	mov	r1, r5
 80019be:	eb63 0301 	sbc.w	r3, r3, r1
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80019d0:	4649      	mov	r1, r9
 80019d2:	018b      	lsls	r3, r1, #6
 80019d4:	4641      	mov	r1, r8
 80019d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019da:	4641      	mov	r1, r8
 80019dc:	018a      	lsls	r2, r1, #6
 80019de:	4641      	mov	r1, r8
 80019e0:	1a51      	subs	r1, r2, r1
 80019e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80019e4:	4649      	mov	r1, r9
 80019e6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80019f8:	4649      	mov	r1, r9
 80019fa:	00cb      	lsls	r3, r1, #3
 80019fc:	4641      	mov	r1, r8
 80019fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a02:	4641      	mov	r1, r8
 8001a04:	00ca      	lsls	r2, r1, #3
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	189b      	adds	r3, r3, r2
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
 8001a12:	462b      	mov	r3, r5
 8001a14:	460a      	mov	r2, r1
 8001a16:	eb42 0303 	adc.w	r3, r2, r3
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a28:	4629      	mov	r1, r5
 8001a2a:	024b      	lsls	r3, r1, #9
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a32:	4621      	mov	r1, r4
 8001a34:	024a      	lsls	r2, r1, #9
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a4c:	f7fe fc38 	bl	80002c0 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a5a:	e067      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5c:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	2200      	movs	r2, #0
 8001a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a74:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a76:	2300      	movs	r3, #0
 8001a78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a7e:	4622      	mov	r2, r4
 8001a80:	462b      	mov	r3, r5
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	0159      	lsls	r1, r3, #5
 8001a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a90:	0150      	lsls	r0, r2, #5
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4621      	mov	r1, r4
 8001a98:	1a51      	subs	r1, r2, r1
 8001a9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aba:	4641      	mov	r1, r8
 8001abc:	018a      	lsls	r2, r1, #6
 8001abe:	4641      	mov	r1, r8
 8001ac0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ad6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ade:	4692      	mov	sl, r2
 8001ae0:	469b      	mov	fp, r3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	eb1a 0303 	adds.w	r3, sl, r3
 8001ae8:	623b      	str	r3, [r7, #32]
 8001aea:	462b      	mov	r3, r5
 8001aec:	eb4b 0303 	adc.w	r3, fp, r3
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001afe:	4629      	mov	r1, r5
 8001b00:	028b      	lsls	r3, r1, #10
 8001b02:	4621      	mov	r1, r4
 8001b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b08:	4621      	mov	r1, r4
 8001b0a:	028a      	lsls	r2, r1, #10
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b14:	2200      	movs	r2, #0
 8001b16:	673b      	str	r3, [r7, #112]	; 0x70
 8001b18:	677a      	str	r2, [r7, #116]	; 0x74
 8001b1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b1e:	f7fe fbcf 	bl	80002c0 <__aeabi_uldivmod>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4613      	mov	r3, r2
 8001b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b2c:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b4e:	e0eb      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b50:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d06b      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b68:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	2200      	movs	r2, #0
 8001b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b84:	4622      	mov	r2, r4
 8001b86:	462b      	mov	r3, r5
 8001b88:	f04f 0000 	mov.w	r0, #0
 8001b8c:	f04f 0100 	mov.w	r1, #0
 8001b90:	0159      	lsls	r1, r3, #5
 8001b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b96:	0150      	lsls	r0, r2, #5
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	1a51      	subs	r1, r2, r1
 8001ba0:	61b9      	str	r1, [r7, #24]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001bb6:	4659      	mov	r1, fp
 8001bb8:	018b      	lsls	r3, r1, #6
 8001bba:	4651      	mov	r1, sl
 8001bbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bc0:	4651      	mov	r1, sl
 8001bc2:	018a      	lsls	r2, r1, #6
 8001bc4:	4651      	mov	r1, sl
 8001bc6:	ebb2 0801 	subs.w	r8, r2, r1
 8001bca:	4659      	mov	r1, fp
 8001bcc:	eb63 0901 	sbc.w	r9, r3, r1
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001be0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001be4:	4690      	mov	r8, r2
 8001be6:	4699      	mov	r9, r3
 8001be8:	4623      	mov	r3, r4
 8001bea:	eb18 0303 	adds.w	r3, r8, r3
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	eb49 0303 	adc.w	r3, r9, r3
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c04:	4629      	mov	r1, r5
 8001c06:	024b      	lsls	r3, r1, #9
 8001c08:	4621      	mov	r1, r4
 8001c0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c0e:	4621      	mov	r1, r4
 8001c10:	024a      	lsls	r2, r1, #9
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c24:	f7fe fb4c 	bl	80002c0 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c32:	e065      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x420>
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c40:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	2200      	movs	r2, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c50:	653b      	str	r3, [r7, #80]	; 0x50
 8001c52:	2300      	movs	r3, #0
 8001c54:	657b      	str	r3, [r7, #84]	; 0x54
 8001c56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c5a:	4642      	mov	r2, r8
 8001c5c:	464b      	mov	r3, r9
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	0159      	lsls	r1, r3, #5
 8001c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6c:	0150      	lsls	r0, r2, #5
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4641      	mov	r1, r8
 8001c74:	1a51      	subs	r1, r2, r1
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	4649      	mov	r1, r9
 8001c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	018b      	lsls	r3, r1, #6
 8001c90:	4651      	mov	r1, sl
 8001c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c96:	4651      	mov	r1, sl
 8001c98:	018a      	lsls	r2, r1, #6
 8001c9a:	4651      	mov	r1, sl
 8001c9c:	1a54      	subs	r4, r2, r1
 8001c9e:	4659      	mov	r1, fp
 8001ca0:	eb63 0501 	sbc.w	r5, r3, r1
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	00eb      	lsls	r3, r5, #3
 8001cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb2:	00e2      	lsls	r2, r4, #3
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	4643      	mov	r3, r8
 8001cba:	18e3      	adds	r3, r4, r3
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	eb45 0303 	adc.w	r3, r5, r3
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	028b      	lsls	r3, r1, #10
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cdc:	4621      	mov	r1, r4
 8001cde:	028a      	lsls	r2, r1, #10
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ce8:	2200      	movs	r2, #0
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cec:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001cee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cf2:	f7fe fae5 	bl	80002c0 <__aeabi_uldivmod>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0f1b      	lsrs	r3, r3, #28
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d1e:	e003      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	37b8      	adds	r7, #184	; 0xb8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	00f42400 	.word	0x00f42400

08001d40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e28d      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8083 	beq.w	8001e66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d60:	4b94      	ldr	r3, [pc, #592]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d019      	beq.n	8001da0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d6c:	4b91      	ldr	r3, [pc, #580]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d78:	4b8e      	ldr	r3, [pc, #568]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d84:	d00c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d86:	4b8b      	ldr	r3, [pc, #556]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d112      	bne.n	8001db8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d9e:	d10b      	bne.n	8001db8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d05b      	beq.n	8001e64 <HAL_RCC_OscConfig+0x124>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d157      	bne.n	8001e64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e25a      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x90>
 8001dc2:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7b      	ldr	r2, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0xcc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0xb4>
 8001dda:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a75      	ldr	r2, [pc, #468]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a72      	ldr	r2, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xcc>
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b6c      	ldr	r3, [pc, #432]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6b      	ldr	r2, [pc, #428]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f8c8 	bl	8000fa8 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f8c4 	bl	8000fa8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e21f      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0xdc>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f8b4 	bl	8000fa8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff f8b0 	bl	8000fa8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e20b      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x104>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06f      	beq.n	8001f52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e72:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d017      	beq.n	8001eae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d105      	bne.n	8001e96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea2:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x186>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e1d3      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4937      	ldr	r1, [pc, #220]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	e03a      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_RCC_OscConfig+0x278>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f85d 	bl	8000fa8 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f859 	bl	8000fa8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1b4      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4925      	ldr	r1, [pc, #148]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_OscConfig+0x278>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f83c 	bl	8000fa8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f34:	f7ff f838 	bl	8000fa8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e193      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d036      	beq.n	8001fcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f81c 	bl	8000fa8 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff f818 	bl	8000fa8 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e173      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x234>
 8001f92:	e01b      	b.n	8001fcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x27c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f805 	bl	8000fa8 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa0:	e00e      	b.n	8001fc0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa2:	f7ff f801 	bl	8000fa8 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d907      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e15c      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470000 	.word	0x42470000
 8001fbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	4b8a      	ldr	r3, [pc, #552]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ea      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8097 	beq.w	8002108 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b83      	ldr	r3, [pc, #524]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002006:	2301      	movs	r3, #1
 8002008:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200a:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <HAL_RCC_OscConfig+0x4b0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d118      	bne.n	8002048 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x4b0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a75      	ldr	r2, [pc, #468]	; (80021f0 <HAL_RCC_OscConfig+0x4b0>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002022:	f7fe ffc1 	bl	8000fa8 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7fe ffbd 	bl	8000fa8 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e118      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <HAL_RCC_OscConfig+0x4b0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x31e>
 8002050:	4b66      	ldr	r3, [pc, #408]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	4a65      	ldr	r2, [pc, #404]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	e01c      	b.n	8002098 <HAL_RCC_OscConfig+0x358>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b05      	cmp	r3, #5
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x340>
 8002066:	4b61      	ldr	r3, [pc, #388]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	4a60      	ldr	r2, [pc, #384]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6713      	str	r3, [r2, #112]	; 0x70
 8002072:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	4a5d      	ldr	r2, [pc, #372]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6713      	str	r3, [r2, #112]	; 0x70
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0x358>
 8002080:	4b5a      	ldr	r3, [pc, #360]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	4a59      	ldr	r2, [pc, #356]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	; 0x70
 800208c:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	4a56      	ldr	r2, [pc, #344]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7fe ff82 	bl	8000fa8 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7fe ff7e 	bl	8000fa8 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0d7      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020be:	4b4b      	ldr	r3, [pc, #300]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0ee      	beq.n	80020a8 <HAL_RCC_OscConfig+0x368>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe ff6c 	bl	8000fa8 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7fe ff68 	bl	8000fa8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0c1      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ea:	4b40      	ldr	r3, [pc, #256]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ee      	bne.n	80020d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	4a3a      	ldr	r2, [pc, #232]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002106:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80ad 	beq.w	800226c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002112:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d060      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d145      	bne.n	80021b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b33      	ldr	r3, [pc, #204]	; (80021f4 <HAL_RCC_OscConfig+0x4b4>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe ff3c 	bl	8000fa8 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe ff38 	bl	8000fa8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e093      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	041b      	lsls	r3, r3, #16
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	071b      	lsls	r3, r3, #28
 800217e:	491b      	ldr	r1, [pc, #108]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x4b4>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe ff0d 	bl	8000fa8 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002192:	f7fe ff09 	bl	8000fa8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e064      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x452>
 80021b0:	e05c      	b.n	800226c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_RCC_OscConfig+0x4b4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fef6 	bl	8000fa8 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe fef2 	bl	8000fa8 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e04d      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x480>
 80021de:	e045      	b.n	800226c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e040      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40007000 	.word	0x40007000
 80021f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <HAL_RCC_OscConfig+0x538>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d030      	beq.n	8002268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d129      	bne.n	8002268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d122      	bne.n	8002268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002228:	4013      	ands	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800222e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002230:	4293      	cmp	r3, r2
 8002232:	d119      	bne.n	8002268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	3b01      	subs	r3, #1
 8002242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d10f      	bne.n	8002268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d107      	bne.n	8002268 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e03f      	b.n	800230e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fc80 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fd7b 	bl	8002dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b08a      	sub	sp, #40	; 0x28
 800231a:	af02      	add	r7, sp, #8
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b20      	cmp	r3, #32
 8002334:	d17c      	bne.n	8002430 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_UART_Transmit+0x2c>
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e075      	b.n	8002432 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_UART_Transmit+0x3e>
 8002350:	2302      	movs	r3, #2
 8002352:	e06e      	b.n	8002432 <HAL_UART_Transmit+0x11c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2221      	movs	r2, #33	; 0x21
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800236a:	f7fe fe1d 	bl	8000fa8 <HAL_GetTick>
 800236e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002384:	d108      	bne.n	8002398 <HAL_UART_Transmit+0x82>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d104      	bne.n	8002398 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e003      	b.n	80023a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023a8:	e02a      	b.n	8002400 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 faf9 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e036      	b.n	8002432 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	3302      	adds	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e007      	b.n	80023f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	3301      	adds	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1cf      	bne.n	80023aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2200      	movs	r2, #0
 8002412:	2140      	movs	r1, #64	; 0x40
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fac9 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e006      	b.n	8002432 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b0ba      	sub	sp, #232	; 0xe8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800247a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_UART_IRQHandler+0x66>
 800248e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fbd3 	bl	8002c46 <UART_Receive_IT>
      return;
 80024a0:	e256      	b.n	8002950 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80de 	beq.w	8002668 <HAL_UART_IRQHandler+0x22c>
 80024ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80d1 	beq.w	8002668 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_UART_IRQHandler+0xae>
 80024d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_UART_IRQHandler+0xd2>
 80024f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_UART_IRQHandler+0xf6>
 800251a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0204 	orr.w	r2, r3, #4
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d011      	beq.n	8002562 <HAL_UART_IRQHandler+0x126>
 800253e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800254a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f043 0208 	orr.w	r2, r3, #8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 81ed 	beq.w	8002946 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800256c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_UART_IRQHandler+0x14e>
 8002578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fb5e 	bl	8002c46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_UART_IRQHandler+0x17a>
 80025ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d04f      	beq.n	8002656 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa66 	bl	8002a88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d141      	bne.n	800264e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3314      	adds	r3, #20
 80025d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d8:	e853 3f00 	ldrex	r3, [r3]
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3314      	adds	r3, #20
 80025f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800260e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1d9      	bne.n	80025ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	2b00      	cmp	r3, #0
 800261c:	d013      	beq.n	8002646 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	4a7d      	ldr	r2, [pc, #500]	; (8002818 <HAL_UART_IRQHandler+0x3dc>)
 8002624:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fe6d 	bl	800130a <HAL_DMA_Abort_IT>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002640:	4610      	mov	r0, r2
 8002642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	e00e      	b.n	8002664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f99a 	bl	8002980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	e00a      	b.n	8002664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f996 	bl	8002980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002654:	e006      	b.n	8002664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f992 	bl	8002980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002662:	e170      	b.n	8002946 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002664:	bf00      	nop
    return;
 8002666:	e16e      	b.n	8002946 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	2b01      	cmp	r3, #1
 800266e:	f040 814a 	bne.w	8002906 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8143 	beq.w	8002906 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 813c 	beq.w	8002906 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	f040 80b4 	bne.w	800281c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8140 	beq.w	800294a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026d2:	429a      	cmp	r2, r3
 80026d4:	f080 8139 	bcs.w	800294a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ea:	f000 8088 	beq.w	80027fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026fc:	e853 3f00 	ldrex	r3, [r3]
 8002700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800270c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	330c      	adds	r3, #12
 8002716:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800271a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800271e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002726:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800272a:	e841 2300 	strex	r3, r2, [r1]
 800272e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1d9      	bne.n	80026ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3314      	adds	r3, #20
 8002740:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800274a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3314      	adds	r3, #20
 800275a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002762:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002766:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800276a:	e841 2300 	strex	r3, r2, [r1]
 800276e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e1      	bne.n	800273a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3314      	adds	r3, #20
 800277c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002780:	e853 3f00 	ldrex	r3, [r3]
 8002784:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3314      	adds	r3, #20
 8002796:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800279a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800279c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e3      	bne.n	8002776 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c6:	e853 3f00 	ldrex	r3, [r3]
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ce:	f023 0310 	bic.w	r3, r3, #16
 80027d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80027e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e8:	e841 2300 	strex	r3, r2, [r1]
 80027ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1e3      	bne.n	80027bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fd16 	bl	800122a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002806:	b29b      	uxth	r3, r3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	b29b      	uxth	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8c0 	bl	8002994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002814:	e099      	b.n	800294a <HAL_UART_IRQHandler+0x50e>
 8002816:	bf00      	nop
 8002818:	08002b4f 	.word	0x08002b4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002824:	b29b      	uxth	r3, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 808b 	beq.w	800294e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8086 	beq.w	800294e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002866:	647a      	str	r2, [r7, #68]	; 0x44
 8002868:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800286c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e3      	bne.n	8002842 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3314      	adds	r3, #20
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	623b      	str	r3, [r7, #32]
   return(result);
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800289e:	633a      	str	r2, [r7, #48]	; 0x30
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e3      	bne.n	800287a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0310 	bic.w	r3, r3, #16
 80028d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	330c      	adds	r3, #12
 80028e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028e4:	61fa      	str	r2, [r7, #28]
 80028e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	617b      	str	r3, [r7, #20]
   return(result);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e3      	bne.n	80028c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f848 	bl	8002994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002904:	e023      	b.n	800294e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_UART_IRQHandler+0x4ea>
 8002912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f929 	bl	8002b76 <UART_Transmit_IT>
    return;
 8002924:	e014      	b.n	8002950 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00e      	beq.n	8002950 <HAL_UART_IRQHandler+0x514>
 8002932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f969 	bl	8002c16 <UART_EndTransmit_IT>
    return;
 8002944:	e004      	b.n	8002950 <HAL_UART_IRQHandler+0x514>
    return;
 8002946:	bf00      	nop
 8002948:	e002      	b.n	8002950 <HAL_UART_IRQHandler+0x514>
      return;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <HAL_UART_IRQHandler+0x514>
      return;
 800294e:	bf00      	nop
  }
}
 8002950:	37e8      	adds	r7, #232	; 0xe8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop

08002958 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b090      	sub	sp, #64	; 0x40
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029bc:	e050      	b.n	8002a60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d04c      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <UART_WaitOnFlagUntilTimeout+0x30>
 80029cc:	f7fe faec 	bl	8000fa8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029d8:	429a      	cmp	r2, r3
 80029da:	d241      	bcs.n	8002a60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029fc:	637a      	str	r2, [r7, #52]	; 0x34
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a30:	623a      	str	r2, [r7, #32]
 8002a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	69f9      	ldr	r1, [r7, #28]
 8002a36:	6a3a      	ldr	r2, [r7, #32]
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e00f      	b.n	8002a80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d09f      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3740      	adds	r7, #64	; 0x40
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b095      	sub	sp, #84	; 0x54
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ab0:	643a      	str	r2, [r7, #64]	; 0x40
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e5      	bne.n	8002a90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3314      	adds	r3, #20
 8002aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	e853 3f00 	ldrex	r3, [r3]
 8002ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aec:	e841 2300 	strex	r3, r2, [r1]
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e5      	bne.n	8002ac4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d119      	bne.n	8002b34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f023 0310 	bic.w	r3, r3, #16
 8002b16:	647b      	str	r3, [r7, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b20:	61ba      	str	r2, [r7, #24]
 8002b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6979      	ldr	r1, [r7, #20]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e5      	bne.n	8002b00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b42:	bf00      	nop
 8002b44:	3754      	adds	r7, #84	; 0x54
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff ff09 	bl	8002980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b21      	cmp	r3, #33	; 0x21
 8002b88:	d13e      	bne.n	8002c08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	d114      	bne.n	8002bbe <UART_Transmit_IT+0x48>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d110      	bne.n	8002bbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	1c9a      	adds	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	621a      	str	r2, [r3, #32]
 8002bbc:	e008      	b.n	8002bd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	1c59      	adds	r1, r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6211      	str	r1, [r2, #32]
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fe8e 	bl	8002958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b08c      	sub	sp, #48	; 0x30
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b22      	cmp	r3, #34	; 0x22
 8002c58:	f040 80ab 	bne.w	8002db2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	d117      	bne.n	8002c96 <UART_Receive_IT+0x50>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d113      	bne.n	8002c96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	1c9a      	adds	r2, r3, #2
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
 8002c94:	e026      	b.n	8002ce4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca8:	d007      	beq.n	8002cba <UART_Receive_IT+0x74>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <UART_Receive_IT+0x82>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e008      	b.n	8002cda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d15a      	bne.n	8002dae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0220 	bic.w	r2, r2, #32
 8002d06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d135      	bne.n	8002da4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	e853 3f00 	ldrex	r3, [r3]
 8002d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f023 0310 	bic.w	r3, r3, #16
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	623a      	str	r2, [r7, #32]
 8002d60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d62:	69f9      	ldr	r1, [r7, #28]
 8002d64:	6a3a      	ldr	r2, [r7, #32]
 8002d66:	e841 2300 	strex	r3, r2, [r1]
 8002d6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e5      	bne.n	8002d3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d10a      	bne.n	8002d96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff fdf9 	bl	8002994 <HAL_UARTEx_RxEventCallback>
 8002da2:	e002      	b.n	8002daa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff fde1 	bl	800296c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e002      	b.n	8002db4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3730      	adds	r7, #48	; 0x30
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc0:	b0c0      	sub	sp, #256	; 0x100
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	ea40 0301 	orr.w	r3, r0, r1
 8002de4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e14:	f021 010c 	bic.w	r1, r1, #12
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e22:	430b      	orrs	r3, r1
 8002e24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e36:	6999      	ldr	r1, [r3, #24]
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	ea40 0301 	orr.w	r3, r0, r1
 8002e42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b8f      	ldr	r3, [pc, #572]	; (8003088 <UART_SetConfig+0x2cc>)
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d005      	beq.n	8002e5c <UART_SetConfig+0xa0>
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b8d      	ldr	r3, [pc, #564]	; (800308c <UART_SetConfig+0x2d0>)
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d104      	bne.n	8002e66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e5c:	f7fe fd2c 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
 8002e60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e64:	e003      	b.n	8002e6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e66:	f7fe fd13 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 8002e6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e78:	f040 810c 	bne.w	8003094 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e8e:	4622      	mov	r2, r4
 8002e90:	462b      	mov	r3, r5
 8002e92:	1891      	adds	r1, r2, r2
 8002e94:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e96:	415b      	adcs	r3, r3
 8002e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	eb12 0801 	adds.w	r8, r2, r1
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	eb43 0901 	adc.w	r9, r3, r1
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ebe:	4690      	mov	r8, r2
 8002ec0:	4699      	mov	r9, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	eb18 0303 	adds.w	r3, r8, r3
 8002ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ecc:	462b      	mov	r3, r5
 8002ece:	eb49 0303 	adc.w	r3, r9, r3
 8002ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ee2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ee6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eea:	460b      	mov	r3, r1
 8002eec:	18db      	adds	r3, r3, r3
 8002eee:	653b      	str	r3, [r7, #80]	; 0x50
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	eb42 0303 	adc.w	r3, r2, r3
 8002ef6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002efc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f00:	f7fd f9de 	bl	80002c0 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4b61      	ldr	r3, [pc, #388]	; (8003090 <UART_SetConfig+0x2d4>)
 8002f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	011c      	lsls	r4, r3, #4
 8002f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	1891      	adds	r1, r2, r2
 8002f2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f2c:	415b      	adcs	r3, r3
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f34:	4641      	mov	r1, r8
 8002f36:	eb12 0a01 	adds.w	sl, r2, r1
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f54:	4692      	mov	sl, r2
 8002f56:	469b      	mov	fp, r3
 8002f58:	4643      	mov	r3, r8
 8002f5a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f62:	464b      	mov	r3, r9
 8002f64:	eb4b 0303 	adc.w	r3, fp, r3
 8002f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f80:	460b      	mov	r3, r1
 8002f82:	18db      	adds	r3, r3, r3
 8002f84:	643b      	str	r3, [r7, #64]	; 0x40
 8002f86:	4613      	mov	r3, r2
 8002f88:	eb42 0303 	adc.w	r3, r2, r3
 8002f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f96:	f7fd f993 	bl	80002c0 <__aeabi_uldivmod>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <UART_SetConfig+0x2d4>)
 8002fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2264      	movs	r2, #100	; 0x64
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	1acb      	subs	r3, r1, r3
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <UART_SetConfig+0x2d4>)
 8002fb8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fc4:	441c      	add	r4, r3
 8002fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fd8:	4642      	mov	r2, r8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	1891      	adds	r1, r2, r2
 8002fde:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fe0:	415b      	adcs	r3, r3
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fe8:	4641      	mov	r1, r8
 8002fea:	1851      	adds	r1, r2, r1
 8002fec:	6339      	str	r1, [r7, #48]	; 0x30
 8002fee:	4649      	mov	r1, r9
 8002ff0:	414b      	adcs	r3, r1
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003000:	4659      	mov	r1, fp
 8003002:	00cb      	lsls	r3, r1, #3
 8003004:	4651      	mov	r1, sl
 8003006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800300a:	4651      	mov	r1, sl
 800300c:	00ca      	lsls	r2, r1, #3
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	4603      	mov	r3, r0
 8003014:	4642      	mov	r2, r8
 8003016:	189b      	adds	r3, r3, r2
 8003018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800301c:	464b      	mov	r3, r9
 800301e:	460a      	mov	r2, r1
 8003020:	eb42 0303 	adc.w	r3, r2, r3
 8003024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003034:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003038:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800303c:	460b      	mov	r3, r1
 800303e:	18db      	adds	r3, r3, r3
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
 8003042:	4613      	mov	r3, r2
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800304e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003052:	f7fd f935 	bl	80002c0 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <UART_SetConfig+0x2d4>)
 800305c:	fba3 1302 	umull	r1, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	2164      	movs	r1, #100	; 0x64
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	3332      	adds	r3, #50	; 0x32
 800306e:	4a08      	ldr	r2, [pc, #32]	; (8003090 <UART_SetConfig+0x2d4>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	f003 0207 	and.w	r2, r3, #7
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4422      	add	r2, r4
 8003082:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003084:	e105      	b.n	8003292 <UART_SetConfig+0x4d6>
 8003086:	bf00      	nop
 8003088:	40011000 	.word	0x40011000
 800308c:	40011400 	.word	0x40011400
 8003090:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003098:	2200      	movs	r2, #0
 800309a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800309e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030a6:	4642      	mov	r2, r8
 80030a8:	464b      	mov	r3, r9
 80030aa:	1891      	adds	r1, r2, r2
 80030ac:	6239      	str	r1, [r7, #32]
 80030ae:	415b      	adcs	r3, r3
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030b6:	4641      	mov	r1, r8
 80030b8:	1854      	adds	r4, r2, r1
 80030ba:	4649      	mov	r1, r9
 80030bc:	eb43 0501 	adc.w	r5, r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	00eb      	lsls	r3, r5, #3
 80030ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ce:	00e2      	lsls	r2, r4, #3
 80030d0:	4614      	mov	r4, r2
 80030d2:	461d      	mov	r5, r3
 80030d4:	4643      	mov	r3, r8
 80030d6:	18e3      	adds	r3, r4, r3
 80030d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030dc:	464b      	mov	r3, r9
 80030de:	eb45 0303 	adc.w	r3, r5, r3
 80030e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003102:	4629      	mov	r1, r5
 8003104:	008b      	lsls	r3, r1, #2
 8003106:	4621      	mov	r1, r4
 8003108:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800310c:	4621      	mov	r1, r4
 800310e:	008a      	lsls	r2, r1, #2
 8003110:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003114:	f7fd f8d4 	bl	80002c0 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <UART_SetConfig+0x4e4>)
 800311e:	fba3 2302 	umull	r2, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	011c      	lsls	r4, r3, #4
 8003126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800312a:	2200      	movs	r2, #0
 800312c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003130:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003134:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003138:	4642      	mov	r2, r8
 800313a:	464b      	mov	r3, r9
 800313c:	1891      	adds	r1, r2, r2
 800313e:	61b9      	str	r1, [r7, #24]
 8003140:	415b      	adcs	r3, r3
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003148:	4641      	mov	r1, r8
 800314a:	1851      	adds	r1, r2, r1
 800314c:	6139      	str	r1, [r7, #16]
 800314e:	4649      	mov	r1, r9
 8003150:	414b      	adcs	r3, r1
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003160:	4659      	mov	r1, fp
 8003162:	00cb      	lsls	r3, r1, #3
 8003164:	4651      	mov	r1, sl
 8003166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800316a:	4651      	mov	r1, sl
 800316c:	00ca      	lsls	r2, r1, #3
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	4603      	mov	r3, r0
 8003174:	4642      	mov	r2, r8
 8003176:	189b      	adds	r3, r3, r2
 8003178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800317c:	464b      	mov	r3, r9
 800317e:	460a      	mov	r2, r1
 8003180:	eb42 0303 	adc.w	r3, r2, r3
 8003184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	67bb      	str	r3, [r7, #120]	; 0x78
 8003192:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031a0:	4649      	mov	r1, r9
 80031a2:	008b      	lsls	r3, r1, #2
 80031a4:	4641      	mov	r1, r8
 80031a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031aa:	4641      	mov	r1, r8
 80031ac:	008a      	lsls	r2, r1, #2
 80031ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031b2:	f7fd f885 	bl	80002c0 <__aeabi_uldivmod>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <UART_SetConfig+0x4e4>)
 80031bc:	fba3 1302 	umull	r1, r3, r3, r2
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	2164      	movs	r1, #100	; 0x64
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	3332      	adds	r3, #50	; 0x32
 80031ce:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <UART_SetConfig+0x4e4>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031da:	441c      	add	r4, r3
 80031dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e0:	2200      	movs	r2, #0
 80031e2:	673b      	str	r3, [r7, #112]	; 0x70
 80031e4:	677a      	str	r2, [r7, #116]	; 0x74
 80031e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031ea:	4642      	mov	r2, r8
 80031ec:	464b      	mov	r3, r9
 80031ee:	1891      	adds	r1, r2, r2
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	415b      	adcs	r3, r3
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031fa:	4641      	mov	r1, r8
 80031fc:	1851      	adds	r1, r2, r1
 80031fe:	6039      	str	r1, [r7, #0]
 8003200:	4649      	mov	r1, r9
 8003202:	414b      	adcs	r3, r1
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003212:	4659      	mov	r1, fp
 8003214:	00cb      	lsls	r3, r1, #3
 8003216:	4651      	mov	r1, sl
 8003218:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800321c:	4651      	mov	r1, sl
 800321e:	00ca      	lsls	r2, r1, #3
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	4603      	mov	r3, r0
 8003226:	4642      	mov	r2, r8
 8003228:	189b      	adds	r3, r3, r2
 800322a:	66bb      	str	r3, [r7, #104]	; 0x68
 800322c:	464b      	mov	r3, r9
 800322e:	460a      	mov	r2, r1
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	663b      	str	r3, [r7, #96]	; 0x60
 8003240:	667a      	str	r2, [r7, #100]	; 0x64
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800324e:	4649      	mov	r1, r9
 8003250:	008b      	lsls	r3, r1, #2
 8003252:	4641      	mov	r1, r8
 8003254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003258:	4641      	mov	r1, r8
 800325a:	008a      	lsls	r2, r1, #2
 800325c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003260:	f7fd f82e 	bl	80002c0 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <UART_SetConfig+0x4e4>)
 800326a:	fba3 1302 	umull	r1, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2164      	movs	r1, #100	; 0x64
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	3332      	adds	r3, #50	; 0x32
 800327c:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <UART_SetConfig+0x4e4>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4422      	add	r2, r4
 8003290:	609a      	str	r2, [r3, #8]
}
 8003292:	bf00      	nop
 8003294:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800329e:	bf00      	nop
 80032a0:	51eb851f 	.word	0x51eb851f

080032a4 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80032ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 80032be:	2100      	movs	r1, #0
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f00e fad5 	bl	8011870 <memset>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 80032dc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f00b fb81 	bl	800e9e8 <mbedtls_platform_zeroize>
 80032e6:	e000      	b.n	80032ea <mbedtls_aes_free+0x1c>
        return;
 80032e8:	bf00      	nop
}
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	d012      	beq.n	800332a <mbedtls_aes_setkey_enc+0x3a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330a:	d812      	bhi.n	8003332 <mbedtls_aes_setkey_enc+0x42>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b80      	cmp	r3, #128	; 0x80
 8003310:	d003      	beq.n	800331a <mbedtls_aes_setkey_enc+0x2a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2bc0      	cmp	r3, #192	; 0xc0
 8003316:	d004      	beq.n	8003322 <mbedtls_aes_setkey_enc+0x32>
 8003318:	e00b      	b.n	8003332 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	220a      	movs	r2, #10
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e00a      	b.n	8003338 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	220c      	movs	r2, #12
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	e006      	b.n	8003338 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	220e      	movs	r2, #14
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e002      	b.n	8003338 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8003332:	f06f 031f 	mvn.w	r3, #31
 8003336:	e1a7      	b.n	8003688 <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3308      	adds	r3, #8
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e027      	b.n	800339a <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	3301      	adds	r3, #1
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	ea41 0203 	orr.w	r2, r1, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3302      	adds	r3, #2
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	440b      	add	r3, r1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	ea42 0103 	orr.w	r1, r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3303      	adds	r3, #3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4413      	add	r3, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	061a      	lsls	r2, r3, #24
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	6938      	ldr	r0, [r7, #16]
 800338e:	4403      	add	r3, r0
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d3d2      	bcc.n	800334a <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b0e      	cmp	r3, #14
 80033aa:	f000 80ca 	beq.w	8003542 <mbedtls_aes_setkey_enc+0x252>
 80033ae:	2b0e      	cmp	r3, #14
 80033b0:	f300 8169 	bgt.w	8003686 <mbedtls_aes_setkey_enc+0x396>
 80033b4:	2b0a      	cmp	r3, #10
 80033b6:	d002      	beq.n	80033be <mbedtls_aes_setkey_enc+0xce>
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	d057      	beq.n	800346c <mbedtls_aes_setkey_enc+0x17c>
 80033bc:	e163      	b.n	8003686 <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e04f      	b.n	8003464 <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	495f      	ldr	r1, [pc, #380]	; (8003548 <mbedtls_aes_setkey_enc+0x258>)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033d0:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	320c      	adds	r2, #12
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	0a12      	lsrs	r2, r2, #8
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	495b      	ldr	r1, [pc, #364]	; (800354c <mbedtls_aes_setkey_enc+0x25c>)
 80033de:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 80033e0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	330c      	adds	r3, #12
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	4957      	ldr	r1, [pc, #348]	; (800354c <mbedtls_aes_setkey_enc+0x25c>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80033f2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	330c      	adds	r3, #12
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	0e1b      	lsrs	r3, r3, #24
 80033fc:	4953      	ldr	r1, [pc, #332]	; (800354c <mbedtls_aes_setkey_enc+0x25c>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8003402:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	330c      	adds	r3, #12
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4a4f      	ldr	r2, [pc, #316]	; (800354c <mbedtls_aes_setkey_enc+0x25c>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003418:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 800341a:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	3304      	adds	r3, #4
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	3310      	adds	r3, #16
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	3314      	adds	r3, #20
 800342c:	404a      	eors	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	3308      	adds	r3, #8
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	3314      	adds	r3, #20
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	3318      	adds	r3, #24
 8003440:	404a      	eors	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	330c      	adds	r3, #12
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	3318      	adds	r3, #24
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	331c      	adds	r3, #28
 8003454:	404a      	eors	r2, r1
 8003456:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3301      	adds	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	3310      	adds	r3, #16
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b09      	cmp	r3, #9
 8003468:	d9ac      	bls.n	80033c4 <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 800346a:	e10c      	b.n	8003686 <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e063      	b.n	800353a <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4934      	ldr	r1, [pc, #208]	; (8003548 <mbedtls_aes_setkey_enc+0x258>)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800347e:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	3214      	adds	r2, #20
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	0a12      	lsrs	r2, r2, #8
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	4930      	ldr	r1, [pc, #192]	; (800354c <mbedtls_aes_setkey_enc+0x25c>)
 800348c:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 800348e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	3314      	adds	r3, #20
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	b2db      	uxtb	r3, r3
 800349a:	492c      	ldr	r1, [pc, #176]	; (800354c <mbedtls_aes_setkey_enc+0x25c>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80034a0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	3314      	adds	r3, #20
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0e1b      	lsrs	r3, r3, #24
 80034aa:	4928      	ldr	r1, [pc, #160]	; (800354c <mbedtls_aes_setkey_enc+0x25c>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80034b0:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	3314      	adds	r3, #20
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4a23      	ldr	r2, [pc, #140]	; (800354c <mbedtls_aes_setkey_enc+0x25c>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80034c6:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 80034c8:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	3304      	adds	r3, #4
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	3318      	adds	r3, #24
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	331c      	adds	r3, #28
 80034da:	404a      	eors	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3308      	adds	r3, #8
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	331c      	adds	r3, #28
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3320      	adds	r3, #32
 80034ee:	404a      	eors	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	330c      	adds	r3, #12
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3320      	adds	r3, #32
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	3324      	adds	r3, #36	; 0x24
 8003502:	404a      	eors	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3310      	adds	r3, #16
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	3324      	adds	r3, #36	; 0x24
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	3328      	adds	r3, #40	; 0x28
 8003516:	404a      	eors	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3314      	adds	r3, #20
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	3328      	adds	r3, #40	; 0x28
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	332c      	adds	r3, #44	; 0x2c
 800352a:	404a      	eors	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	3318      	adds	r3, #24
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b07      	cmp	r3, #7
 800353e:	d998      	bls.n	8003472 <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 8003540:	e0a1      	b.n	8003686 <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e099      	b.n	800367c <mbedtls_aes_setkey_enc+0x38c>
 8003548:	08014b0c 	.word	0x08014b0c
 800354c:	0801290c 	.word	0x0801290c
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	494f      	ldr	r1, [pc, #316]	; (8003694 <mbedtls_aes_setkey_enc+0x3a4>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800355c:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	321c      	adds	r2, #28
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	0a12      	lsrs	r2, r2, #8
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	494b      	ldr	r1, [pc, #300]	; (8003698 <mbedtls_aes_setkey_enc+0x3a8>)
 800356a:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 800356c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	331c      	adds	r3, #28
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	b2db      	uxtb	r3, r3
 8003578:	4947      	ldr	r1, [pc, #284]	; (8003698 <mbedtls_aes_setkey_enc+0x3a8>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800357e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	331c      	adds	r3, #28
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0e1b      	lsrs	r3, r3, #24
 8003588:	4943      	ldr	r1, [pc, #268]	; (8003698 <mbedtls_aes_setkey_enc+0x3a8>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800358e:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	331c      	adds	r3, #28
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	4a3f      	ldr	r2, [pc, #252]	; (8003698 <mbedtls_aes_setkey_enc+0x3a8>)
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80035a4:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 80035a6:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	3304      	adds	r3, #4
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3320      	adds	r3, #32
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	3324      	adds	r3, #36	; 0x24
 80035b8:	404a      	eors	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	3308      	adds	r3, #8
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3324      	adds	r3, #36	; 0x24
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	3328      	adds	r3, #40	; 0x28
 80035cc:	404a      	eors	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	330c      	adds	r3, #12
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	3328      	adds	r3, #40	; 0x28
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	332c      	adds	r3, #44	; 0x2c
 80035e0:	404a      	eors	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	3310      	adds	r3, #16
 80035e8:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	322c      	adds	r2, #44	; 0x2c
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	4929      	ldr	r1, [pc, #164]	; (8003698 <mbedtls_aes_setkey_enc+0x3a8>)
 80035f4:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 80035f6:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	332c      	adds	r3, #44	; 0x2c
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4925      	ldr	r1, [pc, #148]	; (8003698 <mbedtls_aes_setkey_enc+0x3a8>)
 8003604:	5ccb      	ldrb	r3, [r1, r3]
 8003606:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8003608:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	332c      	adds	r3, #44	; 0x2c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	b2db      	uxtb	r3, r3
 8003614:	4920      	ldr	r1, [pc, #128]	; (8003698 <mbedtls_aes_setkey_enc+0x3a8>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800361a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	332c      	adds	r3, #44	; 0x2c
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0e1b      	lsrs	r3, r3, #24
 8003626:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <mbedtls_aes_setkey_enc+0x3a8>)
 8003628:	5cd3      	ldrb	r3, [r2, r3]
 800362a:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003630:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8003632:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3314      	adds	r3, #20
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	3330      	adds	r3, #48	; 0x30
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3334      	adds	r3, #52	; 0x34
 8003644:	404a      	eors	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	3318      	adds	r3, #24
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	3334      	adds	r3, #52	; 0x34
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	3338      	adds	r3, #56	; 0x38
 8003658:	404a      	eors	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	331c      	adds	r3, #28
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3338      	adds	r3, #56	; 0x38
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	333c      	adds	r3, #60	; 0x3c
 800366c:	404a      	eors	r2, r1
 800366e:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3301      	adds	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	3320      	adds	r3, #32
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2b06      	cmp	r3, #6
 8003680:	f67f af66 	bls.w	8003550 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 8003684:	bf00      	nop
    }

    return( 0 );
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	08014b0c 	.word	0x08014b0c
 8003698:	0801290c 	.word	0x0801290c

0800369c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800369c:	b480      	push	{r7}
 800369e:	b08f      	sub	sp, #60	; 0x3c
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3301      	adds	r3, #1
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	431a      	orrs	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3302      	adds	r3, #2
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3303      	adds	r3, #3
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	4313      	orrs	r3, r2
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	633a      	str	r2, [r7, #48]	; 0x30
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036de:	4053      	eors	r3, r2
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3304      	adds	r3, #4
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	3305      	adds	r3, #5
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3306      	adds	r3, #6
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3307      	adds	r3, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	4313      	orrs	r3, r2
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	633a      	str	r2, [r7, #48]	; 0x30
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003714:	4053      	eors	r3, r2
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3308      	adds	r3, #8
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	3309      	adds	r3, #9
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	431a      	orrs	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	330a      	adds	r3, #10
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	330b      	adds	r3, #11
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	061b      	lsls	r3, r3, #24
 800373c:	4313      	orrs	r3, r2
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	1d1a      	adds	r2, r3, #4
 8003744:	633a      	str	r2, [r7, #48]	; 0x30
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	4053      	eors	r3, r2
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	330c      	adds	r3, #12
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	330d      	adds	r3, #13
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	431a      	orrs	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	330e      	adds	r3, #14
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	431a      	orrs	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	330f      	adds	r3, #15
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	4313      	orrs	r3, r2
 8003774:	623b      	str	r3, [r7, #32]
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	633a      	str	r2, [r7, #48]	; 0x30
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a3a      	ldr	r2, [r7, #32]
 8003780:	4053      	eors	r3, r2
 8003782:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	105b      	asrs	r3, r3, #1
 800378a:	3b01      	subs	r3, #1
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
 800378e:	e0fa      	b.n	8003986 <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	633a      	str	r2, [r7, #48]	; 0x30
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	b2db      	uxtb	r3, r3
 800379c:	49ab      	ldr	r1, [pc, #684]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 800379e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037a2:	405a      	eors	r2, r3
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	49a9      	ldr	r1, [pc, #676]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 80037ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037b0:	405a      	eors	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	49a6      	ldr	r1, [pc, #664]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 80037ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037be:	405a      	eors	r2, r3
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	0e1b      	lsrs	r3, r3, #24
 80037c4:	49a4      	ldr	r1, [pc, #656]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 80037c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ca:	4053      	eors	r3, r2
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	1d1a      	adds	r2, r3, #4
 80037d2:	633a      	str	r2, [r7, #48]	; 0x30
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	499c      	ldr	r1, [pc, #624]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 80037dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037e0:	405a      	eors	r2, r3
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4999      	ldr	r1, [pc, #612]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 80037ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ee:	405a      	eors	r2, r3
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	0c1b      	lsrs	r3, r3, #16
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	4997      	ldr	r1, [pc, #604]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 80037f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037fc:	405a      	eors	r2, r3
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	0e1b      	lsrs	r3, r3, #24
 8003802:	4995      	ldr	r1, [pc, #596]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003808:	4053      	eors	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	1d1a      	adds	r2, r3, #4
 8003810:	633a      	str	r2, [r7, #48]	; 0x30
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	b2db      	uxtb	r3, r3
 8003818:	498c      	ldr	r1, [pc, #560]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 800381a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800381e:	405a      	eors	r2, r3
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	b2db      	uxtb	r3, r3
 8003826:	498a      	ldr	r1, [pc, #552]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800382c:	405a      	eors	r2, r3
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4987      	ldr	r1, [pc, #540]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003836:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800383a:	405a      	eors	r2, r3
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	0e1b      	lsrs	r3, r3, #24
 8003840:	4985      	ldr	r1, [pc, #532]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003842:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003846:	4053      	eors	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	633a      	str	r2, [r7, #48]	; 0x30
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	497d      	ldr	r1, [pc, #500]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 8003858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800385c:	405a      	eors	r2, r3
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	0a1b      	lsrs	r3, r3, #8
 8003862:	b2db      	uxtb	r3, r3
 8003864:	497a      	ldr	r1, [pc, #488]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003866:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800386a:	405a      	eors	r2, r3
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	0c1b      	lsrs	r3, r3, #16
 8003870:	b2db      	uxtb	r3, r3
 8003872:	4978      	ldr	r1, [pc, #480]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003878:	405a      	eors	r2, r3
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	0e1b      	lsrs	r3, r3, #24
 800387e:	4976      	ldr	r1, [pc, #472]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003880:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003884:	4053      	eors	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	1d1a      	adds	r2, r3, #4
 800388c:	633a      	str	r2, [r7, #48]	; 0x30
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	496d      	ldr	r1, [pc, #436]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 8003896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800389a:	405a      	eors	r2, r3
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	496b      	ldr	r1, [pc, #428]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 80038a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038a8:	405a      	eors	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4968      	ldr	r1, [pc, #416]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 80038b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038b6:	405a      	eors	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	0e1b      	lsrs	r3, r3, #24
 80038bc:	4966      	ldr	r1, [pc, #408]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 80038be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038c2:	4053      	eors	r3, r2
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	1d1a      	adds	r2, r3, #4
 80038ca:	633a      	str	r2, [r7, #48]	; 0x30
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	495e      	ldr	r1, [pc, #376]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 80038d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038d8:	405a      	eors	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	495b      	ldr	r1, [pc, #364]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 80038e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038e6:	405a      	eors	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	0c1b      	lsrs	r3, r3, #16
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	4959      	ldr	r1, [pc, #356]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 80038f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038f4:	405a      	eors	r2, r3
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	0e1b      	lsrs	r3, r3, #24
 80038fa:	4957      	ldr	r1, [pc, #348]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 80038fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003900:	4053      	eors	r3, r2
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	1d1a      	adds	r2, r3, #4
 8003908:	633a      	str	r2, [r7, #48]	; 0x30
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	494e      	ldr	r1, [pc, #312]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 8003912:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003916:	405a      	eors	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	b2db      	uxtb	r3, r3
 800391e:	494c      	ldr	r1, [pc, #304]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003920:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003924:	405a      	eors	r2, r3
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	b2db      	uxtb	r3, r3
 800392c:	4949      	ldr	r1, [pc, #292]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 800392e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003932:	405a      	eors	r2, r3
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	0e1b      	lsrs	r3, r3, #24
 8003938:	4947      	ldr	r1, [pc, #284]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 800393a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800393e:	4053      	eors	r3, r2
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	1d1a      	adds	r2, r3, #4
 8003946:	633a      	str	r2, [r7, #48]	; 0x30
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	493f      	ldr	r1, [pc, #252]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 8003950:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003954:	405a      	eors	r2, r3
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	b2db      	uxtb	r3, r3
 800395c:	493c      	ldr	r1, [pc, #240]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 800395e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003962:	405a      	eors	r2, r3
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	b2db      	uxtb	r3, r3
 800396a:	493a      	ldr	r1, [pc, #232]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 800396c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003970:	405a      	eors	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	0e1b      	lsrs	r3, r3, #24
 8003976:	4938      	ldr	r1, [pc, #224]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800397c:	4053      	eors	r3, r2
 800397e:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	3b01      	subs	r3, #1
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	2b00      	cmp	r3, #0
 800398a:	f73f af01 	bgt.w	8003790 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	1d1a      	adds	r2, r3, #4
 8003992:	633a      	str	r2, [r7, #48]	; 0x30
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	b2db      	uxtb	r3, r3
 800399a:	492c      	ldr	r1, [pc, #176]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 800399c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039a0:	405a      	eors	r2, r3
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4929      	ldr	r1, [pc, #164]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 80039aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039ae:	405a      	eors	r2, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4927      	ldr	r1, [pc, #156]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 80039b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039bc:	405a      	eors	r2, r3
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	0e1b      	lsrs	r3, r3, #24
 80039c2:	4925      	ldr	r1, [pc, #148]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 80039c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039c8:	4053      	eors	r3, r2
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	633a      	str	r2, [r7, #48]	; 0x30
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	491c      	ldr	r1, [pc, #112]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 80039da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039de:	405a      	eors	r2, r3
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	491a      	ldr	r1, [pc, #104]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 80039e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039ec:	405a      	eors	r2, r3
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4917      	ldr	r1, [pc, #92]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 80039f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039fa:	405a      	eors	r2, r3
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	0e1b      	lsrs	r3, r3, #24
 8003a00:	4915      	ldr	r1, [pc, #84]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003a02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a06:	4053      	eors	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	1d1a      	adds	r2, r3, #4
 8003a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	490d      	ldr	r1, [pc, #52]	; (8003a4c <mbedtls_internal_aes_encrypt+0x3b0>)
 8003a18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a1c:	405a      	eors	r2, r3
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	490a      	ldr	r1, [pc, #40]	; (8003a50 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003a26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a2a:	405a      	eors	r2, r3
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a38:	405a      	eors	r2, r3
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	0e1b      	lsrs	r3, r3, #24
 8003a3e:	4906      	ldr	r1, [pc, #24]	; (8003a58 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003a40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a44:	4053      	eors	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	e007      	b.n	8003a5c <mbedtls_internal_aes_encrypt+0x3c0>
 8003a4c:	08012a0c 	.word	0x08012a0c
 8003a50:	08012e0c 	.word	0x08012e0c
 8003a54:	0801320c 	.word	0x0801320c
 8003a58:	0801360c 	.word	0x0801360c
 8003a5c:	1d1a      	adds	r2, r3, #4
 8003a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4979      	ldr	r1, [pc, #484]	; (8003c4c <mbedtls_internal_aes_encrypt+0x5b0>)
 8003a68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a6c:	405a      	eors	r2, r3
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	4976      	ldr	r1, [pc, #472]	; (8003c50 <mbedtls_internal_aes_encrypt+0x5b4>)
 8003a76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a7a:	405a      	eors	r2, r3
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4974      	ldr	r1, [pc, #464]	; (8003c54 <mbedtls_internal_aes_encrypt+0x5b8>)
 8003a84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a88:	405a      	eors	r2, r3
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	0e1b      	lsrs	r3, r3, #24
 8003a8e:	4972      	ldr	r1, [pc, #456]	; (8003c58 <mbedtls_internal_aes_encrypt+0x5bc>)
 8003a90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a94:	4053      	eors	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	1d1a      	adds	r2, r3, #4
 8003a9c:	633a      	str	r2, [r7, #48]	; 0x30
 8003a9e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	496d      	ldr	r1, [pc, #436]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003aa6:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8003aa8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	496a      	ldr	r1, [pc, #424]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003ab6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	0c1b      	lsrs	r3, r3, #16
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	4967      	ldr	r1, [pc, #412]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ac4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	0e1b      	lsrs	r3, r3, #24
 8003aca:	4964      	ldr	r1, [pc, #400]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003ad0:	4053      	eors	r3, r2
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	1d1a      	adds	r2, r3, #4
 8003ad8:	633a      	str	r2, [r7, #48]	; 0x30
 8003ada:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	495e      	ldr	r1, [pc, #376]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003ae2:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8003ae4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	495b      	ldr	r1, [pc, #364]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003af2:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4958      	ldr	r1, [pc, #352]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b00:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	4955      	ldr	r1, [pc, #340]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8003b0c:	4053      	eors	r3, r2
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	633a      	str	r2, [r7, #48]	; 0x30
 8003b16:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	494f      	ldr	r1, [pc, #316]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b1e:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8003b20:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	494c      	ldr	r1, [pc, #304]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003b2e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	4949      	ldr	r1, [pc, #292]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b3c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	0e1b      	lsrs	r3, r3, #24
 8003b42:	4946      	ldr	r1, [pc, #280]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b44:	5ccb      	ldrb	r3, [r1, r3]
 8003b46:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8003b48:	4053      	eors	r3, r2
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	1d1a      	adds	r2, r3, #4
 8003b50:	633a      	str	r2, [r7, #48]	; 0x30
 8003b52:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	4940      	ldr	r1, [pc, #256]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b5a:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8003b5c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	493d      	ldr	r1, [pc, #244]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003b6a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	493a      	ldr	r1, [pc, #232]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b78:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	0e1b      	lsrs	r3, r3, #24
 8003b7e:	4937      	ldr	r1, [pc, #220]	; (8003c5c <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8003b84:	4053      	eors	r3, r2
 8003b86:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	0a1a      	lsrs	r2, r3, #8
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3301      	adds	r3, #1
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	0c1a      	lsrs	r2, r3, #16
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	0e1a      	lsrs	r2, r3, #24
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3303      	adds	r3, #3
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	0a1a      	lsrs	r2, r3, #8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3305      	adds	r3, #5
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	0c1a      	lsrs	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3306      	adds	r3, #6
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	0e1a      	lsrs	r2, r3, #24
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3307      	adds	r3, #7
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3308      	adds	r3, #8
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	0a1a      	lsrs	r2, r3, #8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3309      	adds	r3, #9
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	0c1a      	lsrs	r2, r3, #16
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	330a      	adds	r3, #10
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	0e1a      	lsrs	r2, r3, #24
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	330b      	adds	r3, #11
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	330c      	adds	r3, #12
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	0a1a      	lsrs	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	330d      	adds	r3, #13
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	0c1a      	lsrs	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	330e      	adds	r3, #14
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	0e1a      	lsrs	r2, r3, #24
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	330f      	adds	r3, #15
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	373c      	adds	r7, #60	; 0x3c
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	08012a0c 	.word	0x08012a0c
 8003c50:	08012e0c 	.word	0x08012e0c
 8003c54:	0801320c 	.word	0x0801320c
 8003c58:	0801360c 	.word	0x0801360c
 8003c5c:	0801290c 	.word	0x0801290c

08003c60 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b08f      	sub	sp, #60	; 0x3c
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3302      	adds	r3, #2
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	3303      	adds	r3, #3
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	061b      	lsls	r3, r3, #24
 8003c94:	4313      	orrs	r3, r2
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	633a      	str	r2, [r7, #48]	; 0x30
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca2:	4053      	eors	r3, r2
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3305      	adds	r3, #5
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3306      	adds	r3, #6
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3307      	adds	r3, #7
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	1d1a      	adds	r2, r3, #4
 8003cd2:	633a      	str	r2, [r7, #48]	; 0x30
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd8:	4053      	eors	r3, r2
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3308      	adds	r3, #8
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3309      	adds	r3, #9
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	330a      	adds	r3, #10
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	330b      	adds	r3, #11
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	4313      	orrs	r3, r2
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	633a      	str	r2, [r7, #48]	; 0x30
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	4053      	eors	r3, r2
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	330c      	adds	r3, #12
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	330d      	adds	r3, #13
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	330e      	adds	r3, #14
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	330f      	adds	r3, #15
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	4313      	orrs	r3, r2
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	1d1a      	adds	r2, r3, #4
 8003d3e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6a3a      	ldr	r2, [r7, #32]
 8003d44:	4053      	eors	r3, r2
 8003d46:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	105b      	asrs	r3, r3, #1
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
 8003d52:	e0fa      	b.n	8003f4a <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	1d1a      	adds	r2, r3, #4
 8003d58:	633a      	str	r2, [r7, #48]	; 0x30
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	49ab      	ldr	r1, [pc, #684]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d66:	405a      	eors	r2, r3
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	49a9      	ldr	r1, [pc, #676]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d74:	405a      	eors	r2, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	49a6      	ldr	r1, [pc, #664]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d82:	405a      	eors	r2, r3
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	0e1b      	lsrs	r3, r3, #24
 8003d88:	49a4      	ldr	r1, [pc, #656]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d8e:	4053      	eors	r3, r2
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	633a      	str	r2, [r7, #48]	; 0x30
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	499c      	ldr	r1, [pc, #624]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003da4:	405a      	eors	r2, r3
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	4999      	ldr	r1, [pc, #612]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003db2:	405a      	eors	r2, r3
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4997      	ldr	r1, [pc, #604]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003dbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dc0:	405a      	eors	r2, r3
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	0e1b      	lsrs	r3, r3, #24
 8003dc6:	4995      	ldr	r1, [pc, #596]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003dc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dcc:	4053      	eors	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	1d1a      	adds	r2, r3, #4
 8003dd4:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	498c      	ldr	r1, [pc, #560]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003dde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003de2:	405a      	eors	r2, r3
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	498a      	ldr	r1, [pc, #552]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003dec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003df0:	405a      	eors	r2, r3
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4987      	ldr	r1, [pc, #540]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003dfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dfe:	405a      	eors	r2, r3
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	0e1b      	lsrs	r3, r3, #24
 8003e04:	4985      	ldr	r1, [pc, #532]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e0a:	4053      	eors	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	1d1a      	adds	r2, r3, #4
 8003e12:	633a      	str	r2, [r7, #48]	; 0x30
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	497d      	ldr	r1, [pc, #500]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e20:	405a      	eors	r2, r3
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	497a      	ldr	r1, [pc, #488]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e2e:	405a      	eors	r2, r3
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4978      	ldr	r1, [pc, #480]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e3c:	405a      	eors	r2, r3
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	0e1b      	lsrs	r3, r3, #24
 8003e42:	4976      	ldr	r1, [pc, #472]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e48:	4053      	eors	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	633a      	str	r2, [r7, #48]	; 0x30
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	496d      	ldr	r1, [pc, #436]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e5e:	405a      	eors	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	496b      	ldr	r1, [pc, #428]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e6c:	405a      	eors	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4968      	ldr	r1, [pc, #416]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e7a:	405a      	eors	r2, r3
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	0e1b      	lsrs	r3, r3, #24
 8003e80:	4966      	ldr	r1, [pc, #408]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e86:	4053      	eors	r3, r2
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	1d1a      	adds	r2, r3, #4
 8003e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	495e      	ldr	r1, [pc, #376]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e9c:	405a      	eors	r2, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	495b      	ldr	r1, [pc, #364]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ea6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eaa:	405a      	eors	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	0c1b      	lsrs	r3, r3, #16
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4959      	ldr	r1, [pc, #356]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003eb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eb8:	405a      	eors	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	0e1b      	lsrs	r3, r3, #24
 8003ebe:	4957      	ldr	r1, [pc, #348]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003ec0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ec4:	4053      	eors	r3, r2
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	1d1a      	adds	r2, r3, #4
 8003ecc:	633a      	str	r2, [r7, #48]	; 0x30
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	494e      	ldr	r1, [pc, #312]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eda:	405a      	eors	r2, r3
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	494c      	ldr	r1, [pc, #304]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ee8:	405a      	eors	r2, r3
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4949      	ldr	r1, [pc, #292]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003ef2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ef6:	405a      	eors	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	0e1b      	lsrs	r3, r3, #24
 8003efc:	4947      	ldr	r1, [pc, #284]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003efe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f02:	4053      	eors	r3, r2
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	1d1a      	adds	r2, r3, #4
 8003f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	493f      	ldr	r1, [pc, #252]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003f14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f18:	405a      	eors	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	493c      	ldr	r1, [pc, #240]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f26:	405a      	eors	r2, r3
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	493a      	ldr	r1, [pc, #232]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f34:	405a      	eors	r2, r3
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	0e1b      	lsrs	r3, r3, #24
 8003f3a:	4938      	ldr	r1, [pc, #224]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f40:	4053      	eors	r3, r2
 8003f42:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f46:	3b01      	subs	r3, #1
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f73f af01 	bgt.w	8003d54 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	1d1a      	adds	r2, r3, #4
 8003f56:	633a      	str	r2, [r7, #48]	; 0x30
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	492c      	ldr	r1, [pc, #176]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003f60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f64:	405a      	eors	r2, r3
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4929      	ldr	r1, [pc, #164]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f72:	405a      	eors	r2, r3
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4927      	ldr	r1, [pc, #156]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f80:	405a      	eors	r2, r3
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	0e1b      	lsrs	r3, r3, #24
 8003f86:	4925      	ldr	r1, [pc, #148]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f8c:	4053      	eors	r3, r2
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	1d1a      	adds	r2, r3, #4
 8003f94:	633a      	str	r2, [r7, #48]	; 0x30
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	491c      	ldr	r1, [pc, #112]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003f9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fa2:	405a      	eors	r2, r3
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	491a      	ldr	r1, [pc, #104]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003fac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fb0:	405a      	eors	r2, r3
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4917      	ldr	r1, [pc, #92]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003fba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fbe:	405a      	eors	r2, r3
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	0e1b      	lsrs	r3, r3, #24
 8003fc4:	4915      	ldr	r1, [pc, #84]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8003fc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fca:	4053      	eors	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	633a      	str	r2, [r7, #48]	; 0x30
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	490d      	ldr	r1, [pc, #52]	; (8004010 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003fdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fe0:	405a      	eors	r2, r3
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	490a      	ldr	r1, [pc, #40]	; (8004014 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003fea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fee:	405a      	eors	r2, r3
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	4908      	ldr	r1, [pc, #32]	; (8004018 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003ff8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ffc:	405a      	eors	r2, r3
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	0e1b      	lsrs	r3, r3, #24
 8004002:	4906      	ldr	r1, [pc, #24]	; (800401c <mbedtls_internal_aes_decrypt+0x3bc>)
 8004004:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004008:	4053      	eors	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	e007      	b.n	8004020 <mbedtls_internal_aes_decrypt+0x3c0>
 8004010:	08013b0c 	.word	0x08013b0c
 8004014:	08013f0c 	.word	0x08013f0c
 8004018:	0801430c 	.word	0x0801430c
 800401c:	0801470c 	.word	0x0801470c
 8004020:	1d1a      	adds	r2, r3, #4
 8004022:	633a      	str	r2, [r7, #48]	; 0x30
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4979      	ldr	r1, [pc, #484]	; (8004210 <mbedtls_internal_aes_decrypt+0x5b0>)
 800402c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004030:	405a      	eors	r2, r3
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	b2db      	uxtb	r3, r3
 8004038:	4976      	ldr	r1, [pc, #472]	; (8004214 <mbedtls_internal_aes_decrypt+0x5b4>)
 800403a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800403e:	405a      	eors	r2, r3
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	b2db      	uxtb	r3, r3
 8004046:	4974      	ldr	r1, [pc, #464]	; (8004218 <mbedtls_internal_aes_decrypt+0x5b8>)
 8004048:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800404c:	405a      	eors	r2, r3
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	0e1b      	lsrs	r3, r3, #24
 8004052:	4972      	ldr	r1, [pc, #456]	; (800421c <mbedtls_internal_aes_decrypt+0x5bc>)
 8004054:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004058:	4053      	eors	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	633a      	str	r2, [r7, #48]	; 0x30
 8004062:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	496d      	ldr	r1, [pc, #436]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 800406a:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 800406c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	b2db      	uxtb	r3, r3
 8004074:	496a      	ldr	r1, [pc, #424]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800407a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4967      	ldr	r1, [pc, #412]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004084:	5ccb      	ldrb	r3, [r1, r3]
 8004086:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004088:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	0e1b      	lsrs	r3, r3, #24
 800408e:	4964      	ldr	r1, [pc, #400]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004090:	5ccb      	ldrb	r3, [r1, r3]
 8004092:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8004094:	4053      	eors	r3, r2
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	1d1a      	adds	r2, r3, #4
 800409c:	633a      	str	r2, [r7, #48]	; 0x30
 800409e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	495e      	ldr	r1, [pc, #376]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040a6:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 80040a8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	495b      	ldr	r1, [pc, #364]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 80040b6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	4958      	ldr	r1, [pc, #352]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040c0:	5ccb      	ldrb	r3, [r1, r3]
 80040c2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80040c4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	0e1b      	lsrs	r3, r3, #24
 80040ca:	4955      	ldr	r1, [pc, #340]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 80040d0:	4053      	eors	r3, r2
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	1d1a      	adds	r2, r3, #4
 80040d8:	633a      	str	r2, [r7, #48]	; 0x30
 80040da:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	494f      	ldr	r1, [pc, #316]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040e2:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 80040e4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	494c      	ldr	r1, [pc, #304]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 80040f2:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	0c1b      	lsrs	r3, r3, #16
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4949      	ldr	r1, [pc, #292]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040fc:	5ccb      	ldrb	r3, [r1, r3]
 80040fe:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8004100:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	0e1b      	lsrs	r3, r3, #24
 8004106:	4946      	ldr	r1, [pc, #280]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800410c:	4053      	eors	r3, r2
 800410e:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	633a      	str	r2, [r7, #48]	; 0x30
 8004116:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	4940      	ldr	r1, [pc, #256]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 800411e:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8004120:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	b2db      	uxtb	r3, r3
 8004128:	493d      	ldr	r1, [pc, #244]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800412e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	b2db      	uxtb	r3, r3
 8004136:	493a      	ldr	r1, [pc, #232]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004138:	5ccb      	ldrb	r3, [r1, r3]
 800413a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800413c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	0e1b      	lsrs	r3, r3, #24
 8004142:	4937      	ldr	r1, [pc, #220]	; (8004220 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004144:	5ccb      	ldrb	r3, [r1, r3]
 8004146:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8004148:	4053      	eors	r3, r2
 800414a:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	b2da      	uxtb	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	0a1a      	lsrs	r2, r3, #8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3301      	adds	r3, #1
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	0c1a      	lsrs	r2, r3, #16
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3302      	adds	r3, #2
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	0e1a      	lsrs	r2, r3, #24
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3303      	adds	r3, #3
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	0a1a      	lsrs	r2, r3, #8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3305      	adds	r3, #5
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	0c1a      	lsrs	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3306      	adds	r3, #6
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	0e1a      	lsrs	r2, r3, #24
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3307      	adds	r3, #7
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3308      	adds	r3, #8
 80041aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	0a1a      	lsrs	r2, r3, #8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3309      	adds	r3, #9
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	0c1a      	lsrs	r2, r3, #16
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	330a      	adds	r3, #10
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	0e1a      	lsrs	r2, r3, #24
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	330b      	adds	r3, #11
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	330c      	adds	r3, #12
 80041d8:	6a3a      	ldr	r2, [r7, #32]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	0a1a      	lsrs	r2, r3, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	330d      	adds	r3, #13
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	0c1a      	lsrs	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	330e      	adds	r3, #14
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	0e1a      	lsrs	r2, r3, #24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	330f      	adds	r3, #15
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	373c      	adds	r7, #60	; 0x3c
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	08013b0c 	.word	0x08013b0c
 8004214:	08013f0c 	.word	0x08013f0c
 8004218:	0801430c 	.word	0x0801430c
 800421c:	0801470c 	.word	0x0801470c
 8004220:	08013a0c 	.word	0x08013a0c

08004224 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d106      	bne.n	8004246 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fa2d 	bl	800369c <mbedtls_internal_aes_encrypt>
 8004242:	4603      	mov	r3, r0
 8004244:	e005      	b.n	8004252 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fd08 	bl	8003c60 <mbedtls_internal_aes_decrypt>
 8004250:	4603      	mov	r3, r0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
    if( ( end - *p ) < 1 )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	dc02      	bgt.n	800427a <mbedtls_asn1_get_len+0x1e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8004274:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8004278:	e0ac      	b.n	80043d4 <mbedtls_asn1_get_len+0x178>

    if( ( **p & 0x80 ) == 0 )
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	b25b      	sxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	db09      	blt.n	800429a <mbedtls_asn1_get_len+0x3e>
        *len = *(*p)++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	1c59      	adds	r1, r3, #1
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	6011      	str	r1, [r2, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e090      	b.n	80043bc <mbedtls_asn1_get_len+0x160>
    else
    {
        switch( **p & 0x7F )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a4:	3b01      	subs	r3, #1
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	f200 8085 	bhi.w	80043b6 <mbedtls_asn1_get_len+0x15a>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <mbedtls_asn1_get_len+0x58>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042c5 	.word	0x080042c5
 80042b8:	080042f1 	.word	0x080042f1
 80042bc:	08004327 	.word	0x08004327
 80042c0:	08004369 	.word	0x08004369
        {
        case 1:
            if( ( end - *p ) < 2 )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	dc02      	bgt.n	80042d6 <mbedtls_asn1_get_len+0x7a>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80042d0:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80042d4:	e07e      	b.n	80043d4 <mbedtls_asn1_get_len+0x178>

            *len = (*p)[1];
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
            (*p) += 2;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	1c9a      	adds	r2, r3, #2
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	601a      	str	r2, [r3, #0]
            break;
 80042ee:	e065      	b.n	80043bc <mbedtls_asn1_get_len+0x160>

        case 2:
            if( ( end - *p ) < 3 )
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	dc02      	bgt.n	8004302 <mbedtls_asn1_get_len+0xa6>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80042fc:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8004300:	e068      	b.n	80043d4 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3301      	adds	r3, #1
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	3202      	adds	r2, #2
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
            (*p) += 3;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1cda      	adds	r2, r3, #3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]
            break;
 8004324:	e04a      	b.n	80043bc <mbedtls_asn1_get_len+0x160>

        case 3:
            if( ( end - *p ) < 4 )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b03      	cmp	r3, #3
 8004330:	dc02      	bgt.n	8004338 <mbedtls_asn1_get_len+0xdc>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8004332:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8004336:	e04d      	b.n	80043d4 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 16 ) |
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	041a      	lsls	r2, r3, #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3302      	adds	r3, #2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 800434c:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	3203      	adds	r2, #3
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 16 ) |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	601a      	str	r2, [r3, #0]
            (*p) += 4;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	1d1a      	adds	r2, r3, #4
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]
            break;
 8004366:	e029      	b.n	80043bc <mbedtls_asn1_get_len+0x160>

        case 4:
            if( ( end - *p ) < 5 )
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b04      	cmp	r3, #4
 8004372:	dc02      	bgt.n	800437a <mbedtls_asn1_get_len+0x11e>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8004374:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 8004378:	e02c      	b.n	80043d4 <mbedtls_asn1_get_len+0x178>

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3301      	adds	r3, #1
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	061a      	lsls	r2, r3, #24
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3302      	adds	r3, #2
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3303      	adds	r3, #3
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800439a:	4313      	orrs	r3, r2
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	3204      	adds	r2, #4
 80043a2:	7812      	ldrb	r2, [r2, #0]
 80043a4:	431a      	orrs	r2, r3
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	601a      	str	r2, [r3, #0]
            (*p) += 5;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	1d5a      	adds	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	601a      	str	r2, [r3, #0]
            break;
 80043b4:	e002      	b.n	80043bc <mbedtls_asn1_get_len+0x160>

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80043b6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80043ba:	e00b      	b.n	80043d4 <mbedtls_asn1_get_len+0x178>
        }
    }

    if( *len > (size_t) ( end - *p ) )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	1a8a      	subs	r2, r1, r2
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d902      	bls.n	80043d2 <mbedtls_asn1_get_len+0x176>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80043cc:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80043d0:	e000      	b.n	80043d4 <mbedtls_asn1_get_len+0x178>

    return( 0 );
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
    if( ( end - *p ) < 1 )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	dc02      	bgt.n	8004400 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80043fa:	f06f 035f 	mvn.w	r3, #95	; 0x5f
 80043fe:	e014      	b.n	800442a <mbedtls_asn1_get_tag+0x4a>

    if( **p != tag )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4293      	cmp	r3, r2
 800440c:	d002      	beq.n	8004414 <mbedtls_asn1_get_tag+0x34>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 800440e:	f06f 0361 	mvn.w	r3, #97	; 0x61
 8004412:	e00a      	b.n	800442a <mbedtls_asn1_get_tag+0x4a>

    (*p)++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff ff1a 	bl	800425c <mbedtls_asn1_get_len>
 8004428:	4603      	mov	r3, r0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800443e:	f107 0210 	add.w	r2, r7, #16
 8004442:	2302      	movs	r3, #2
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff ffca 	bl	80043e0 <mbedtls_asn1_get_tag>
 800444c:	6178      	str	r0, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <mbedtls_asn1_get_mpi+0x26>
        return( ret );
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	e00e      	b.n	8004476 <mbedtls_asn1_get_mpi+0x44>

    ret = mbedtls_mpi_read_binary( X, *p, len );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fe82 	bl	800516a <mbedtls_mpi_read_binary>
 8004466:	6178      	str	r0, [r7, #20]

    *p += len;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	441a      	add	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]

    return( ret );
 8004474:	697b      	ldr	r3, [r7, #20]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
    if( len < 0x80 )
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b7f      	cmp	r3, #127	; 0x7f
 800448e:	d814      	bhi.n	80044ba <mbedtls_asn1_write_len+0x3c>
    {
        if( *p - start < 1 )
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	dc02      	bgt.n	80044a2 <mbedtls_asn1_write_len+0x24>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800449c:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 80044a0:	e0cf      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = (unsigned char) len;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	1e5a      	subs	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]
        return( 1 );
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0c3      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>
    }

    if( len <= 0xFF )
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2bff      	cmp	r3, #255	; 0xff
 80044be:	d81d      	bhi.n	80044fc <mbedtls_asn1_write_len+0x7e>
    {
        if( *p - start < 2 )
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	dc02      	bgt.n	80044d2 <mbedtls_asn1_write_len+0x54>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80044cc:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 80044d0:	e0b7      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = (unsigned char) len;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	1e5a      	subs	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x81;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	1e5a      	subs	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2281      	movs	r2, #129	; 0x81
 80044f6:	701a      	strb	r2, [r3, #0]
        return( 2 );
 80044f8:	2302      	movs	r3, #2
 80044fa:	e0a2      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>
    }

    if( len <= 0xFFFF )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d228      	bcs.n	8004556 <mbedtls_asn1_write_len+0xd8>
    {
        if( *p - start < 3 )
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	dc02      	bgt.n	8004516 <mbedtls_asn1_write_len+0x98>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8004510:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8004514:	e095      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = ( len       ) & 0xFF;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0a19      	lsrs	r1, r3, #8
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	b2ca      	uxtb	r2, r1
 800453e:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x82;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	1e5a      	subs	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2282      	movs	r2, #130	; 0x82
 8004550:	701a      	strb	r2, [r3, #0]
        return( 3 );
 8004552:	2303      	movs	r3, #3
 8004554:	e075      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>
    }

    if( len <= 0xFFFFFF )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800455c:	d233      	bcs.n	80045c6 <mbedtls_asn1_write_len+0x148>
    {
        if( *p - start < 4 )
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b03      	cmp	r3, #3
 8004568:	dc02      	bgt.n	8004570 <mbedtls_asn1_write_len+0xf2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800456a:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 800456e:	e068      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = ( len       ) & 0xFF;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	1e5a      	subs	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0a19      	lsrs	r1, r3, #8
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1e5a      	subs	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b2ca      	uxtb	r2, r1
 8004598:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0c19      	lsrs	r1, r3, #16
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	1e5a      	subs	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	b2ca      	uxtb	r2, r1
 80045ae:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x83;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1e5a      	subs	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2283      	movs	r2, #131	; 0x83
 80045c0:	701a      	strb	r2, [r3, #0]
        return( 4 );
 80045c2:	2304      	movs	r3, #4
 80045c4:	e03d      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	dc02      	bgt.n	80045d8 <mbedtls_asn1_write_len+0x15a>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80045d2:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 80045d6:	e034      	b.n	8004642 <mbedtls_asn1_write_len+0x1c4>

        *--(*p) = ( len       ) & 0xFF;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >>  8 ) & 0xFF;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0a19      	lsrs	r1, r3, #8
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	b2ca      	uxtb	r2, r1
 8004600:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 16 ) & 0xFF;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0c19      	lsrs	r1, r3, #16
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b2ca      	uxtb	r2, r1
 8004616:	701a      	strb	r2, [r3, #0]
        *--(*p) = ( len >> 24 ) & 0xFF;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	0e19      	lsrs	r1, r3, #24
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	b2ca      	uxtb	r2, r1
 800462c:	701a      	strb	r2, [r3, #0]
        *--(*p) = 0x84;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1e5a      	subs	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2284      	movs	r2, #132	; 0x84
 800463e:	701a      	strb	r2, [r3, #0]
        return( 5 );
 8004640:	2305      	movs	r3, #5
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
    if( *p - start < 1 )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	dc02      	bgt.n	800466e <mbedtls_asn1_write_tag+0x20>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8004668:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 800466c:	e009      	b.n	8004682 <mbedtls_asn1_write_tag+0x34>

    *--(*p) = tag;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	79fa      	ldrb	r2, [r7, #7]
 800467e:	701a      	strb	r2, [r3, #0]

    return( 1 );
 8004680:	2301      	movs	r3, #1
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
    int ret;
    size_t len = 0;
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fbeb 	bl	8004e7a <mbedtls_mpi_size>
 80046a4:	6138      	str	r0, [r7, #16]

    if( *p < start || (size_t)( *p - start ) < len )
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d807      	bhi.n	80046c0 <mbedtls_asn1_write_mpi+0x32>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4293      	cmp	r3, r2
 80046be:	d902      	bls.n	80046c6 <mbedtls_asn1_write_mpi+0x38>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80046c0:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 80046c4:	e053      	b.n	800476e <mbedtls_asn1_write_mpi+0xe0>

    (*p) -= len;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	425b      	negs	r3, r3
 80046ce:	441a      	add	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fd95 	bl	800520c <mbedtls_mpi_write_binary>
 80046e2:	6178      	str	r0, [r7, #20]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d13f      	bne.n	800476a <mbedtls_asn1_write_mpi+0xdc>

    // DER format assumes 2s complement for numbers, so the leftmost bit
    // should be 0 for positive numbers and 1 for negative numbers.
    //
    if( X->s ==1 && **p & 0x80 )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d11a      	bne.n	8004728 <mbedtls_asn1_write_mpi+0x9a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	b25b      	sxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	da14      	bge.n	8004728 <mbedtls_asn1_write_mpi+0x9a>
    {
        if( *p - start < 1 )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	dc02      	bgt.n	8004710 <mbedtls_asn1_write_mpi+0x82>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800470a:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 800470e:	e02e      	b.n	800476e <mbedtls_asn1_write_mpi+0xe0>

        *--(*p) = 0x00;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	1e5a      	subs	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
        len += 1;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3301      	adds	r3, #1
 8004726:	613b      	str	r3, [r7, #16]
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff fea6 	bl	800447e <mbedtls_asn1_write_len>
 8004732:	6178      	str	r0, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	da01      	bge.n	800473e <mbedtls_asn1_write_mpi+0xb0>
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e017      	b.n	800476e <mbedtls_asn1_write_mpi+0xe0>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 8004746:	2202      	movs	r2, #2
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff ff7f 	bl	800464e <mbedtls_asn1_write_tag>
 8004750:	6178      	str	r0, [r7, #20]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	da01      	bge.n	800475c <mbedtls_asn1_write_mpi+0xce>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	e008      	b.n	800476e <mbedtls_asn1_write_mpi+0xe0>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4413      	add	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

    ret = (int) len;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	e000      	b.n	800476c <mbedtls_asn1_write_mpi+0xde>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800476a:	bf00      	nop

cleanup:
    return( ret );
 800476c:	697b      	ldr	r3, [r7, #20]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <mbedtls_mpi_zeroize>:
#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
    mbedtls_platform_zeroize( v, ciL * n );
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f00a f92e 	bl	800e9e8 <mbedtls_platform_zeroize>
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    X->n = 0;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00c      	beq.n	80047ea <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7ff ffcb 	bl	8004776 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f00d f82d 	bl	8011844 <free>
    }

    X->s = 1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
    X->n = 0;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	e000      	b.n	8004800 <mbedtls_mpi_free+0x46>
        return;
 80047fe:	bf00      	nop
}
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f242 7210 	movw	r2, #10000	; 0x2710
 8004816:	4293      	cmp	r3, r2
 8004818:	d902      	bls.n	8004820 <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800481a:	f06f 030f 	mvn.w	r3, #15
 800481e:	e031      	b.n	8004884 <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d92b      	bls.n	8004882 <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800482a:	2104      	movs	r1, #4
 800482c:	6838      	ldr	r0, [r7, #0]
 800482e:	f00c ffd7 	bl	80117e0 <calloc>
 8004832:	4603      	mov	r3, r0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800483c:	f06f 030f 	mvn.w	r3, #15
 8004840:	e020      	b.n	8004884 <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d015      	beq.n	8004876 <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6899      	ldr	r1, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	461a      	mov	r2, r3
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f00c fffc 	bl	8011854 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f7ff ff85 	bl	8004776 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f00c ffe7 	bl	8011844 <free>
        }

        X->n = nblimbs;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	605a      	str	r2, [r3, #4]
        X->p = p;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <mbedtls_mpi_shrink>:
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f242 7210 	movw	r2, #10000	; 0x2710
 800489c:	4293      	cmp	r3, r2
 800489e:	d902      	bls.n	80048a6 <mbedtls_mpi_shrink+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80048a0:	f06f 030f 	mvn.w	r3, #15
 80048a4:	e054      	b.n	8004950 <mbedtls_mpi_shrink+0xc4>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d305      	bcc.n	80048bc <mbedtls_mpi_shrink+0x30>
        return( mbedtls_mpi_grow( X, nblimbs ) );
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ffa7 	bl	8004806 <mbedtls_mpi_grow>
 80048b8:	4603      	mov	r3, r0
 80048ba:	e049      	b.n	8004950 <mbedtls_mpi_shrink+0xc4>

    for( i = X->n - 1; i > 0; i-- )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e00a      	b.n	80048dc <mbedtls_mpi_shrink+0x50>
        if( X->p[i] != 0 )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <mbedtls_mpi_shrink+0x58>
    for( i = X->n - 1; i > 0; i-- )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b01      	subs	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f1      	bne.n	80048c6 <mbedtls_mpi_shrink+0x3a>
 80048e2:	e000      	b.n	80048e6 <mbedtls_mpi_shrink+0x5a>
            break;
 80048e4:	bf00      	nop
    i++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]

    if( i < nblimbs )
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d201      	bcs.n	80048f8 <mbedtls_mpi_shrink+0x6c>
        i = nblimbs;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 80048f8:	2104      	movs	r1, #4
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f00c ff70 	bl	80117e0 <calloc>
 8004900:	4603      	mov	r3, r0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <mbedtls_mpi_shrink+0x84>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800490a:	f06f 030f 	mvn.w	r3, #15
 800490e:	e01f      	b.n	8004950 <mbedtls_mpi_shrink+0xc4>

    if( X->p != NULL )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d014      	beq.n	8004942 <mbedtls_mpi_shrink+0xb6>
    {
        memcpy( p, X->p, i * ciL );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	461a      	mov	r2, r3
 8004922:	68b8      	ldr	r0, [r7, #8]
 8004924:	f00c ff96 	bl	8011854 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7ff ff1f 	bl	8004776 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4618      	mov	r0, r3
 800493e:	f00c ff81 	bl	8011844 <free>
    }

    X->n = i;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	605a      	str	r2, [r3, #4]
    X->p = p;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	609a      	str	r2, [r3, #8]

    return( 0 );
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
    int ret = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d101      	bne.n	8004972 <mbedtls_mpi_copy+0x1a>
        return( 0 );
 800496e:	2300      	movs	r3, #0
 8004970:	e04a      	b.n	8004a08 <mbedtls_mpi_copy+0xb0>

    if( Y->p == NULL )
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <mbedtls_mpi_copy+0x2c>
    {
        mbedtls_mpi_free( X );
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff ff1d 	bl	80047ba <mbedtls_mpi_free>
        return( 0 );
 8004980:	2300      	movs	r3, #0
 8004982:	e041      	b.n	8004a08 <mbedtls_mpi_copy+0xb0>
    }

    for( i = Y->n - 1; i > 0; i-- )
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	3b01      	subs	r3, #1
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	e00a      	b.n	80049a4 <mbedtls_mpi_copy+0x4c>
        if( Y->p[i] != 0 )
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <mbedtls_mpi_copy+0x54>
    for( i = Y->n - 1; i > 0; i-- )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f1      	bne.n	800498e <mbedtls_mpi_copy+0x36>
 80049aa:	e000      	b.n	80049ae <mbedtls_mpi_copy+0x56>
            break;
 80049ac:	bf00      	nop
    i++;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	3301      	adds	r3, #1
 80049b2:	60bb      	str	r3, [r7, #8]

    X->s = Y->s;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	601a      	str	r2, [r3, #0]

    if( X->n < i )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d908      	bls.n	80049d8 <mbedtls_mpi_copy+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ff1c 	bl	8004806 <mbedtls_mpi_grow>
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00e      	beq.n	80049f4 <mbedtls_mpi_copy+0x9c>
 80049d6:	e016      	b.n	8004a06 <mbedtls_mpi_copy+0xae>
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	18d0      	adds	r0, r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	461a      	mov	r2, r3
 80049ee:	2100      	movs	r1, #0
 80049f0:	f00c ff3e 	bl	8011870 <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6898      	ldr	r0, [r3, #8]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6899      	ldr	r1, [r3, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	461a      	mov	r2, r3
 8004a02:	f00c ff27 	bl	8011854 <memcpy>

cleanup:

    return( ret );
 8004a06:	68fb      	ldr	r3, [r7, #12]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	425b      	negs	r3, r3
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4619      	mov	r1, r3
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff fee4 	bl	8004806 <mbedtls_mpi_grow>
 8004a3e:	6138      	str	r0, [r7, #16]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d150      	bne.n	8004ae8 <mbedtls_mpi_safe_cond_assign+0xd8>

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	79fa      	ldrb	r2, [r7, #7]
 8004a4c:	f1c2 0201 	rsb	r2, r2, #1
 8004a50:	fb03 f202 	mul.w	r2, r3, r2
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	79f9      	ldrb	r1, [r7, #7]
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	441a      	add	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

    for( i = 0; i < Y->n; i++ )
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e01d      	b.n	8004aa6 <mbedtls_mpi_safe_cond_assign+0x96>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	79fa      	ldrb	r2, [r7, #7]
 8004a78:	f1c2 0201 	rsb	r2, r2, #1
 8004a7c:	fb02 f103 	mul.w	r1, r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	79fa      	ldrb	r2, [r7, #7]
 8004a8e:	fb03 f202 	mul.w	r2, r3, r2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6898      	ldr	r0, [r3, #8]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4403      	add	r3, r0
 8004a9c:	440a      	add	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]
    for( i = 0; i < Y->n; i++ )
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d3dc      	bcc.n	8004a6a <mbedtls_mpi_safe_cond_assign+0x5a>

    for( ; i < X->n; i++ )
 8004ab0:	e014      	b.n	8004adc <mbedtls_mpi_safe_cond_assign+0xcc>
        X->p[i] *= ( 1 - assign );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	f1c3 0301 	rsb	r3, r3, #1
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6899      	ldr	r1, [r3, #8]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	fb00 f202 	mul.w	r2, r0, r2
 8004ad4:	601a      	str	r2, [r3, #0]
    for( ; i < X->n; i++ )
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3e5      	bcc.n	8004ab2 <mbedtls_mpi_safe_cond_assign+0xa2>

cleanup:
 8004ae6:	e000      	b.n	8004aea <mbedtls_mpi_safe_cond_assign+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 8004ae8:	bf00      	nop
    return( ret );
 8004aea:	693b      	ldr	r3, [r7, #16]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <mbedtls_mpi_safe_cond_swap>:
 * about whether the swap was made or not.
 * Here it is not ok to simply swap the pointers, which whould lead to
 * different memory access patterns when X and Y are used afterwards.
 */
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	71fb      	strb	r3, [r7, #7]
    size_t i;
    mbedtls_mpi_uint tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d101      	bne.n	8004b0e <mbedtls_mpi_safe_cond_swap+0x1a>
        return( 0 );
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e083      	b.n	8004c16 <mbedtls_mpi_safe_cond_swap+0x122>

    /* make sure swap is 0 or 1 in a time-constant manner */
    swap = (swap | (unsigned char)-swap) >> 7;
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	425b      	negs	r3, r3
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	09db      	lsrs	r3, r3, #7
 8004b1c:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4619      	mov	r1, r3
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff fe6e 	bl	8004806 <mbedtls_mpi_grow>
 8004b2a:	61f8      	str	r0, [r7, #28]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d16d      	bne.n	8004c0e <mbedtls_mpi_safe_cond_swap+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4619      	mov	r1, r3
 8004b38:	68b8      	ldr	r0, [r7, #8]
 8004b3a:	f7ff fe64 	bl	8004806 <mbedtls_mpi_grow>
 8004b3e:	61f8      	str	r0, [r7, #28]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d165      	bne.n	8004c12 <mbedtls_mpi_safe_cond_swap+0x11e>

    s = X->s;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	79fa      	ldrb	r2, [r7, #7]
 8004b52:	f1c2 0201 	rsb	r2, r2, #1
 8004b56:	fb03 f202 	mul.w	r2, r3, r2
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	79f9      	ldrb	r1, [r7, #7]
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	441a      	add	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	601a      	str	r2, [r3, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	79fa      	ldrb	r2, [r7, #7]
 8004b70:	f1c2 0201 	rsb	r2, r2, #1
 8004b74:	fb03 f202 	mul.w	r2, r3, r2
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	441a      	add	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	601a      	str	r2, [r3, #0]


    for( i = 0; i < X->n; i++ )
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e03a      	b.n	8004c02 <mbedtls_mpi_safe_cond_swap+0x10e>
    {
        tmp = X->p[i];
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	613b      	str	r3, [r7, #16]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	79fa      	ldrb	r2, [r7, #7]
 8004ba8:	f1c2 0201 	rsb	r2, r2, #1
 8004bac:	fb02 f103 	mul.w	r1, r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	79fa      	ldrb	r2, [r7, #7]
 8004bbe:	fb03 f202 	mul.w	r2, r3, r2
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6898      	ldr	r0, [r3, #8]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4403      	add	r3, r0
 8004bcc:	440a      	add	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	79fa      	ldrb	r2, [r7, #7]
 8004bde:	f1c2 0201 	rsb	r2, r2, #1
 8004be2:	fb02 f103 	mul.w	r1, r2, r3
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	fb03 f202 	mul.w	r2, r3, r2
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6898      	ldr	r0, [r3, #8]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4403      	add	r3, r0
 8004bf8:	440a      	add	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]
    for( i = 0; i < X->n; i++ )
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3bf      	bcc.n	8004b8c <mbedtls_mpi_safe_cond_swap+0x98>
    }

cleanup:
 8004c0c:	e002      	b.n	8004c14 <mbedtls_mpi_safe_cond_swap+0x120>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 8004c0e:	bf00      	nop
 8004c10:	e000      	b.n	8004c14 <mbedtls_mpi_safe_cond_swap+0x120>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 8004c12:	bf00      	nop
    return( ret );
 8004c14:	69fb      	ldr	r3, [r7, #28]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8004c28:	2101      	movs	r1, #1
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff fdeb 	bl	8004806 <mbedtls_mpi_grow>
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11a      	bne.n	8004c6e <mbedtls_mpi_lset+0x50>
    memset( X->p, 0, X->n * ciL );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6898      	ldr	r0, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	461a      	mov	r2, r3
 8004c44:	2100      	movs	r1, #0
 8004c46:	f00c fe13 	bl	8011870 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004c50:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da02      	bge.n	8004c66 <mbedtls_mpi_lset+0x48>
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	e000      	b.n	8004c68 <mbedtls_mpi_lset+0x4a>
 8004c66:	2201      	movs	r2, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e000      	b.n	8004c70 <mbedtls_mpi_lset+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8004c6e:	bf00      	nop

cleanup:

    return( ret );
 8004c70:	68fb      	ldr	r3, [r7, #12]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	015b      	lsls	r3, r3, #5
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d301      	bcc.n	8004c94 <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 8004c90:	2300      	movs	r3, #0
 8004c92:	e00d      	b.n	8004cb0 <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cac:	f003 0301 	and.w	r3, r3, #1
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <mbedtls_mpi_set_bit>:

/*
 * Set a bit to a specific value of 0 or 1
 */
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
    size_t off = pos / biL;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	61bb      	str	r3, [r7, #24]
    size_t idx = pos % biL;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    if( val != 0 && val != 1 )
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <mbedtls_mpi_set_bit+0x32>
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d002      	beq.n	8004cee <mbedtls_mpi_set_bit+0x32>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8004ce8:	f06f 0303 	mvn.w	r3, #3
 8004cec:	e039      	b.n	8004d62 <mbedtls_mpi_set_bit+0xa6>

    if( X->n * biL <= pos )
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	015b      	lsls	r3, r3, #5
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d30e      	bcc.n	8004d18 <mbedtls_mpi_set_bit+0x5c>
    {
        if( val == 0 )
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <mbedtls_mpi_set_bit+0x48>
            return( 0 );
 8004d00:	2300      	movs	r3, #0
 8004d02:	e02e      	b.n	8004d62 <mbedtls_mpi_set_bit+0xa6>

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	3301      	adds	r3, #1
 8004d08:	4619      	mov	r1, r3
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff fd7b 	bl	8004806 <mbedtls_mpi_grow>
 8004d10:	61f8      	str	r0, [r7, #28]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d122      	bne.n	8004d5e <mbedtls_mpi_set_bit+0xa2>
    }

    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43da      	mvns	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6898      	ldr	r0, [r3, #8]
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4403      	add	r3, r0
 8004d38:	400a      	ands	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	79fa      	ldrb	r2, [r7, #7]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6898      	ldr	r0, [r3, #8]
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4403      	add	r3, r0
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e000      	b.n	8004d60 <mbedtls_mpi_set_bit+0xa4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 8004d5e:	bf00      	nop

cleanup:

    return( ret );
 8004d60:	69fb      	ldr	r3, [r7, #28]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b087      	sub	sp, #28
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e01d      	b.n	8004db8 <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	e014      	b.n	8004dac <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <mbedtls_mpi_lsb+0x36>
                return( count );
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	e011      	b.n	8004dc4 <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3301      	adds	r3, #1
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b1f      	cmp	r3, #31
 8004db0:	d9e7      	bls.n	8004d82 <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	3301      	adds	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3dc      	bcc.n	8004d7c <mbedtls_mpi_lsb+0x12>

    return( 0 );
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8004dd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ddc:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e00a      	b.n	8004dfa <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <mbedtls_clz+0x32>

        mask >>= 1;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b1f      	cmp	r3, #31
 8004dfe:	d9f1      	bls.n	8004de4 <mbedtls_clz+0x14>
 8004e00:	e000      	b.n	8004e04 <mbedtls_clz+0x34>
        if( x & mask ) break;
 8004e02:	bf00      	nop
    }

    return j;
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 8004e22:	2300      	movs	r3, #0
 8004e24:	e025      	b.n	8004e72 <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e00a      	b.n	8004e46 <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f1      	bne.n	8004e30 <mbedtls_mpi_bitlen+0x1e>
 8004e4c:	e000      	b.n	8004e50 <mbedtls_mpi_bitlen+0x3e>
            break;
 8004e4e:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff ffb7 	bl	8004dd0 <mbedtls_clz>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f1c3 0320 	rsb	r3, r3, #32
 8004e68:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4413      	add	r3, r2
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff ffc5 	bl	8004e12 <mbedtls_mpi_bitlen>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	3307      	adds	r3, #7
 8004e8c:	08db      	lsrs	r3, r3, #3
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <mpi_get_digit>:

/*
 * Convert an ASCII character to digit value
 */
static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	71fb      	strb	r3, [r7, #7]
    *d = 255;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	22ff      	movs	r2, #255	; 0xff
 8004ea8:	601a      	str	r2, [r3, #0]

    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	2b2f      	cmp	r3, #47	; 0x2f
 8004eae:	d907      	bls.n	8004ec0 <mpi_get_digit+0x2a>
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	2b39      	cmp	r3, #57	; 0x39
 8004eb4:	d804      	bhi.n	8004ec0 <mpi_get_digit+0x2a>
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	3b30      	subs	r3, #48	; 0x30
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]
    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d907      	bls.n	8004ed6 <mpi_get_digit+0x40>
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	2b46      	cmp	r3, #70	; 0x46
 8004eca:	d804      	bhi.n	8004ed6 <mpi_get_digit+0x40>
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	3b37      	subs	r3, #55	; 0x37
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]
    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b60      	cmp	r3, #96	; 0x60
 8004eda:	d907      	bls.n	8004eec <mpi_get_digit+0x56>
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b66      	cmp	r3, #102	; 0x66
 8004ee0:	d804      	bhi.n	8004eec <mpi_get_digit+0x56>
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	3b57      	subs	r3, #87	; 0x57
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	601a      	str	r2, [r3, #0]

    if( *d >= (mbedtls_mpi_uint) radix )
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <mpi_get_digit+0x66>
        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
 8004ef6:	f06f 0305 	mvn.w	r3, #5
 8004efa:	e000      	b.n	8004efe <mpi_get_digit+0x68>

    return( 0 );
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <mbedtls_mpi_read_string>:

/*
 * Import from an ASCII string
 */
int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b08e      	sub	sp, #56	; 0x38
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint d;
    mbedtls_mpi T;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( s != NULL );

    if( radix < 2 || radix > 16 )
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	dd02      	ble.n	8004f22 <mbedtls_mpi_read_string+0x18>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	dd02      	ble.n	8004f28 <mbedtls_mpi_read_string+0x1e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8004f22:	f06f 0303 	mvn.w	r3, #3
 8004f26:	e0dd      	b.n	80050e4 <mbedtls_mpi_read_string+0x1da>

    mbedtls_mpi_init( &T );
 8004f28:	f107 0314 	add.w	r3, r7, #20
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fc31 	bl	8004794 <mbedtls_mpi_init>

    slen = strlen( s );
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fb f96c 	bl	8000210 <strlen>
 8004f38:	62b8      	str	r0, [r7, #40]	; 0x28

    if( radix == 16 )
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d167      	bne.n	8005010 <mbedtls_mpi_read_string+0x106>
    {
        if( slen > MPI_SIZE_T_MAX >> 2 )
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f46:	d302      	bcc.n	8004f4e <mbedtls_mpi_read_string+0x44>
            return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8004f48:	f06f 0303 	mvn.w	r3, #3
 8004f4c:	e0ca      	b.n	80050e4 <mbedtls_mpi_read_string+0x1da>

        n = BITS_TO_LIMBS( slen << 2 );
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f56:	0092      	lsls	r2, r2, #2
 8004f58:	f002 021f 	and.w	r2, r2, #31
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2201      	movne	r2, #1
 8004f62:	2200      	moveq	r2, #0
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	4413      	add	r3, r2
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 8004f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff fc4a 	bl	8004806 <mbedtls_mpi_grow>
 8004f72:	6378      	str	r0, [r7, #52]	; 0x34
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f040 80a1 	bne.w	80050be <mbedtls_mpi_read_string+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7ff fe4d 	bl	8004c1e <mbedtls_mpi_lset>
 8004f84:	6378      	str	r0, [r7, #52]	; 0x34
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f040 809a 	bne.w	80050c2 <mbedtls_mpi_read_string+0x1b8>

        for( i = slen, j = 0; i > 0; i--, j++ )
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
 8004f92:	2300      	movs	r3, #0
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f96:	e037      	b.n	8005008 <mbedtls_mpi_read_string+0xfe>
        {
            if( i == 1 && s[i - 1] == '-' )
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10b      	bne.n	8004fb6 <mbedtls_mpi_read_string+0xac>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b2d      	cmp	r3, #45	; 0x2d
 8004faa:	d104      	bne.n	8004fb6 <mbedtls_mpi_read_string+0xac>
            {
                X->s = -1;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb2:	601a      	str	r2, [r3, #0]
                break;
 8004fb4:	e090      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	781a      	ldrb	r2, [r3, #0]
 8004fc0:	f107 0320 	add.w	r3, r7, #32
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ff65 	bl	8004e96 <mpi_get_digit>
 8004fcc:	6378      	str	r0, [r7, #52]	; 0x34
 8004fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d178      	bne.n	80050c6 <mbedtls_mpi_read_string+0x1bc>
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6899      	ldr	r1, [r3, #8]
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	009a      	lsls	r2, r3, #2
 8004fde:	440a      	add	r2, r1
 8004fe0:	6811      	ldr	r1, [r2, #0]
 8004fe2:	6a38      	ldr	r0, [r7, #32]
 8004fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe6:	0092      	lsls	r2, r2, #2
 8004fe8:	f002 021c 	and.w	r2, r2, #28
 8004fec:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	6880      	ldr	r0, [r0, #8]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4403      	add	r3, r0
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]
        for( i = slen, j = 0; i > 0; i--, j++ )
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	3b01      	subs	r3, #1
 8005000:	633b      	str	r3, [r7, #48]	; 0x30
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	3301      	adds	r3, #1
 8005006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1c4      	bne.n	8004f98 <mbedtls_mpi_read_string+0x8e>
 800500e:	e063      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8005010:	2100      	movs	r1, #0
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fe03 	bl	8004c1e <mbedtls_mpi_lset>
 8005018:	6378      	str	r0, [r7, #52]	; 0x34
 800501a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501c:	2b00      	cmp	r3, #0
 800501e:	d154      	bne.n	80050ca <mbedtls_mpi_read_string+0x1c0>

        for( i = 0; i < slen; i++ )
 8005020:	2300      	movs	r3, #0
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
 8005024:	e046      	b.n	80050b4 <mbedtls_mpi_read_string+0x1aa>
        {
            if( i == 0 && s[i] == '-' )
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <mbedtls_mpi_read_string+0x138>
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	4413      	add	r3, r2
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b2d      	cmp	r3, #45	; 0x2d
 8005036:	d104      	bne.n	8005042 <mbedtls_mpi_read_string+0x138>
            {
                X->s = -1;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f04f 32ff 	mov.w	r2, #4294967295
 800503e:	601a      	str	r2, [r3, #0]
                continue;
 8005040:	e035      	b.n	80050ae <mbedtls_mpi_read_string+0x1a4>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	4413      	add	r3, r2
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	f107 0320 	add.w	r3, r7, #32
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff20 	bl	8004e96 <mpi_get_digit>
 8005056:	6378      	str	r0, [r7, #52]	; 0x34
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	2b00      	cmp	r3, #0
 800505c:	d137      	bne.n	80050ce <mbedtls_mpi_read_string+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	f107 0314 	add.w	r3, r7, #20
 8005064:	68f9      	ldr	r1, [r7, #12]
 8005066:	4618      	mov	r0, r3
 8005068:	f002 fa5a 	bl	8007520 <mbedtls_mpi_mul_int>
 800506c:	6378      	str	r0, [r7, #52]	; 0x34
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d12e      	bne.n	80050d2 <mbedtls_mpi_read_string+0x1c8>

            if( X->s == 1 )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d10c      	bne.n	8005096 <mbedtls_mpi_read_string+0x18c>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	461a      	mov	r2, r3
 8005080:	f107 0314 	add.w	r3, r7, #20
 8005084:	4619      	mov	r1, r3
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fda9 	bl	8005bde <mbedtls_mpi_add_int>
 800508c:	6378      	str	r0, [r7, #52]	; 0x34
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00c      	beq.n	80050ae <mbedtls_mpi_read_string+0x1a4>
 8005094:	e020      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
            }
            else
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	461a      	mov	r2, r3
 800509a:	f107 0314 	add.w	r3, r7, #20
 800509e:	4619      	mov	r1, r3
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fdc0 	bl	8005c26 <mbedtls_mpi_sub_int>
 80050a6:	6378      	str	r0, [r7, #52]	; 0x34
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d113      	bne.n	80050d6 <mbedtls_mpi_read_string+0x1cc>
        for( i = 0; i < slen; i++ )
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	3301      	adds	r3, #1
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30
 80050b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d3b4      	bcc.n	8005026 <mbedtls_mpi_read_string+0x11c>
            }
        }
    }

cleanup:
 80050bc:	e00c      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 80050be:	bf00      	nop
 80050c0:	e00a      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80050c2:	bf00      	nop
 80050c4:	e008      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 80050c6:	bf00      	nop
 80050c8:	e006      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80050ca:	bf00      	nop
 80050cc:	e004      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 80050ce:	bf00      	nop
 80050d0:	e002      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 80050d2:	bf00      	nop
 80050d4:	e000      	b.n	80050d8 <mbedtls_mpi_read_string+0x1ce>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 80050d6:	bf00      	nop

    mbedtls_mpi_free( &T );
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fb6c 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3738      	adds	r7, #56	; 0x38
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <mpi_uint_bigendian_to_host>:
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    return( tmp );
}

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	ba1b      	rev	r3, r3
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d026      	beq.n	8005162 <mpi_bigendian_to_host+0x5e>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800511e:	3b01      	subs	r3, #1
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e016      	b.n	8005158 <mpi_bigendian_to_host+0x54>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ffdc 	bl	80050ec <mpi_uint_bigendian_to_host>
 8005134:	60f8      	str	r0, [r7, #12]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ffd6 	bl	80050ec <mpi_uint_bigendian_to_host>
 8005140:	4602      	mov	r2, r0
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	601a      	str	r2, [r3, #0]
        *cur_limb_right = tmp;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]
         cur_limb_left++, cur_limb_right-- )
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3304      	adds	r3, #4
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	3b04      	subs	r3, #4
 8005156:	613b      	str	r3, [r7, #16]
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	429a      	cmp	r2, r3
 800515e:	d9e4      	bls.n	800512a <mpi_bigendian_to_host+0x26>
 8005160:	e000      	b.n	8005164 <mpi_bigendian_to_host+0x60>
        return;
 8005162:	bf00      	nop
    }
}
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b088      	sub	sp, #32
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	f002 0203 	and.w	r2, r2, #3
 8005180:	2a00      	cmp	r2, #0
 8005182:	bf14      	ite	ne
 8005184:	2201      	movne	r2, #1
 8005186:	2200      	moveq	r2, #0
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	4413      	add	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - buflen;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	009a      	lsls	r2, r3, #2
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d00d      	beq.n	80051be <mbedtls_mpi_read_binary+0x54>
    {
        mbedtls_mpi_free( X );
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff fb09 	bl	80047ba <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff faf3 	bl	8004794 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80051ae:	69b9      	ldr	r1, [r7, #24]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff fb28 	bl	8004806 <mbedtls_mpi_grow>
 80051b6:	61f8      	str	r0, [r7, #28]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d11c      	bne.n	80051f8 <mbedtls_mpi_read_binary+0x8e>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80051be:	2100      	movs	r1, #0
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff fd2c 	bl	8004c1e <mbedtls_mpi_lset>
 80051c6:	61f8      	str	r0, [r7, #28]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d116      	bne.n	80051fc <mbedtls_mpi_read_binary+0x92>

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <mbedtls_mpi_read_binary+0x96>
    {
        Xp = (unsigned char*) X->p;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	613b      	str	r3, [r7, #16]
        memcpy( Xp + overhead, buf, buflen );
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f00c fb35 	bl	8011854 <memcpy>

        mpi_bigendian_to_host( X->p, limbs );
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	69b9      	ldr	r1, [r7, #24]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff ff87 	bl	8005104 <mpi_bigendian_to_host>
 80051f6:	e004      	b.n	8005202 <mbedtls_mpi_read_binary+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80051f8:	bf00      	nop
 80051fa:	e002      	b.n	8005202 <mbedtls_mpi_read_binary+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80051fc:	bf00      	nop
 80051fe:	e000      	b.n	8005202 <mbedtls_mpi_read_binary+0x98>
    }

cleanup:
 8005200:	bf00      	nop

    return( ret );
 8005202:	69fb      	ldr	r3, [r7, #28]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3720      	adds	r7, #32
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	613b      	str	r3, [r7, #16]

    if( stored_bytes < buflen )
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d210      	bcs.n	800524a <mbedtls_mpi_write_binary+0x3e>
        /* There is enough space in the output buffer. Write initial
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	61fb      	str	r3, [r7, #28]
        p = buf + buflen - stored_bytes;
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	4413      	add	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        memset( buf, 0, buflen - stored_bytes );
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	461a      	mov	r2, r3
 8005240:	2100      	movs	r1, #0
 8005242:	68b8      	ldr	r0, [r7, #8]
 8005244:	f00c fb14 	bl	8011870 <memset>
 8005248:	e020      	b.n	800528c <mbedtls_mpi_write_binary+0x80>
    }
    else
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	61fb      	str	r3, [r7, #28]
        p = buf;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	61bb      	str	r3, [r7, #24]
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e015      	b.n	8005284 <mbedtls_mpi_write_binary+0x78>
        {
            if( GET_BYTE( X, i ) != 0 )
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	4413      	add	r3, r2
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <mbedtls_mpi_write_binary+0x72>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8005278:	f06f 0307 	mvn.w	r3, #7
 800527c:	e026      	b.n	80052cc <mbedtls_mpi_write_binary+0xc0>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	3301      	adds	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	429a      	cmp	r2, r3
 800528a:	d3e5      	bcc.n	8005258 <mbedtls_mpi_write_binary+0x4c>
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e017      	b.n	80052c2 <mbedtls_mpi_write_binary+0xb6>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f023 0303 	bic.w	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	fa22 f103 	lsr.w	r1, r2, r3
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4413      	add	r3, r2
 80052b8:	b2ca      	uxtb	r2, r1
 80052ba:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < bytes_to_copy; i++ )
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	3301      	adds	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d3e3      	bcc.n	8005292 <mbedtls_mpi_write_binary+0x86>

    return( 0 );
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fd8e 	bl	8004e12 <mbedtls_mpi_bitlen>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4413      	add	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	015b      	lsls	r3, r3, #5
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	429a      	cmp	r2, r3
 8005308:	d912      	bls.n	8005330 <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	f002 021f 	and.w	r2, r2, #31
 8005314:	2a00      	cmp	r2, #0
 8005316:	bf14      	ite	ne
 8005318:	2201      	movne	r2, #1
 800531a:	2200      	moveq	r2, #0
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	4413      	add	r3, r2
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fa6f 	bl	8004806 <mbedtls_mpi_grow>
 8005328:	61f8      	str	r0, [r7, #28]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d16e      	bne.n	800540e <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02f      	beq.n	800539a <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	e016      	b.n	8005370 <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	69b9      	ldr	r1, [r7, #24]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005350:	3b01      	subs	r3, #1
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	441a      	add	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6899      	ldr	r1, [r3, #8]
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005360:	3b01      	subs	r3, #1
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3b01      	subs	r3, #1
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d8e4      	bhi.n	8005342 <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 8005378:	e00c      	b.n	8005394 <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005384:	3b01      	subs	r3, #1
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3b01      	subs	r3, #1
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ef      	bne.n	800537a <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d038      	beq.n	8005412 <mbedtls_mpi_shift_l+0x13e>
    {
        for( i = v0; i < X->n; i++ )
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	e02d      	b.n	8005402 <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f1c3 0320 	rsb	r3, r3, #32
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	6819      	ldr	r1, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	fa01 f202 	lsl.w	r2, r1, r2
 80053da:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	6819      	ldr	r1, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]
            r0 = r1;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	3301      	adds	r3, #1
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	429a      	cmp	r2, r3
 800540a:	d3cc      	bcc.n	80053a6 <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 800540c:	e001      	b.n	8005412 <mbedtls_mpi_shift_l+0x13e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800540e:	bf00      	nop
 8005410:	e000      	b.n	8005414 <mbedtls_mpi_shift_l+0x140>
cleanup:
 8005412:	bf00      	nop

    return( ret );
 8005414:	69fb      	ldr	r3, [r7, #28]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b088      	sub	sp, #32
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 8005428:	2300      	movs	r3, #0
 800542a:	61bb      	str	r3, [r7, #24]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	429a      	cmp	r2, r3
 8005442:	d807      	bhi.n	8005454 <mbedtls_mpi_shift_r+0x36>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	429a      	cmp	r2, r3
 800544c:	d108      	bne.n	8005460 <mbedtls_mpi_shift_r+0x42>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 8005454:	2100      	movs	r1, #0
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff fbe1 	bl	8004c1e <mbedtls_mpi_lset>
 800545c:	4603      	mov	r3, r0
 800545e:	e075      	b.n	800554c <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02a      	beq.n	80054bc <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e010      	b.n	800548e <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	440b      	add	r3, r1
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6899      	ldr	r1, [r3, #8]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	429a      	cmp	r2, r3
 800549a:	d3e7      	bcc.n	800546c <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 800549c:	e009      	b.n	80054b2 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	3301      	adds	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d3f0      	bcc.n	800549e <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d043      	beq.n	800554a <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e03c      	b.n	8005544 <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	3b01      	subs	r3, #1
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f1c3 0320 	rsb	r3, r3, #32
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054f2:	3b01      	subs	r3, #1
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005504:	3b01      	subs	r3, #1
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	fa21 f202 	lsr.w	r2, r1, r2
 8005510:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800551c:	3b01      	subs	r3, #1
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	6819      	ldr	r1, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800552e:	3b01      	subs	r3, #1
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	430a      	orrs	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
            r0 = r1;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3b01      	subs	r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1bf      	bne.n	80054ca <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e00d      	b.n	8005582 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005570:	3b01      	subs	r3, #1
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3b01      	subs	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ee      	bne.n	8005566 <mbedtls_mpi_cmp_abs+0x12>
 8005588:	e000      	b.n	800558c <mbedtls_mpi_cmp_abs+0x38>
            break;
 800558a:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	e00d      	b.n	80055b0 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800559e:	3b01      	subs	r3, #1
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1ee      	bne.n	8005594 <mbedtls_mpi_cmp_abs+0x40>
 80055b6:	e000      	b.n	80055ba <mbedtls_mpi_cmp_abs+0x66>
            break;
 80055b8:	bf00      	nop

    if( i == 0 && j == 0 )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <mbedtls_mpi_cmp_abs+0x76>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 80055c6:	2300      	movs	r3, #0
 80055c8:	e040      	b.n	800564c <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d901      	bls.n	80055d6 <mbedtls_mpi_cmp_abs+0x82>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e03a      	b.n	800564c <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d932      	bls.n	8005644 <mbedtls_mpi_cmp_abs+0xf0>
 80055de:	f04f 33ff 	mov.w	r3, #4294967295
 80055e2:	e033      	b.n	800564c <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055ee:	3b01      	subs	r3, #1
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005600:	3b01      	subs	r3, #1
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d901      	bls.n	8005610 <mbedtls_mpi_cmp_abs+0xbc>
 800560c:	2301      	movs	r3, #1
 800560e:	e01d      	b.n	800564c <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800561a:	3b01      	subs	r3, #1
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6899      	ldr	r1, [r3, #8]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800562c:	3b01      	subs	r3, #1
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d202      	bcs.n	800563e <mbedtls_mpi_cmp_abs+0xea>
 8005638:	f04f 33ff 	mov.w	r3, #4294967295
 800563c:	e006      	b.n	800564c <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3b01      	subs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1cc      	bne.n	80055e4 <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e00d      	b.n	8005686 <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005674:	3b01      	subs	r3, #1
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3b01      	subs	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1ee      	bne.n	800566a <mbedtls_mpi_cmp_mpi+0x12>
 800568c:	e000      	b.n	8005690 <mbedtls_mpi_cmp_mpi+0x38>
            break;
 800568e:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	e00d      	b.n	80056b4 <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056a2:	3b01      	subs	r3, #1
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ee      	bne.n	8005698 <mbedtls_mpi_cmp_mpi+0x40>
 80056ba:	e000      	b.n	80056be <mbedtls_mpi_cmp_mpi+0x66>
            break;
 80056bc:	bf00      	nop

    if( i == 0 && j == 0 )
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <mbedtls_mpi_cmp_mpi+0x76>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 80056ca:	2300      	movs	r3, #0
 80056cc:	e059      	b.n	8005782 <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d902      	bls.n	80056dc <mbedtls_mpi_cmp_mpi+0x84>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	e052      	b.n	8005782 <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d903      	bls.n	80056ec <mbedtls_mpi_cmp_mpi+0x94>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	425b      	negs	r3, r3
 80056ea:	e04a      	b.n	8005782 <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dd05      	ble.n	8005700 <mbedtls_mpi_cmp_mpi+0xa8>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da01      	bge.n	8005700 <mbedtls_mpi_cmp_mpi+0xa8>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e040      	b.n	8005782 <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	dd38      	ble.n	800577a <mbedtls_mpi_cmp_mpi+0x122>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	da34      	bge.n	800577a <mbedtls_mpi_cmp_mpi+0x122>
 8005710:	f04f 33ff 	mov.w	r3, #4294967295
 8005714:	e035      	b.n	8005782 <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005720:	3b01      	subs	r3, #1
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	6899      	ldr	r1, [r3, #8]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005732:	3b01      	subs	r3, #1
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d902      	bls.n	8005744 <mbedtls_mpi_cmp_mpi+0xec>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	e01e      	b.n	8005782 <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800574e:	3b01      	subs	r3, #1
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6899      	ldr	r1, [r3, #8]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005760:	3b01      	subs	r3, #1
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d203      	bcs.n	8005774 <mbedtls_mpi_cmp_mpi+0x11c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	425b      	negs	r3, r3
 8005772:	e006      	b.n	8005782 <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ca      	bne.n	8005716 <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	bfb8      	it	lt
 800579e:	425b      	neglt	r3, r3
 80057a0:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	da02      	bge.n	80057ae <mbedtls_mpi_cmp_int+0x20>
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	e000      	b.n	80057b0 <mbedtls_mpi_cmp_int+0x22>
 80057ae:	2301      	movs	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 80057b2:	2301      	movs	r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
    Y.p = p;
 80057b6:	f107 0308 	add.w	r3, r7, #8
 80057ba:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80057bc:	f107 030c 	add.w	r3, r7, #12
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff ff48 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 80057c8:	4603      	mov	r3, r0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b08c      	sub	sp, #48	; 0x30
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d105      	bne.n	80057f2 <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d008      	beq.n	800580c <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff f8ab 	bl	8004958 <mbedtls_mpi_copy>
 8005802:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	2b00      	cmp	r3, #0
 8005808:	f040 808d 	bne.w	8005926 <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
 8005818:	e00d      	b.n	8005836 <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005824:	3b01      	subs	r3, #1
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	3b01      	subs	r3, #1
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ee      	bne.n	800581a <mbedtls_mpi_add_abs+0x48>
 800583c:	e000      	b.n	8005840 <mbedtls_mpi_add_abs+0x6e>
            break;
 800583e:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8005840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7fe ffdf 	bl	8004806 <mbedtls_mpi_grow>
 8005848:	62f8      	str	r0, [r7, #44]	; 0x2c
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d16c      	bne.n	800592a <mbedtls_mpi_add_abs+0x158>

    o = B->p; p = X->p; c = 0;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	623b      	str	r3, [r7, #32]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 8005860:	2300      	movs	r3, #0
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
 8005864:	e02c      	b.n	80058c0 <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	441a      	add	r2, r3
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	429a      	cmp	r2, r3
 8005880:	bf8c      	ite	hi
 8005882:	2301      	movhi	r3, #1
 8005884:	2300      	movls	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	441a      	add	r2, r3
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	429a      	cmp	r2, r3
 800589e:	bf8c      	ite	hi
 80058a0:	2301      	movhi	r3, #1
 80058a2:	2300      	movls	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	4413      	add	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	3301      	adds	r3, #1
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	3304      	adds	r3, #4
 80058b8:	623b      	str	r3, [r7, #32]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3304      	adds	r3, #4
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d3ce      	bcc.n	8005866 <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 80058c8:	e029      	b.n	800591e <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d30f      	bcc.n	80058f4 <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	3301      	adds	r3, #1
 80058d8:	4619      	mov	r1, r3
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7fe ff93 	bl	8004806 <mbedtls_mpi_grow>
 80058e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d122      	bne.n	800592e <mbedtls_mpi_add_abs+0x15c>
            p = X->p + i;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	441a      	add	r2, r3
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	429a      	cmp	r2, r3
 8005908:	bf8c      	ite	hi
 800590a:	2301      	movhi	r3, #1
 800590c:	2300      	movls	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	3301      	adds	r3, #1
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	3304      	adds	r3, #4
 800591c:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1d2      	bne.n	80058ca <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 8005924:	e004      	b.n	8005930 <mbedtls_mpi_add_abs+0x15e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8005926:	bf00      	nop
 8005928:	e002      	b.n	8005930 <mbedtls_mpi_add_abs+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <mbedtls_mpi_add_abs+0x15e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800592e:	bf00      	nop

    return( ret );
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005932:	4618      	mov	r0, r3
 8005934:	3730      	adds	r7, #48	; 0x30
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 800593a:	b480      	push	{r7}
 800593c:	b089      	sub	sp, #36	; 0x24
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	e02b      	b.n	80059a8 <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	429a      	cmp	r2, r3
 8005958:	bf8c      	ite	hi
 800595a:	2301      	movhi	r3, #1
 800595c:	2300      	movls	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	1ad2      	subs	r2, r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	bf34      	ite	cc
 800597a:	2301      	movcc	r3, #1
 800597c:	2300      	movcs	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	4413      	add	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	1ad2      	subs	r2, r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3301      	adds	r3, #1
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3304      	adds	r3, #4
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	607b      	str	r3, [r7, #4]
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d3cf      	bcc.n	8005950 <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 80059b0:	e013      	b.n	80059da <mpi_sub_hlp+0xa0>
    {
        z = ( *d < c ); *d -= c;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	bf8c      	ite	hi
 80059bc:	2301      	movhi	r3, #1
 80059be:	2300      	movls	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	1ad2      	subs	r2, r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
        c = z; d++;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e8      	bne.n	80059b2 <mpi_sub_hlp+0x78>
    }
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	3724      	adds	r7, #36	; 0x24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b08a      	sub	sp, #40	; 0x28
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	68b8      	ldr	r0, [r7, #8]
 80059fe:	f7ff fda9 	bl	8005554 <mbedtls_mpi_cmp_abs>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	da02      	bge.n	8005a0e <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8005a08:	f06f 0309 	mvn.w	r3, #9
 8005a0c:	e04f      	b.n	8005aae <mbedtls_mpi_sub_abs+0xc0>

    mbedtls_mpi_init( &TB );
 8005a0e:	f107 0314 	add.w	r3, r7, #20
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe febe 	bl	8004794 <mbedtls_mpi_init>

    if( X == B )
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d10c      	bne.n	8005a3a <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8005a20:	f107 0314 	add.w	r3, r7, #20
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe ff96 	bl	8004958 <mbedtls_mpi_copy>
 8005a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d133      	bne.n	8005a9c <mbedtls_mpi_sub_abs+0xae>
        B = &TB;
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d007      	beq.n	8005a52 <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7fe ff87 	bl	8004958 <mbedtls_mpi_copy>
 8005a4a:	6278      	str	r0, [r7, #36]	; 0x24
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d126      	bne.n	8005aa0 <mbedtls_mpi_sub_abs+0xb2>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

    ret = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24

    for( n = B->n; n > 0; n-- )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	e00d      	b.n	8005a80 <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1ee      	bne.n	8005a64 <mbedtls_mpi_sub_abs+0x76>
 8005a86:	e000      	b.n	8005a8a <mbedtls_mpi_sub_abs+0x9c>
            break;
 8005a88:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6899      	ldr	r1, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6a38      	ldr	r0, [r7, #32]
 8005a96:	f7ff ff50 	bl	800593a <mpi_sub_hlp>
 8005a9a:	e002      	b.n	8005aa2 <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8005a9c:	bf00      	nop
 8005a9e:	e000      	b.n	8005aa2 <mbedtls_mpi_sub_abs+0xb4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8005aa0:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB );
 8005aa2:	f107 0314 	add.w	r3, r7, #20
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fe87 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3728      	adds	r7, #40	; 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	613b      	str	r3, [r7, #16]
    if( A->s * B->s < 0 )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	da21      	bge.n	8005b1c <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	68b8      	ldr	r0, [r7, #8]
 8005adc:	f7ff fd3a 	bl	8005554 <mbedtls_mpi_cmp_abs>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db0c      	blt.n	8005b00 <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff ff7f 	bl	80059ee <mbedtls_mpi_sub_abs>
 8005af0:	6178      	str	r0, [r7, #20]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11e      	bne.n	8005b36 <mbedtls_mpi_add_mpi+0x80>
            X->s =  s;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e01f      	b.n	8005b40 <mbedtls_mpi_add_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff ff72 	bl	80059ee <mbedtls_mpi_sub_abs>
 8005b0a:	6178      	str	r0, [r7, #20]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d113      	bne.n	8005b3a <mbedtls_mpi_add_mpi+0x84>
            X->s = -s;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	425a      	negs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	e011      	b.n	8005b40 <mbedtls_mpi_add_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fe56 	bl	80057d2 <mbedtls_mpi_add_abs>
 8005b26:	6178      	str	r0, [r7, #20]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <mbedtls_mpi_add_mpi+0x88>
        X->s = s;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e004      	b.n	8005b40 <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8005b36:	bf00      	nop
 8005b38:	e002      	b.n	8005b40 <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <mbedtls_mpi_add_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8005b3e:	bf00      	nop
    }

cleanup:

    return( ret );
 8005b40:	697b      	ldr	r3, [r7, #20]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	613b      	str	r3, [r7, #16]
    if( A->s * B->s > 0 )
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	fb02 f303 	mul.w	r3, r2, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dd21      	ble.n	8005bb0 <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	68b8      	ldr	r0, [r7, #8]
 8005b70:	f7ff fcf0 	bl	8005554 <mbedtls_mpi_cmp_abs>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	db0c      	blt.n	8005b94 <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff ff35 	bl	80059ee <mbedtls_mpi_sub_abs>
 8005b84:	6178      	str	r0, [r7, #20]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d11e      	bne.n	8005bca <mbedtls_mpi_sub_mpi+0x80>
            X->s =  s;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e01f      	b.n	8005bd4 <mbedtls_mpi_sub_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff ff28 	bl	80059ee <mbedtls_mpi_sub_abs>
 8005b9e:	6178      	str	r0, [r7, #20]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d113      	bne.n	8005bce <mbedtls_mpi_sub_mpi+0x84>
            X->s = -s;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	425a      	negs	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e011      	b.n	8005bd4 <mbedtls_mpi_sub_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7ff fe0c 	bl	80057d2 <mbedtls_mpi_add_abs>
 8005bba:	6178      	str	r0, [r7, #20]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d107      	bne.n	8005bd2 <mbedtls_mpi_sub_mpi+0x88>
        X->s = s;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	e004      	b.n	8005bd4 <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8005bca:	bf00      	nop
 8005bcc:	e002      	b.n	8005bd4 <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8005bce:	bf00      	nop
 8005bd0:	e000      	b.n	8005bd4 <mbedtls_mpi_sub_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8005bd2:	bf00      	nop
    }

cleanup:

    return( ret );
 8005bd4:	697b      	ldr	r3, [r7, #20]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b088      	sub	sp, #32
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bfb8      	it	lt
 8005bf0:	425b      	neglt	r3, r3
 8005bf2:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da02      	bge.n	8005c00 <mbedtls_mpi_add_int+0x22>
 8005bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfe:	e000      	b.n	8005c02 <mbedtls_mpi_add_int+0x24>
 8005c00:	2301      	movs	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8005c04:	2301      	movs	r3, #1
 8005c06:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8005c08:	f107 0310 	add.w	r3, r7, #16
 8005c0c:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 8005c0e:	f107 0314 	add.w	r3, r7, #20
 8005c12:	461a      	mov	r2, r3
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff ff4d 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b088      	sub	sp, #32
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfb8      	it	lt
 8005c38:	425b      	neglt	r3, r3
 8005c3a:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da02      	bge.n	8005c48 <mbedtls_mpi_sub_int+0x22>
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	e000      	b.n	8005c4a <mbedtls_mpi_sub_int+0x24>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8005c50:	f107 0310 	add.w	r3, r7, #16
 8005c54:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 8005c56:	f107 0314 	add.w	r3, r7, #20
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff ff73 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8005c64:	4603      	mov	r3, r0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b09f      	sub	sp, #124	; 0x7c
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint c = 0, t = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	677b      	str	r3, [r7, #116]	; 0x74
 8005c80:	2300      	movs	r3, #0
 8005c82:	673b      	str	r3, [r7, #112]	; 0x70
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8005c84:	f000 bf49 	b.w	8006b1a <mpi_mul_hlp+0xeac>
    {
        MULADDC_INIT
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
        MULADDC_CORE   MULADDC_CORE
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	0c1b      	lsrs	r3, r3, #16
 8005ca2:	623b      	str	r3, [r7, #32]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ccc:	fb02 f303 	mul.w	r3, r2, r3
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4413      	add	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	041b      	lsls	r3, r3, #16
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	bf34      	ite	cc
 8005d02:	2301      	movcc	r3, #1
 8005d04:	2300      	movcs	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	bf34      	ite	cc
 8005d20:	2301      	movcc	r3, #1
 8005d22:	2300      	movcs	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d32:	4413      	add	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	bf34      	ite	cc
 8005d3e:	2301      	movcc	r3, #1
 8005d40:	2300      	movcs	r3, #0
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4413      	add	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	bf34      	ite	cc
 8005d60:	2301      	movcc	r3, #1
 8005d62:	2300      	movcs	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	677b      	str	r3, [r7, #116]	; 0x74
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	0c1b      	lsrs	r3, r3, #16
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da0:	fb02 f303 	mul.w	r3, r2, r3
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	0c1b      	lsrs	r3, r3, #16
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	0c1b      	lsrs	r3, r3, #16
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	bf34      	ite	cc
 8005dea:	2301      	movcc	r3, #1
 8005dec:	2300      	movcs	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4413      	add	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	bf34      	ite	cc
 8005e08:	2301      	movcc	r3, #1
 8005e0a:	2300      	movcs	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e1a:	4413      	add	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e22:	429a      	cmp	r2, r3
 8005e24:	bf34      	ite	cc
 8005e26:	2301      	movcc	r3, #1
 8005e28:	2300      	movcs	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	bf34      	ite	cc
 8005e48:	2301      	movcc	r3, #1
 8005e4a:	2300      	movcs	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	4413      	add	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	677b      	str	r3, [r7, #116]	; 0x74
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	1d1a      	adds	r2, r3, #4
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	3304      	adds	r3, #4
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e92:	fb02 f303 	mul.w	r3, r2, r3
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	041b      	lsls	r3, r3, #16
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	041b      	lsls	r3, r3, #16
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	bf34      	ite	cc
 8005ed2:	2301      	movcc	r3, #1
 8005ed4:	2300      	movcs	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4413      	add	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	bf34      	ite	cc
 8005ef0:	2301      	movcc	r3, #1
 8005ef2:	2300      	movcs	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f02:	4413      	add	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	bf34      	ite	cc
 8005f0e:	2301      	movcc	r3, #1
 8005f10:	2300      	movcs	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4413      	add	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	bf34      	ite	cc
 8005f30:	2301      	movcc	r3, #1
 8005f32:	2300      	movcs	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	677b      	str	r3, [r7, #116]	; 0x74
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1d1a      	adds	r2, r3, #4
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	623b      	str	r3, [r7, #32]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	61fb      	str	r3, [r7, #28]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	bf34      	ite	cc
 8005fba:	2301      	movcc	r3, #1
 8005fbc:	2300      	movcs	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	4413      	add	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	bf34      	ite	cc
 8005fd8:	2301      	movcc	r3, #1
 8005fda:	2300      	movcs	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fea:	4413      	add	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	bf34      	ite	cc
 8005ff6:	2301      	movcc	r3, #1
 8005ff8:	2300      	movcs	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4413      	add	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4413      	add	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	429a      	cmp	r2, r3
 8006016:	bf34      	ite	cc
 8006018:	2301      	movcc	r3, #1
 800601a:	2300      	movcs	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	677b      	str	r3, [r7, #116]	; 0x74
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	1d1a      	adds	r2, r3, #4
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	3304      	adds	r3, #4
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604e:	fb02 f303 	mul.w	r3, r2, r3
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	0c1b      	lsrs	r3, r3, #16
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4413      	add	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	429a      	cmp	r2, r3
 80060a0:	bf34      	ite	cc
 80060a2:	2301      	movcc	r3, #1
 80060a4:	2300      	movcs	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4413      	add	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	4413      	add	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	429a      	cmp	r2, r3
 80060be:	bf34      	ite	cc
 80060c0:	2301      	movcc	r3, #1
 80060c2:	2300      	movcs	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d2:	4413      	add	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060da:	429a      	cmp	r2, r3
 80060dc:	bf34      	ite	cc
 80060de:	2301      	movcc	r3, #1
 80060e0:	2300      	movcs	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4413      	add	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4413      	add	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	bf34      	ite	cc
 8006100:	2301      	movcc	r3, #1
 8006102:	2300      	movcs	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	677b      	str	r3, [r7, #116]	; 0x74
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	1d1a      	adds	r2, r3, #4
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	0c1b      	lsrs	r3, r3, #16
 800612a:	623b      	str	r3, [r7, #32]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3304      	adds	r3, #4
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006154:	fb02 f303 	mul.w	r3, r2, r3
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	0c1b      	lsrs	r3, r3, #16
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4413      	add	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	0c1b      	lsrs	r3, r3, #16
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	429a      	cmp	r2, r3
 8006188:	bf34      	ite	cc
 800618a:	2301      	movcc	r3, #1
 800618c:	2300      	movcs	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4413      	add	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4413      	add	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	bf34      	ite	cc
 80061a8:	2301      	movcc	r3, #1
 80061aa:	2300      	movcs	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4413      	add	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ba:	4413      	add	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c2:	429a      	cmp	r2, r3
 80061c4:	bf34      	ite	cc
 80061c6:	2301      	movcc	r3, #1
 80061c8:	2300      	movcs	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	461a      	mov	r2, r3
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4413      	add	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	bf34      	ite	cc
 80061e8:	2301      	movcc	r3, #1
 80061ea:	2300      	movcs	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	677b      	str	r3, [r7, #116]	; 0x74
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	1d1a      	adds	r2, r3, #4
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	0c1b      	lsrs	r3, r3, #16
 8006212:	623b      	str	r3, [r7, #32]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	3304      	adds	r3, #4
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800623c:	fb02 f303 	mul.w	r3, r2, r3
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	0c1b      	lsrs	r3, r3, #16
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4413      	add	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	041b      	lsls	r3, r3, #16
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	429a      	cmp	r2, r3
 8006270:	bf34      	ite	cc
 8006272:	2301      	movcc	r3, #1
 8006274:	2300      	movcs	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4413      	add	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4413      	add	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	429a      	cmp	r2, r3
 800628e:	bf34      	ite	cc
 8006290:	2301      	movcc	r3, #1
 8006292:	2300      	movcs	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a2:	4413      	add	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062aa:	429a      	cmp	r2, r3
 80062ac:	bf34      	ite	cc
 80062ae:	2301      	movcc	r3, #1
 80062b0:	2300      	movcs	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4413      	add	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4413      	add	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bf34      	ite	cc
 80062d0:	2301      	movcc	r3, #1
 80062d2:	2300      	movcs	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	677b      	str	r3, [r7, #116]	; 0x74
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	3304      	adds	r3, #4
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800631a:	fb02 f303 	mul.w	r3, r2, r3
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006324:	fb02 f303 	mul.w	r3, r2, r3
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4413      	add	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	0c1b      	lsrs	r3, r3, #16
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4413      	add	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	61fb      	str	r3, [r7, #28]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	429a      	cmp	r2, r3
 8006358:	bf34      	ite	cc
 800635a:	2301      	movcc	r3, #1
 800635c:	2300      	movcs	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	4413      	add	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	429a      	cmp	r2, r3
 8006376:	bf34      	ite	cc
 8006378:	2301      	movcc	r3, #1
 800637a:	2300      	movcs	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800638a:	4413      	add	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006392:	429a      	cmp	r2, r3
 8006394:	bf34      	ite	cc
 8006396:	2301      	movcc	r3, #1
 8006398:	2300      	movcs	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4413      	add	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4413      	add	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	bf34      	ite	cc
 80063b8:	2301      	movcc	r3, #1
 80063ba:	2300      	movcs	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	677b      	str	r3, [r7, #116]	; 0x74
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1d1a      	adds	r2, r3, #4
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	623b      	str	r3, [r7, #32]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	3304      	adds	r3, #4
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f8:	fb02 f303 	mul.w	r3, r2, r3
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006402:	fb02 f303 	mul.w	r3, r2, r3
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800640c:	fb02 f303 	mul.w	r3, r2, r3
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	0c1b      	lsrs	r3, r3, #16
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4413      	add	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	041b      	lsls	r3, r3, #16
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	429a      	cmp	r2, r3
 8006440:	bf34      	ite	cc
 8006442:	2301      	movcc	r3, #1
 8006444:	2300      	movcs	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	429a      	cmp	r2, r3
 800645e:	bf34      	ite	cc
 8006460:	2301      	movcc	r3, #1
 8006462:	2300      	movcs	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006472:	4413      	add	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647a:	429a      	cmp	r2, r3
 800647c:	bf34      	ite	cc
 800647e:	2301      	movcc	r3, #1
 8006480:	2300      	movcs	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	4413      	add	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	4413      	add	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	429a      	cmp	r2, r3
 800649e:	bf34      	ite	cc
 80064a0:	2301      	movcc	r3, #1
 80064a2:	2300      	movcs	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4413      	add	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	677b      	str	r3, [r7, #116]	; 0x74
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	1d1a      	adds	r2, r3, #4
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	623b      	str	r3, [r7, #32]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	3304      	adds	r3, #4
 80064d0:	60bb      	str	r3, [r7, #8]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ea:	fb02 f303 	mul.w	r3, r2, r3
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	0c1b      	lsrs	r3, r3, #16
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4413      	add	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4413      	add	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	429a      	cmp	r2, r3
 8006528:	bf34      	ite	cc
 800652a:	2301      	movcc	r3, #1
 800652c:	2300      	movcs	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4413      	add	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	4413      	add	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	429a      	cmp	r2, r3
 8006546:	bf34      	ite	cc
 8006548:	2301      	movcc	r3, #1
 800654a:	2300      	movcs	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	4413      	add	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800655a:	4413      	add	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006562:	429a      	cmp	r2, r3
 8006564:	bf34      	ite	cc
 8006566:	2301      	movcc	r3, #1
 8006568:	2300      	movcs	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4413      	add	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	4413      	add	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	bf34      	ite	cc
 8006588:	2301      	movcc	r3, #1
 800658a:	2300      	movcs	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4413      	add	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	677b      	str	r3, [r7, #116]	; 0x74
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	1d1a      	adds	r2, r3, #4
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	0c1b      	lsrs	r3, r3, #16
 80065b2:	623b      	str	r3, [r7, #32]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	3304      	adds	r3, #4
 80065b8:	60bb      	str	r3, [r7, #8]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065be:	fb02 f303 	mul.w	r3, r2, r3
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	0c1b      	lsrs	r3, r3, #16
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4413      	add	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	0c1b      	lsrs	r3, r3, #16
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4413      	add	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	041b      	lsls	r3, r3, #16
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	429a      	cmp	r2, r3
 8006610:	bf34      	ite	cc
 8006612:	2301      	movcc	r3, #1
 8006614:	2300      	movcs	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	429a      	cmp	r2, r3
 800662e:	bf34      	ite	cc
 8006630:	2301      	movcc	r3, #1
 8006632:	2300      	movcs	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006642:	4413      	add	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800664a:	429a      	cmp	r2, r3
 800664c:	bf34      	ite	cc
 800664e:	2301      	movcc	r3, #1
 8006650:	2300      	movcs	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	4413      	add	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	429a      	cmp	r2, r3
 800666e:	bf34      	ite	cc
 8006670:	2301      	movcc	r3, #1
 8006672:	2300      	movcs	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	677b      	str	r3, [r7, #116]	; 0x74
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	1d1a      	adds	r2, r3, #4
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	0c1b      	lsrs	r3, r3, #16
 800669a:	623b      	str	r3, [r7, #32]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	3304      	adds	r3, #4
 80066a0:	60bb      	str	r3, [r7, #8]
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b0:	fb02 f303 	mul.w	r3, r2, r3
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ba:	fb02 f303 	mul.w	r3, r2, r3
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c4:	fb02 f303 	mul.w	r3, r2, r3
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	0c1b      	lsrs	r3, r3, #16
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4413      	add	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4413      	add	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	4413      	add	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	bf34      	ite	cc
 80066fa:	2301      	movcc	r3, #1
 80066fc:	2300      	movcs	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	4413      	add	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	429a      	cmp	r2, r3
 8006716:	bf34      	ite	cc
 8006718:	2301      	movcc	r3, #1
 800671a:	2300      	movcs	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672a:	4413      	add	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006732:	429a      	cmp	r2, r3
 8006734:	bf34      	ite	cc
 8006736:	2301      	movcc	r3, #1
 8006738:	2300      	movcs	r3, #0
 800673a:	b2db      	uxtb	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4413      	add	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	429a      	cmp	r2, r3
 8006756:	bf34      	ite	cc
 8006758:	2301      	movcc	r3, #1
 800675a:	2300      	movcs	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4413      	add	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	677b      	str	r3, [r7, #116]	; 0x74
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	1d1a      	adds	r2, r3, #4
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	0c1b      	lsrs	r3, r3, #16
 8006782:	623b      	str	r3, [r7, #32]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	3304      	adds	r3, #4
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006798:	fb02 f303 	mul.w	r3, r2, r3
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a2:	fb02 f303 	mul.w	r3, r2, r3
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4413      	add	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	0c1b      	lsrs	r3, r3, #16
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4413      	add	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	041b      	lsls	r3, r3, #16
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	429a      	cmp	r2, r3
 80067e0:	bf34      	ite	cc
 80067e2:	2301      	movcc	r3, #1
 80067e4:	2300      	movcs	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4413      	add	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	bf34      	ite	cc
 8006800:	2301      	movcc	r3, #1
 8006802:	2300      	movcs	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006812:	4413      	add	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800681a:	429a      	cmp	r2, r3
 800681c:	bf34      	ite	cc
 800681e:	2301      	movcc	r3, #1
 8006820:	2300      	movcs	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4413      	add	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	429a      	cmp	r2, r3
 800683e:	bf34      	ite	cc
 8006840:	2301      	movcc	r3, #1
 8006842:	2300      	movcs	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4413      	add	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	677b      	str	r3, [r7, #116]	; 0x74
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	1d1a      	adds	r2, r3, #4
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	623b      	str	r3, [r7, #32]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3304      	adds	r3, #4
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006876:	fb02 f303 	mul.w	r3, r2, r3
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006880:	fb02 f303 	mul.w	r3, r2, r3
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688a:	fb02 f303 	mul.w	r3, r2, r3
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	0c1b      	lsrs	r3, r3, #16
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	0c1b      	lsrs	r3, r3, #16
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	041b      	lsls	r3, r3, #16
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	041b      	lsls	r3, r3, #16
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	4413      	add	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	bf34      	ite	cc
 80068ca:	2301      	movcc	r3, #1
 80068cc:	2300      	movcs	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4413      	add	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	4413      	add	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	bf34      	ite	cc
 80068e8:	2301      	movcc	r3, #1
 80068ea:	2300      	movcs	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4413      	add	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068fa:	4413      	add	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006902:	429a      	cmp	r2, r3
 8006904:	bf34      	ite	cc
 8006906:	2301      	movcc	r3, #1
 8006908:	2300      	movcs	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4413      	add	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	4413      	add	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	bf34      	ite	cc
 8006928:	2301      	movcc	r3, #1
 800692a:	2300      	movcs	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4413      	add	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	677b      	str	r3, [r7, #116]	; 0x74
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	1d1a      	adds	r2, r3, #4
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	0c1b      	lsrs	r3, r3, #16
 8006952:	623b      	str	r3, [r7, #32]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	3304      	adds	r3, #4
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006968:	fb02 f303 	mul.w	r3, r2, r3
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800697c:	fb02 f303 	mul.w	r3, r2, r3
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	0c1b      	lsrs	r3, r3, #16
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4413      	add	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	61fb      	str	r3, [r7, #28]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	041b      	lsls	r3, r3, #16
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	bf34      	ite	cc
 80069b2:	2301      	movcc	r3, #1
 80069b4:	2300      	movcs	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4413      	add	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	4413      	add	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	bf34      	ite	cc
 80069d0:	2301      	movcc	r3, #1
 80069d2:	2300      	movcs	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e2:	4413      	add	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bf34      	ite	cc
 80069ee:	2301      	movcc	r3, #1
 80069f0:	2300      	movcs	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4413      	add	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4413      	add	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	bf34      	ite	cc
 8006a10:	2301      	movcc	r3, #1
 8006a12:	2300      	movcs	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	677b      	str	r3, [r7, #116]	; 0x74
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	1d1a      	adds	r2, r3, #4
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	623b      	str	r3, [r7, #32]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a64:	fb02 f303 	mul.w	r3, r2, r3
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	0c1b      	lsrs	r3, r3, #16
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4413      	add	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	0c1b      	lsrs	r3, r3, #16
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	041b      	lsls	r3, r3, #16
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	bf34      	ite	cc
 8006a9a:	2301      	movcc	r3, #1
 8006a9c:	2300      	movcs	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	4413      	add	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	bf34      	ite	cc
 8006ab8:	2301      	movcc	r3, #1
 8006aba:	2300      	movcs	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aca:	4413      	add	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	bf34      	ite	cc
 8006ad6:	2301      	movcc	r3, #1
 8006ad8:	2300      	movcs	r3, #0
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	4413      	add	r3, r2
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	bf34      	ite	cc
 8006af8:	2301      	movcc	r3, #1
 8006afa:	2300      	movcs	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	677b      	str	r3, [r7, #116]	; 0x74
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	601a      	str	r2, [r3, #0]
    for( ; i >= 16; i -= 16 )
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3b10      	subs	r3, #16
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b0f      	cmp	r3, #15
 8006b1e:	f63f a8b3 	bhi.w	8005c88 <mpi_mul_hlp+0x1a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8006b22:	e3a8      	b.n	8007276 <mpi_mul_hlp+0x1608>
    {
        MULADDC_INIT
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	64bb      	str	r3, [r7, #72]	; 0x48
        MULADDC_CORE   MULADDC_CORE
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	647b      	str	r3, [r7, #68]	; 0x44
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	3304      	adds	r3, #4
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b54:	fb02 f303 	mul.w	r3, r2, r3
 8006b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b5e:	fb02 f303 	mul.w	r3, r2, r3
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
 8006b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b68:	fb02 f303 	mul.w	r3, r2, r3
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b70:	0c1b      	lsrs	r3, r3, #16
 8006b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b74:	4413      	add	r3, r2
 8006b76:	633b      	str	r3, [r7, #48]	; 0x30
 8006b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7e:	4413      	add	r3, r2
 8006b80:	633b      	str	r3, [r7, #48]	; 0x30
 8006b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b84:	041b      	lsls	r3, r3, #16
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8a:	041b      	lsls	r3, r3, #16
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b92:	4413      	add	r3, r2
 8006b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	bf34      	ite	cc
 8006b9e:	2301      	movcc	r3, #1
 8006ba0:	2300      	movcs	r3, #0
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	4413      	add	r3, r2
 8006baa:	633b      	str	r3, [r7, #48]	; 0x30
 8006bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	4413      	add	r3, r2
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	bf34      	ite	cc
 8006bbc:	2301      	movcc	r3, #1
 8006bbe:	2300      	movcs	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	4413      	add	r3, r2
 8006bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bce:	4413      	add	r3, r2
 8006bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bf34      	ite	cc
 8006bda:	2301      	movcc	r3, #1
 8006bdc:	2300      	movcs	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	4413      	add	r3, r2
 8006be6:	633b      	str	r3, [r7, #48]	; 0x30
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bee:	4413      	add	r3, r2
 8006bf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	bf34      	ite	cc
 8006bfc:	2301      	movcc	r3, #1
 8006bfe:	2300      	movcs	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	4413      	add	r3, r2
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	677b      	str	r3, [r7, #116]	; 0x74
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	1d1a      	adds	r2, r3, #4
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	643b      	str	r3, [r7, #64]	; 0x40
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30
 8006c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c58:	0c1b      	lsrs	r3, r3, #16
 8006c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5c:	4413      	add	r3, r2
 8006c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c66:	4413      	add	r3, r2
 8006c68:	633b      	str	r3, [r7, #48]	; 0x30
 8006c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6c:	041b      	lsls	r3, r3, #16
 8006c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	041b      	lsls	r3, r3, #16
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
 8006c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7a:	4413      	add	r3, r2
 8006c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c82:	429a      	cmp	r2, r3
 8006c84:	bf34      	ite	cc
 8006c86:	2301      	movcc	r3, #1
 8006c88:	2300      	movcs	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	4413      	add	r3, r2
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
 8006c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c98:	4413      	add	r3, r2
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	bf34      	ite	cc
 8006ca4:	2301      	movcc	r3, #1
 8006ca6:	2300      	movcs	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	461a      	mov	r2, r3
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	4413      	add	r3, r2
 8006cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb6:	4413      	add	r3, r2
 8006cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	bf34      	ite	cc
 8006cc2:	2301      	movcc	r3, #1
 8006cc4:	2300      	movcs	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	4413      	add	r3, r2
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cd6:	4413      	add	r3, r2
 8006cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	bf34      	ite	cc
 8006ce4:	2301      	movcc	r3, #1
 8006ce6:	2300      	movcs	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	4413      	add	r3, r2
 8006cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	677b      	str	r3, [r7, #116]	; 0x74
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	1d1a      	adds	r2, r3, #4
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cfe:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	647b      	str	r3, [r7, #68]	; 0x44
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	3304      	adds	r3, #4
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d24:	fb02 f303 	mul.w	r3, r2, r3
 8006d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
 8006d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d40:	0c1b      	lsrs	r3, r3, #16
 8006d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d44:	4413      	add	r3, r2
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	0c1b      	lsrs	r3, r3, #16
 8006d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4e:	4413      	add	r3, r2
 8006d50:	633b      	str	r3, [r7, #48]	; 0x30
 8006d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d54:	041b      	lsls	r3, r3, #16
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	041b      	lsls	r3, r3, #16
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	4413      	add	r3, r2
 8006d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	bf34      	ite	cc
 8006d6e:	2301      	movcc	r3, #1
 8006d70:	2300      	movcs	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	4413      	add	r3, r2
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d80:	4413      	add	r3, r2
 8006d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	bf34      	ite	cc
 8006d8c:	2301      	movcc	r3, #1
 8006d8e:	2300      	movcs	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	4413      	add	r3, r2
 8006d98:	633b      	str	r3, [r7, #48]	; 0x30
 8006d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d9e:	4413      	add	r3, r2
 8006da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da6:	429a      	cmp	r2, r3
 8006da8:	bf34      	ite	cc
 8006daa:	2301      	movcc	r3, #1
 8006dac:	2300      	movcs	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	4413      	add	r3, r2
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dbe:	4413      	add	r3, r2
 8006dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	bf34      	ite	cc
 8006dcc:	2301      	movcc	r3, #1
 8006dce:	2300      	movcs	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	4413      	add	r3, r2
 8006dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	677b      	str	r3, [r7, #116]	; 0x74
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	1d1a      	adds	r2, r3, #4
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	647b      	str	r3, [r7, #68]	; 0x44
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	643b      	str	r3, [r7, #64]	; 0x40
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
 8006e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e16:	fb02 f303 	mul.w	r3, r2, r3
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e20:	fb02 f303 	mul.w	r3, r2, r3
 8006e24:	633b      	str	r3, [r7, #48]	; 0x30
 8006e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e28:	0c1b      	lsrs	r3, r3, #16
 8006e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2c:	4413      	add	r3, r2
 8006e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e32:	0c1b      	lsrs	r3, r3, #16
 8006e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e36:	4413      	add	r3, r2
 8006e38:	633b      	str	r3, [r7, #48]	; 0x30
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	041b      	lsls	r3, r3, #16
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e42:	041b      	lsls	r3, r3, #16
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
 8006e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4a:	4413      	add	r3, r2
 8006e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e52:	429a      	cmp	r2, r3
 8006e54:	bf34      	ite	cc
 8006e56:	2301      	movcc	r3, #1
 8006e58:	2300      	movcs	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	4413      	add	r3, r2
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30
 8006e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e68:	4413      	add	r3, r2
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	429a      	cmp	r2, r3
 8006e72:	bf34      	ite	cc
 8006e74:	2301      	movcc	r3, #1
 8006e76:	2300      	movcs	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	4413      	add	r3, r2
 8006e80:	633b      	str	r3, [r7, #48]	; 0x30
 8006e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e86:	4413      	add	r3, r2
 8006e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bf34      	ite	cc
 8006e92:	2301      	movcc	r3, #1
 8006e94:	2300      	movcs	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	4413      	add	r3, r2
 8006e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ea6:	4413      	add	r3, r2
 8006ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	bf34      	ite	cc
 8006eb4:	2301      	movcc	r3, #1
 8006eb6:	2300      	movcs	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	4413      	add	r3, r2
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	677b      	str	r3, [r7, #116]	; 0x74
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	1d1a      	adds	r2, r3, #4
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ece:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ef4:	fb02 f303 	mul.w	r3, r2, r3
 8006ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006efe:	fb02 f303 	mul.w	r3, r2, r3
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
 8006f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f08:	fb02 f303 	mul.w	r3, r2, r3
 8006f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f14:	4413      	add	r3, r2
 8006f16:	633b      	str	r3, [r7, #48]	; 0x30
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	0c1b      	lsrs	r3, r3, #16
 8006f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f1e:	4413      	add	r3, r2
 8006f20:	633b      	str	r3, [r7, #48]	; 0x30
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	041b      	lsls	r3, r3, #16
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f32:	4413      	add	r3, r2
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	bf34      	ite	cc
 8006f3e:	2301      	movcc	r3, #1
 8006f40:	2300      	movcs	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	4413      	add	r3, r2
 8006f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	4413      	add	r3, r2
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	bf34      	ite	cc
 8006f5c:	2301      	movcc	r3, #1
 8006f5e:	2300      	movcs	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	4413      	add	r3, r2
 8006f68:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f6e:	4413      	add	r3, r2
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f76:	429a      	cmp	r2, r3
 8006f78:	bf34      	ite	cc
 8006f7a:	2301      	movcc	r3, #1
 8006f7c:	2300      	movcs	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	4413      	add	r3, r2
 8006f86:	633b      	str	r3, [r7, #48]	; 0x30
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f8e:	4413      	add	r3, r2
 8006f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	bf34      	ite	cc
 8006f9c:	2301      	movcc	r3, #1
 8006f9e:	2300      	movcs	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	4413      	add	r3, r2
 8006fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	677b      	str	r3, [r7, #116]	; 0x74
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	1d1a      	adds	r2, r3, #4
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	0c1b      	lsrs	r3, r3, #16
 8006fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd2:	fb02 f303 	mul.w	r3, r2, r3
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fdc:	fb02 f303 	mul.w	r3, r2, r3
 8006fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
 8006fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff0:	fb02 f303 	mul.w	r3, r2, r3
 8006ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff8:	0c1b      	lsrs	r3, r3, #16
 8006ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffc:	4413      	add	r3, r2
 8006ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	0c1b      	lsrs	r3, r3, #16
 8007004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007006:	4413      	add	r3, r2
 8007008:	633b      	str	r3, [r7, #48]	; 0x30
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007012:	041b      	lsls	r3, r3, #16
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	4413      	add	r3, r2
 800701c:	63bb      	str	r3, [r7, #56]	; 0x38
 800701e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007022:	429a      	cmp	r2, r3
 8007024:	bf34      	ite	cc
 8007026:	2301      	movcc	r3, #1
 8007028:	2300      	movcs	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	4413      	add	r3, r2
 8007032:	633b      	str	r3, [r7, #48]	; 0x30
 8007034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007038:	4413      	add	r3, r2
 800703a:	63bb      	str	r3, [r7, #56]	; 0x38
 800703c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007040:	429a      	cmp	r2, r3
 8007042:	bf34      	ite	cc
 8007044:	2301      	movcc	r3, #1
 8007046:	2300      	movcs	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	4413      	add	r3, r2
 8007050:	633b      	str	r3, [r7, #48]	; 0x30
 8007052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007056:	4413      	add	r3, r2
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
 800705a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800705c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800705e:	429a      	cmp	r2, r3
 8007060:	bf34      	ite	cc
 8007062:	2301      	movcc	r3, #1
 8007064:	2300      	movcs	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	461a      	mov	r2, r3
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	4413      	add	r3, r2
 800706e:	633b      	str	r3, [r7, #48]	; 0x30
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007076:	4413      	add	r3, r2
 8007078:	63bb      	str	r3, [r7, #56]	; 0x38
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007080:	429a      	cmp	r2, r3
 8007082:	bf34      	ite	cc
 8007084:	2301      	movcc	r3, #1
 8007086:	2300      	movcs	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	4413      	add	r3, r2
 8007090:	633b      	str	r3, [r7, #48]	; 0x30
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	677b      	str	r3, [r7, #116]	; 0x74
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	1d1a      	adds	r2, r3, #4
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709e:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	647b      	str	r3, [r7, #68]	; 0x44
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	643b      	str	r3, [r7, #64]	; 0x40
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	3304      	adds	r3, #4
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
 80070d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	633b      	str	r3, [r7, #48]	; 0x30
 80070de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e0:	0c1b      	lsrs	r3, r3, #16
 80070e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e4:	4413      	add	r3, r2
 80070e6:	633b      	str	r3, [r7, #48]	; 0x30
 80070e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ea:	0c1b      	lsrs	r3, r3, #16
 80070ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ee:	4413      	add	r3, r2
 80070f0:	633b      	str	r3, [r7, #48]	; 0x30
 80070f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f4:	041b      	lsls	r3, r3, #16
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
 80070fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007102:	4413      	add	r3, r2
 8007104:	63bb      	str	r3, [r7, #56]	; 0x38
 8007106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710a:	429a      	cmp	r2, r3
 800710c:	bf34      	ite	cc
 800710e:	2301      	movcc	r3, #1
 8007110:	2300      	movcs	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	4413      	add	r3, r2
 800711a:	633b      	str	r3, [r7, #48]	; 0x30
 800711c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007120:	4413      	add	r3, r2
 8007122:	63bb      	str	r3, [r7, #56]	; 0x38
 8007124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007128:	429a      	cmp	r2, r3
 800712a:	bf34      	ite	cc
 800712c:	2301      	movcc	r3, #1
 800712e:	2300      	movcs	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	4413      	add	r3, r2
 8007138:	633b      	str	r3, [r7, #48]	; 0x30
 800713a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800713c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800713e:	4413      	add	r3, r2
 8007140:	63bb      	str	r3, [r7, #56]	; 0x38
 8007142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007146:	429a      	cmp	r2, r3
 8007148:	bf34      	ite	cc
 800714a:	2301      	movcc	r3, #1
 800714c:	2300      	movcs	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	4413      	add	r3, r2
 8007156:	633b      	str	r3, [r7, #48]	; 0x30
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800715e:	4413      	add	r3, r2
 8007160:	63bb      	str	r3, [r7, #56]	; 0x38
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007168:	429a      	cmp	r2, r3
 800716a:	bf34      	ite	cc
 800716c:	2301      	movcc	r3, #1
 800716e:	2300      	movcs	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	4413      	add	r3, r2
 8007178:	633b      	str	r3, [r7, #48]	; 0x30
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	677b      	str	r3, [r7, #116]	; 0x74
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	1d1a      	adds	r2, r3, #4
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	647b      	str	r3, [r7, #68]	; 0x44
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	643b      	str	r3, [r7, #64]	; 0x40
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	3304      	adds	r3, #4
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80071b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
 80071bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
 80071c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071cc:	4413      	add	r3, r2
 80071ce:	633b      	str	r3, [r7, #48]	; 0x30
 80071d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d6:	4413      	add	r3, r2
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
 80071da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e2:	041b      	lsls	r3, r3, #16
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
 80071e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ea:	4413      	add	r3, r2
 80071ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	429a      	cmp	r2, r3
 80071f4:	bf34      	ite	cc
 80071f6:	2301      	movcc	r3, #1
 80071f8:	2300      	movcs	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	4413      	add	r3, r2
 8007202:	633b      	str	r3, [r7, #48]	; 0x30
 8007204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	4413      	add	r3, r2
 800720a:	63bb      	str	r3, [r7, #56]	; 0x38
 800720c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	429a      	cmp	r2, r3
 8007212:	bf34      	ite	cc
 8007214:	2301      	movcc	r3, #1
 8007216:	2300      	movcs	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	4413      	add	r3, r2
 8007220:	633b      	str	r3, [r7, #48]	; 0x30
 8007222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007226:	4413      	add	r3, r2
 8007228:	63bb      	str	r3, [r7, #56]	; 0x38
 800722a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800722c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722e:	429a      	cmp	r2, r3
 8007230:	bf34      	ite	cc
 8007232:	2301      	movcc	r3, #1
 8007234:	2300      	movcs	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	4413      	add	r3, r2
 800723e:	633b      	str	r3, [r7, #48]	; 0x30
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007246:	4413      	add	r3, r2
 8007248:	63bb      	str	r3, [r7, #56]	; 0x38
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007250:	429a      	cmp	r2, r3
 8007252:	bf34      	ite	cc
 8007254:	2301      	movcc	r3, #1
 8007256:	2300      	movcs	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	4413      	add	r3, r2
 8007260:	633b      	str	r3, [r7, #48]	; 0x30
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	677b      	str	r3, [r7, #116]	; 0x74
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726e:	601a      	str	r2, [r3, #0]
    for( ; i >= 8; i -= 8 )
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3b08      	subs	r3, #8
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b07      	cmp	r3, #7
 800727a:	f63f ac53 	bhi.w	8006b24 <mpi_mul_hlp+0xeb6>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800727e:	e07c      	b.n	800737a <mpi_mul_hlp+0x170c>
    {
        MULADDC_INIT
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	66bb      	str	r3, [r7, #104]	; 0x68
        MULADDC_CORE
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	667b      	str	r3, [r7, #100]	; 0x64
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	663b      	str	r3, [r7, #96]	; 0x60
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	3304      	adds	r3, #4
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072b0:	fb02 f303 	mul.w	r3, r2, r3
 80072b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80072b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	657b      	str	r3, [r7, #84]	; 0x54
 80072c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072c4:	fb02 f303 	mul.w	r3, r2, r3
 80072c8:	653b      	str	r3, [r7, #80]	; 0x50
 80072ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072d0:	4413      	add	r3, r2
 80072d2:	653b      	str	r3, [r7, #80]	; 0x50
 80072d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072da:	4413      	add	r3, r2
 80072dc:	653b      	str	r3, [r7, #80]	; 0x50
 80072de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e6:	041b      	lsls	r3, r3, #16
 80072e8:	657b      	str	r3, [r7, #84]	; 0x54
 80072ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ee:	4413      	add	r3, r2
 80072f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80072f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	bf34      	ite	cc
 80072fa:	2301      	movcc	r3, #1
 80072fc:	2300      	movcs	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007304:	4413      	add	r3, r2
 8007306:	653b      	str	r3, [r7, #80]	; 0x50
 8007308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800730a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800730c:	4413      	add	r3, r2
 800730e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007314:	429a      	cmp	r2, r3
 8007316:	bf34      	ite	cc
 8007318:	2301      	movcc	r3, #1
 800731a:	2300      	movcs	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007322:	4413      	add	r3, r2
 8007324:	653b      	str	r3, [r7, #80]	; 0x50
 8007326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800732a:	4413      	add	r3, r2
 800732c:	65bb      	str	r3, [r7, #88]	; 0x58
 800732e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007332:	429a      	cmp	r2, r3
 8007334:	bf34      	ite	cc
 8007336:	2301      	movcc	r3, #1
 8007338:	2300      	movcs	r3, #0
 800733a:	b2db      	uxtb	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007340:	4413      	add	r3, r2
 8007342:	653b      	str	r3, [r7, #80]	; 0x50
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800734a:	4413      	add	r3, r2
 800734c:	65bb      	str	r3, [r7, #88]	; 0x58
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007354:	429a      	cmp	r2, r3
 8007356:	bf34      	ite	cc
 8007358:	2301      	movcc	r3, #1
 800735a:	2300      	movcs	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007362:	4413      	add	r3, r2
 8007364:	653b      	str	r3, [r7, #80]	; 0x50
 8007366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007368:	677b      	str	r3, [r7, #116]	; 0x74
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007372:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3b01      	subs	r3, #1
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f47f af7f 	bne.w	8007280 <mpi_mul_hlp+0x1612>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 8007382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007384:	3301      	adds	r3, #1
 8007386:	673b      	str	r3, [r7, #112]	; 0x70

    do {
        *d += c; c = ( *d < c ); d++;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738e:	441a      	add	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800739a:	429a      	cmp	r2, r3
 800739c:	bf8c      	ite	hi
 800739e:	2301      	movhi	r3, #1
 80073a0:	2300      	movls	r3, #0
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	677b      	str	r3, [r7, #116]	; 0x74
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	607b      	str	r3, [r7, #4]
    }
    while( c != 0 );
 80073ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1ea      	bne.n	8007388 <mpi_mul_hlp+0x171a>
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	377c      	adds	r7, #124	; 0x7c
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	; 0x38
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TA, TB;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 80073cc:	f107 0320 	add.w	r3, r7, #32
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fd f9df 	bl	8004794 <mbedtls_mpi_init>
 80073d6:	f107 0314 	add.w	r3, r7, #20
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fd f9da 	bl	8004794 <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d10c      	bne.n	8007402 <mbedtls_mpi_mul_mpi+0x42>
 80073e8:	f107 0320 	add.w	r3, r7, #32
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fd fab2 	bl	8004958 <mbedtls_mpi_copy>
 80073f4:	6378      	str	r0, [r7, #52]	; 0x34
 80073f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d17b      	bne.n	80074f4 <mbedtls_mpi_mul_mpi+0x134>
 80073fc:	f107 0320 	add.w	r3, r7, #32
 8007400:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d10c      	bne.n	8007424 <mbedtls_mpi_mul_mpi+0x64>
 800740a:	f107 0314 	add.w	r3, r7, #20
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	4618      	mov	r0, r3
 8007412:	f7fd faa1 	bl	8004958 <mbedtls_mpi_copy>
 8007416:	6378      	str	r0, [r7, #52]	; 0x34
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	2b00      	cmp	r3, #0
 800741c:	d16c      	bne.n	80074f8 <mbedtls_mpi_mul_mpi+0x138>
 800741e:	f107 0314 	add.w	r3, r7, #20
 8007422:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	633b      	str	r3, [r7, #48]	; 0x30
 800742a:	e00d      	b.n	8007448 <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007436:	3b01      	subs	r3, #1
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	3b01      	subs	r3, #1
 8007446:	633b      	str	r3, [r7, #48]	; 0x30
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1ee      	bne.n	800742c <mbedtls_mpi_mul_mpi+0x6c>
 800744e:	e000      	b.n	8007452 <mbedtls_mpi_mul_mpi+0x92>
            break;
 8007450:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007458:	e00d      	b.n	8007476 <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007464:	3b01      	subs	r3, #1
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	3b01      	subs	r3, #1
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1ee      	bne.n	800745a <mbedtls_mpi_mul_mpi+0x9a>
 800747c:	e000      	b.n	8007480 <mbedtls_mpi_mul_mpi+0xc0>
            break;
 800747e:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8007480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	4413      	add	r3, r2
 8007486:	4619      	mov	r1, r3
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7fd f9bc 	bl	8004806 <mbedtls_mpi_grow>
 800748e:	6378      	str	r0, [r7, #52]	; 0x34
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	2b00      	cmp	r3, #0
 8007494:	d132      	bne.n	80074fc <mbedtls_mpi_mul_mpi+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8007496:	2100      	movs	r1, #0
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7fd fbc0 	bl	8004c1e <mbedtls_mpi_lset>
 800749e:	6378      	str	r0, [r7, #52]	; 0x34
 80074a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d12c      	bne.n	8007500 <mbedtls_mpi_mul_mpi+0x140>

    for( ; j > 0; j-- )
 80074a6:	e019      	b.n	80074dc <mbedtls_mpi_mul_mpi+0x11c>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6899      	ldr	r1, [r3, #8]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074b6:	3b01      	subs	r3, #1
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	18d0      	adds	r0, r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074c6:	3b01      	subs	r3, #1
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4602      	mov	r2, r0
 80074d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d2:	f7fe fbcc 	bl	8005c6e <mpi_mul_hlp>
    for( ; j > 0; j-- )
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	3b01      	subs	r3, #1
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e2      	bne.n	80074a8 <mbedtls_mpi_mul_mpi+0xe8>

    X->s = A->s * B->s;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	fb03 f202 	mul.w	r2, r3, r2
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e006      	b.n	8007502 <mbedtls_mpi_mul_mpi+0x142>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80074f4:	bf00      	nop
 80074f6:	e004      	b.n	8007502 <mbedtls_mpi_mul_mpi+0x142>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 80074f8:	bf00      	nop
 80074fa:	e002      	b.n	8007502 <mbedtls_mpi_mul_mpi+0x142>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <mbedtls_mpi_mul_mpi+0x142>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8007500:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8007502:	f107 0314 	add.w	r3, r7, #20
 8007506:	4618      	mov	r0, r3
 8007508:	f7fd f957 	bl	80047ba <mbedtls_mpi_free>
 800750c:	f107 0320 	add.w	r3, r7, #32
 8007510:	4618      	mov	r0, r3
 8007512:	f7fd f952 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007518:	4618      	mov	r0, r3
 800751a:	3738      	adds	r7, #56	; 0x38
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 800752c:	2301      	movs	r3, #1
 800752e:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8007530:	2301      	movs	r3, #1
 8007532:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8007534:	f107 0310 	add.w	r3, r7, #16
 8007538:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800753e:	f107 0314 	add.w	r3, r7, #20
 8007542:	461a      	mov	r2, r3
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff ff3a 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800754c:	4603      	mov	r3, r0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b090      	sub	sp, #64	; 0x40
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_HAVE_UDBL)
    mbedtls_t_udbl dividend, quotient;
#else
    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
 8007564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007568:	633b      	str	r3, [r7, #48]	; 0x30
    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
 800756a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800756e:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <mbedtls_int_div_int+0x28>
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	429a      	cmp	r2, r3
 800757c:	d309      	bcc.n	8007592 <mbedtls_int_div_int+0x3c>
    {
        if (r != NULL) *r = ~0;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <mbedtls_int_div_int+0x36>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	f04f 32ff 	mov.w	r2, #4294967295
 800758a:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 800758c:	f04f 33ff 	mov.w	r3, #4294967295
 8007590:	e0a7      	b.n	80076e2 <mbedtls_int_div_int+0x18c>
     */

    /*
     * Normalize the divisor, d, and dividend, u0, u1
     */
    s = mbedtls_clz( d );
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fd fc1c 	bl	8004dd0 <mbedtls_clz>
 8007598:	62b8      	str	r0, [r7, #40]	; 0x28
    d = d << s;
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	607b      	str	r3, [r7, #4]

    u1 = u1 << s;
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	60fb      	str	r3, [r7, #12]
    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	f1c3 0320 	rsb	r3, r3, #32
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075bc:	4252      	negs	r2, r2
 80075be:	17d2      	asrs	r2, r2, #31
 80075c0:	4013      	ands	r3, r2
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
    u0 =  u0 << s;
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	60bb      	str	r3, [r7, #8]

    d1 = d >> biH;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
    d0 = d & uint_halfword_mask;
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	4013      	ands	r3, r2
 80075de:	623b      	str	r3, [r7, #32]

    u0_msw = u0 >> biH;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	61fb      	str	r3, [r7, #28]
    u0_lsw = u0 & uint_halfword_mask;
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	4013      	ands	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]

    /*
     * Find the first quotient and remainder
     */
    q1 = u1 / d1;
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f6:	63bb      	str	r3, [r7, #56]	; 0x38
    r0 = u1 - d1 * q1;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	637b      	str	r3, [r7, #52]	; 0x34

    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 8007606:	e00a      	b.n	800761e <mbedtls_int_div_int+0xc8>
    {
        q1 -= 1;
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	3b01      	subs	r3, #1
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38
        r0 += d1;
 800760e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	4413      	add	r3, r2
 8007614:	637b      	str	r3, [r7, #52]	; 0x34

        if ( r0 >= radix ) break;
 8007616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	429a      	cmp	r2, r3
 800761c:	d210      	bcs.n	8007640 <mbedtls_int_div_int+0xea>
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 800761e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	429a      	cmp	r2, r3
 8007624:	d2f0      	bcs.n	8007608 <mbedtls_int_div_int+0xb2>
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	6a3a      	ldr	r2, [r7, #32]
 800762a:	fb03 f202 	mul.w	r2, r3, r2
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007632:	fb03 f101 	mul.w	r1, r3, r1
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	440b      	add	r3, r1
 800763a:	429a      	cmp	r2, r3
 800763c:	d8e4      	bhi.n	8007608 <mbedtls_int_div_int+0xb2>
 800763e:	e000      	b.n	8007642 <mbedtls_int_div_int+0xec>
        if ( r0 >= radix ) break;
 8007640:	bf00      	nop
    }

    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007646:	fb03 f202 	mul.w	r2, r3, r2
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	617b      	str	r3, [r7, #20]
    q0 = rAX / d1;
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007662:	63fb      	str	r3, [r7, #60]	; 0x3c
    r0 = rAX - q0 * d1;
 8007664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007668:	fb02 f303 	mul.w	r3, r2, r3
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	637b      	str	r3, [r7, #52]	; 0x34

    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 8007672:	e00a      	b.n	800768a <mbedtls_int_div_int+0x134>
    {
        q0 -= 1;
 8007674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007676:	3b01      	subs	r3, #1
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
        r0 += d1;
 800767a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	4413      	add	r3, r2
 8007680:	637b      	str	r3, [r7, #52]	; 0x34

        if ( r0 >= radix ) break;
 8007682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	429a      	cmp	r2, r3
 8007688:	d210      	bcs.n	80076ac <mbedtls_int_div_int+0x156>
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 800768a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	429a      	cmp	r2, r3
 8007690:	d2f0      	bcs.n	8007674 <mbedtls_int_div_int+0x11e>
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	6a3a      	ldr	r2, [r7, #32]
 8007696:	fb03 f202 	mul.w	r2, r3, r2
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800769e:	fb03 f101 	mul.w	r1, r3, r1
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	440b      	add	r3, r1
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d8e4      	bhi.n	8007674 <mbedtls_int_div_int+0x11e>
 80076aa:	e000      	b.n	80076ae <mbedtls_int_div_int+0x158>
        if ( r0 >= radix ) break;
 80076ac:	bf00      	nop
    }

    if (r != NULL)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <mbedtls_int_div_int+0x17c>
        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b8:	fb03 f202 	mul.w	r2, r3, r2
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	441a      	add	r2, r3
 80076c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	1ad2      	subs	r2, r2, r3
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	40da      	lsrs	r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	601a      	str	r2, [r3, #0]

    quotient = q1 * radix + q0;
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076dc:	4413      	add	r3, r2
 80076de:	613b      	str	r3, [r7, #16]

    return quotient;
 80076e0:	693b      	ldr	r3, [r7, #16]
#endif
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3740      	adds	r7, #64	; 0x40
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 80076ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ec:	b099      	sub	sp, #100	; 0x64
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
 80076f6:	603b      	str	r3, [r7, #0]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80076f8:	2100      	movs	r1, #0
 80076fa:	6838      	ldr	r0, [r7, #0]
 80076fc:	f7fe f847 	bl	800578e <mbedtls_mpi_cmp_int>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 8007706:	f06f 030b 	mvn.w	r3, #11
 800770a:	e2bd      	b.n	8007c88 <mbedtls_mpi_div_mpi+0x59e>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800770c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007710:	4618      	mov	r0, r3
 8007712:	f7fd f83f 	bl	8004794 <mbedtls_mpi_init>
 8007716:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800771a:	4618      	mov	r0, r3
 800771c:	f7fd f83a 	bl	8004794 <mbedtls_mpi_init>
 8007720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007724:	4618      	mov	r0, r3
 8007726:	f7fd f835 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 800772a:	f107 031c 	add.w	r3, r7, #28
 800772e:	4618      	mov	r0, r3
 8007730:	f7fd f830 	bl	8004794 <mbedtls_mpi_init>
 8007734:	f107 0310 	add.w	r3, r7, #16
 8007738:	4618      	mov	r0, r3
 800773a:	f7fd f82b 	bl	8004794 <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7fd ff07 	bl	8005554 <mbedtls_mpi_cmp_abs>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	da19      	bge.n	8007780 <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d008      	beq.n	8007764 <mbedtls_mpi_div_mpi+0x7a>
 8007752:	2100      	movs	r1, #0
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f7fd fa62 	bl	8004c1e <mbedtls_mpi_lset>
 800775a:	65f8      	str	r0, [r7, #92]	; 0x5c
 800775c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 8247 	bne.w	8007bf2 <mbedtls_mpi_div_mpi+0x508>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d008      	beq.n	800777c <mbedtls_mpi_div_mpi+0x92>
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	68b8      	ldr	r0, [r7, #8]
 800776e:	f7fd f8f3 	bl	8004958 <mbedtls_mpi_copy>
 8007772:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 823d 	bne.w	8007bf6 <mbedtls_mpi_div_mpi+0x50c>
        return( 0 );
 800777c:	2300      	movs	r3, #0
 800777e:	e283      	b.n	8007c88 <mbedtls_mpi_div_mpi+0x59e>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8007780:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	4618      	mov	r0, r3
 8007788:	f7fd f8e6 	bl	8004958 <mbedtls_mpi_copy>
 800778c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800778e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007790:	2b00      	cmp	r3, #0
 8007792:	f040 8232 	bne.w	8007bfa <mbedtls_mpi_div_mpi+0x510>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8007796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f7fd f8db 	bl	8004958 <mbedtls_mpi_copy>
 80077a2:	65f8      	str	r0, [r7, #92]	; 0x5c
 80077a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f040 8229 	bne.w	8007bfe <mbedtls_mpi_div_mpi+0x514>
    X.s = Y.s = 1;
 80077ac:	2301      	movs	r3, #1
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
 80077b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b2:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	1c9a      	adds	r2, r3, #2
 80077ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fd f820 	bl	8004806 <mbedtls_mpi_grow>
 80077c6:	65f8      	str	r0, [r7, #92]	; 0x5c
 80077c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f040 8219 	bne.w	8007c02 <mbedtls_mpi_div_mpi+0x518>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 80077d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077d4:	2100      	movs	r1, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fd fa21 	bl	8004c1e <mbedtls_mpi_lset>
 80077dc:	65f8      	str	r0, [r7, #92]	; 0x5c
 80077de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 8210 	bne.w	8007c06 <mbedtls_mpi_div_mpi+0x51c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 80077e6:	f107 031c 	add.w	r3, r7, #28
 80077ea:	2102      	movs	r1, #2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fd f80a 	bl	8004806 <mbedtls_mpi_grow>
 80077f2:	65f8      	str	r0, [r7, #92]	; 0x5c
 80077f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 8207 	bne.w	8007c0a <mbedtls_mpi_div_mpi+0x520>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 80077fc:	f107 0310 	add.w	r3, r7, #16
 8007800:	2103      	movs	r1, #3
 8007802:	4618      	mov	r0, r3
 8007804:	f7fc ffff 	bl	8004806 <mbedtls_mpi_grow>
 8007808:	65f8      	str	r0, [r7, #92]	; 0x5c
 800780a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 81fe 	bne.w	8007c0e <mbedtls_mpi_div_mpi+0x524>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 8007812:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd fafb 	bl	8004e12 <mbedtls_mpi_bitlen>
 800781c:	4603      	mov	r3, r0
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	657b      	str	r3, [r7, #84]	; 0x54
    if( k < biL - 1 )
 8007824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007826:	2b1e      	cmp	r3, #30
 8007828:	d819      	bhi.n	800785e <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 800782a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800782c:	f1c3 031f 	rsb	r3, r3, #31
 8007830:	657b      	str	r3, [r7, #84]	; 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8007832:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007836:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007838:	4618      	mov	r0, r3
 800783a:	f7fd fd4b 	bl	80052d4 <mbedtls_mpi_shift_l>
 800783e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 81e5 	bne.w	8007c12 <mbedtls_mpi_div_mpi+0x528>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 8007848:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800784c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800784e:	4618      	mov	r0, r3
 8007850:	f7fd fd40 	bl	80052d4 <mbedtls_mpi_shift_l>
 8007854:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <mbedtls_mpi_div_mpi+0x178>
 800785c:	e1fa      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    }
    else k = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	657b      	str	r3, [r7, #84]	; 0x54

    n = X.n - 1;
 8007862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007864:	3b01      	subs	r3, #1
 8007866:	653b      	str	r3, [r7, #80]	; 0x50
    t = Y.n - 1;
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	3b01      	subs	r3, #1
 800786c:	64fb      	str	r3, [r7, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800786e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f7fd fd29 	bl	80052d4 <mbedtls_mpi_shift_l>
 8007882:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 81c5 	bne.w	8007c16 <mbedtls_mpi_div_mpi+0x52c>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800788c:	e016      	b.n	80078bc <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 800788e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007890:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007894:	1acb      	subs	r3, r1, r3
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	3201      	adds	r2, #1
 800789e:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 80078a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80078a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80078a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe f94c 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 80078b2:	65f8      	str	r0, [r7, #92]	; 0x5c
 80078b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 81af 	bne.w	8007c1a <mbedtls_mpi_div_mpi+0x530>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 80078bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80078c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078c4:	4611      	mov	r1, r2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fd fec6 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dadd      	bge.n	800788e <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 80078d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fd fd9c 	bl	800541e <mbedtls_mpi_shift_r>
 80078e6:	65f8      	str	r0, [r7, #92]	; 0x5c
 80078e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 8197 	bne.w	8007c1e <mbedtls_mpi_div_mpi+0x534>

    for( i = n; i > t ; i-- )
 80078f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80078f4:	e13e      	b.n	8007b74 <mbedtls_mpi_div_mpi+0x48a>
    {
        if( X.p[i] >= Y.p[t] )
 80078f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d30c      	bcc.n	8007928 <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 800790e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007910:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	1acb      	subs	r3, r1, r3
 8007916:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800791a:	3b01      	subs	r3, #1
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	f04f 32ff 	mov.w	r2, #4294967295
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	e021      	b.n	800796c <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8007928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800792a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007936:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800793a:	3b01      	subs	r3, #1
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 8007942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800794a:	681e      	ldr	r6, [r3, #0]
 800794c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800794e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007952:	1acb      	subs	r3, r1, r3
 8007954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007958:	3b01      	subs	r3, #1
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	18d4      	adds	r4, r2, r3
 800795e:	2300      	movs	r3, #0
 8007960:	4632      	mov	r2, r6
 8007962:	4629      	mov	r1, r5
 8007964:	f7ff fdf7 	bl	8007556 <mbedtls_int_div_int>
 8007968:	4603      	mov	r3, r0
 800796a:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 800796c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007972:	1acb      	subs	r3, r1, r3
 8007974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007978:	3b01      	subs	r3, #1
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	3201      	adds	r2, #1
 8007982:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 8007984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800798a:	1acb      	subs	r3, r1, r3
 800798c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007990:	3b01      	subs	r3, #1
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	3a01      	subs	r2, #1
 800799a:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800799c:	f107 031c 	add.w	r3, r7, #28
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fd f93b 	bl	8004c1e <mbedtls_mpi_lset>
 80079a8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80079aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f040 8138 	bne.w	8007c22 <mbedtls_mpi_div_mpi+0x538>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80079b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <mbedtls_mpi_div_mpi+0x2e0>
 80079b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079c0:	3b01      	subs	r3, #1
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	e000      	b.n	80079cc <mbedtls_mpi_div_mpi+0x2e2>
 80079ca:	2300      	movs	r3, #0
 80079cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ce:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 80079d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	441a      	add	r2, r3
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	3304      	adds	r3, #4
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80079e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e6:	1acb      	subs	r3, r1, r3
 80079e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079ec:	3b01      	subs	r3, #1
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	f107 011c 	add.w	r1, r7, #28
 80079f8:	f107 031c 	add.w	r3, r7, #28
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff fd8f 	bl	8007520 <mbedtls_mpi_mul_int>
 8007a02:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f040 810d 	bne.w	8007c26 <mbedtls_mpi_div_mpi+0x53c>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8007a0c:	f107 0310 	add.w	r3, r7, #16
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fd f903 	bl	8004c1e <mbedtls_mpi_lset>
 8007a18:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f040 8104 	bne.w	8007c2a <mbedtls_mpi_div_mpi+0x540>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8007a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d908      	bls.n	8007a3a <mbedtls_mpi_div_mpi+0x350>
 8007a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a30:	3b02      	subs	r3, #2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	e000      	b.n	8007a3c <mbedtls_mpi_div_mpi+0x352>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8007a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <mbedtls_mpi_div_mpi+0x36e>
 8007a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	e000      	b.n	8007a5a <mbedtls_mpi_div_mpi+0x370>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	3204      	adds	r2, #4
 8007a5e:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 8007a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	441a      	add	r2, r3
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	6812      	ldr	r2, [r2, #0]
 8007a6e:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 8007a70:	f107 0210 	add.w	r2, r7, #16
 8007a74:	f107 031c 	add.w	r3, r7, #28
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd fdec 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f73f af7e 	bgt.w	8007984 <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8007a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8e:	1acb      	subs	r3, r1, r3
 8007a90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a94:	3b01      	subs	r3, #1
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8007aa0:	f107 031c 	add.w	r3, r7, #28
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff fd3b 	bl	8007520 <mbedtls_mpi_mul_int>
 8007aaa:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 80bd 	bne.w	8007c2e <mbedtls_mpi_div_mpi+0x544>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8007ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	f107 031c 	add.w	r3, r7, #28
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd fc05 	bl	80052d4 <mbedtls_mpi_shift_l>
 8007aca:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 80af 	bne.w	8007c32 <mbedtls_mpi_div_mpi+0x548>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8007ad4:	f107 021c 	add.w	r2, r7, #28
 8007ad8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007adc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fe f832 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8007ae6:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 80a3 	bne.w	8007c36 <mbedtls_mpi_div_mpi+0x54c>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8007af0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007af4:	2100      	movs	r1, #0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fd fe49 	bl	800578e <mbedtls_mpi_cmp_int>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da35      	bge.n	8007b6e <mbedtls_mpi_div_mpi+0x484>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8007b02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007b06:	f107 031c 	add.w	r3, r7, #28
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fc ff23 	bl	8004958 <mbedtls_mpi_copy>
 8007b12:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f040 808f 	bne.w	8007c3a <mbedtls_mpi_div_mpi+0x550>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8007b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	f107 031c 	add.w	r3, r7, #28
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fd fbd1 	bl	80052d4 <mbedtls_mpi_shift_l>
 8007b32:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 8081 	bne.w	8007c3e <mbedtls_mpi_div_mpi+0x554>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8007b3c:	f107 021c 	add.w	r2, r7, #28
 8007b40:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007b44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd ffb4 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8007b4e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d175      	bne.n	8007c42 <mbedtls_mpi_div_mpi+0x558>
            Z.p[i - t - 1]--;
 8007b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b5c:	1acb      	subs	r3, r1, r3
 8007b5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b62:	3b01      	subs	r3, #1
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	3a01      	subs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 8007b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b70:	3b01      	subs	r3, #1
 8007b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	f63f aebc 	bhi.w	80078f6 <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d011      	beq.n	8007ba8 <mbedtls_mpi_div_mpi+0x4be>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8007b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b88:	4619      	mov	r1, r3
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7fc fee4 	bl	8004958 <mbedtls_mpi_copy>
 8007b90:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d156      	bne.n	8007c46 <mbedtls_mpi_div_mpi+0x55c>
        Q->s = A->s * B->s;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	fb03 f202 	mul.w	r2, r3, r2
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d04d      	beq.n	8007c4a <mbedtls_mpi_div_mpi+0x560>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 8007bae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fd fc32 	bl	800541e <mbedtls_mpi_shift_r>
 8007bba:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d145      	bne.n	8007c4e <mbedtls_mpi_div_mpi+0x564>
        X.s = A->s;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	643b      	str	r3, [r7, #64]	; 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8007bc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bcc:	4619      	mov	r1, r3
 8007bce:	68b8      	ldr	r0, [r7, #8]
 8007bd0:	f7fc fec2 	bl	8004958 <mbedtls_mpi_copy>
 8007bd4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d13a      	bne.n	8007c52 <mbedtls_mpi_div_mpi+0x568>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68b8      	ldr	r0, [r7, #8]
 8007be0:	f7fd fdd5 	bl	800578e <mbedtls_mpi_cmp_int>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d12f      	bne.n	8007c4a <mbedtls_mpi_div_mpi+0x560>
            R->s = 1;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2201      	movs	r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	e030      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8007bf2:	bf00      	nop
 8007bf4:	e02e      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8007bf6:	bf00      	nop
 8007bf8:	e02c      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8007bfa:	bf00      	nop
 8007bfc:	e02a      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8007bfe:	bf00      	nop
 8007c00:	e028      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8007c02:	bf00      	nop
 8007c04:	e026      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8007c06:	bf00      	nop
 8007c08:	e024      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8007c0a:	bf00      	nop
 8007c0c:	e022      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8007c0e:	bf00      	nop
 8007c10:	e020      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8007c12:	bf00      	nop
 8007c14:	e01e      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8007c16:	bf00      	nop
 8007c18:	e01c      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8007c1a:	bf00      	nop
 8007c1c:	e01a      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8007c1e:	bf00      	nop
 8007c20:	e018      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8007c22:	bf00      	nop
 8007c24:	e016      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8007c26:	bf00      	nop
 8007c28:	e014      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8007c2a:	bf00      	nop
 8007c2c:	e012      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8007c2e:	bf00      	nop
 8007c30:	e010      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8007c32:	bf00      	nop
 8007c34:	e00e      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8007c36:	bf00      	nop
 8007c38:	e00c      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8007c3a:	bf00      	nop
 8007c3c:	e00a      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8007c3e:	bf00      	nop
 8007c40:	e008      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8007c42:	bf00      	nop
 8007c44:	e006      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8007c46:	bf00      	nop
 8007c48:	e004      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
    }

cleanup:
 8007c4a:	bf00      	nop
 8007c4c:	e002      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 8007c4e:	bf00      	nop
 8007c50:	e000      	b.n	8007c54 <mbedtls_mpi_div_mpi+0x56a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8007c52:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8007c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fc fdae 	bl	80047ba <mbedtls_mpi_free>
 8007c5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc fda9 	bl	80047ba <mbedtls_mpi_free>
 8007c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fc fda4 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8007c72:	f107 031c 	add.w	r3, r7, #28
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fc fd9f 	bl	80047ba <mbedtls_mpi_free>
 8007c7c:	f107 0310 	add.w	r3, r7, #16
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fc fd9a 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 8007c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3764      	adds	r7, #100	; 0x64
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c90 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fd fd75 	bl	800578e <mbedtls_mpi_cmp_int>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	da02      	bge.n	8007cb0 <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8007caa:	f06f 0309 	mvn.w	r3, #9
 8007cae:	e032      	b.n	8007d16 <mbedtls_mpi_mod_mpi+0x86>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	68f9      	ldr	r1, [r7, #12]
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	f7ff fd17 	bl	80076ea <mbedtls_mpi_div_mpi>
 8007cbc:	6178      	str	r0, [r7, #20]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d122      	bne.n	8007d0a <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8007cc4:	e008      	b.n	8007cd8 <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68f9      	ldr	r1, [r7, #12]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7fd fef3 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8007cd0:	6178      	str	r0, [r7, #20]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d11a      	bne.n	8007d0e <mbedtls_mpi_mod_mpi+0x7e>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8007cd8:	2100      	movs	r1, #0
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7fd fd57 	bl	800578e <mbedtls_mpi_cmp_int>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dbef      	blt.n	8007cc6 <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8007ce6:	e008      	b.n	8007cfa <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	68f9      	ldr	r1, [r7, #12]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7fd ff2c 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8007cf2:	6178      	str	r0, [r7, #20]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10b      	bne.n	8007d12 <mbedtls_mpi_mod_mpi+0x82>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7fd fcab 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	daef      	bge.n	8007ce8 <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 8007d08:	e004      	b.n	8007d14 <mbedtls_mpi_mod_mpi+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8007d0a:	bf00      	nop
 8007d0c:	e002      	b.n	8007d14 <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8007d0e:	bf00      	nop
 8007d10:	e000      	b.n	8007d14 <mbedtls_mpi_mod_mpi+0x84>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8007d12:	bf00      	nop

    return( ret );
 8007d14:	697b      	ldr	r3, [r7, #20]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b090      	sub	sp, #64	; 0x40
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]

    MPI_VALIDATE_RET( G != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 8007d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fc fd30 	bl	8004794 <mbedtls_mpi_init>
 8007d34:	f107 031c 	add.w	r3, r7, #28
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fc fd2b 	bl	8004794 <mbedtls_mpi_init>
 8007d3e:	f107 0310 	add.w	r3, r7, #16
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fc fd26 	bl	8004794 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8007d48:	f107 031c 	add.w	r3, r7, #28
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fc fe02 	bl	8004958 <mbedtls_mpi_copy>
 8007d54:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f040 80af 	bne.w	8007ebc <mbedtls_mpi_gcd+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8007d5e:	f107 0310 	add.w	r3, r7, #16
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fc fdf7 	bl	8004958 <mbedtls_mpi_copy>
 8007d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f040 80a6 	bne.w	8007ec0 <mbedtls_mpi_gcd+0x1a2>

    lz = mbedtls_mpi_lsb( &TA );
 8007d74:	f107 031c 	add.w	r3, r7, #28
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fc fff6 	bl	8004d6a <mbedtls_mpi_lsb>
 8007d7e:	63b8      	str	r0, [r7, #56]	; 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fc fff0 	bl	8004d6a <mbedtls_mpi_lsb>
 8007d8a:	6378      	str	r0, [r7, #52]	; 0x34

    if( lzt < lz )
 8007d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d201      	bcs.n	8007d98 <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 8007d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d96:	63bb      	str	r3, [r7, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8007d98:	f107 031c 	add.w	r3, r7, #28
 8007d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd fb3d 	bl	800541e <mbedtls_mpi_shift_r>
 8007da4:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f040 808b 	bne.w	8007ec4 <mbedtls_mpi_gcd+0x1a6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8007dae:	f107 0310 	add.w	r3, r7, #16
 8007db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fd fb32 	bl	800541e <mbedtls_mpi_shift_r>
 8007dba:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f040 8082 	bne.w	8007ec8 <mbedtls_mpi_gcd+0x1aa>

    TA.s = TB.s = 1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8007dcc:	e059      	b.n	8007e82 <mbedtls_mpi_gcd+0x164>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8007dce:	f107 031c 	add.w	r3, r7, #28
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fc ffc9 	bl	8004d6a <mbedtls_mpi_lsb>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	f107 031c 	add.w	r3, r7, #28
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fd fb1c 	bl	800541e <mbedtls_mpi_shift_r>
 8007de6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d16e      	bne.n	8007ecc <mbedtls_mpi_gcd+0x1ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8007dee:	f107 0310 	add.w	r3, r7, #16
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fc ffb9 	bl	8004d6a <mbedtls_mpi_lsb>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	f107 0310 	add.w	r3, r7, #16
 8007dfe:	4611      	mov	r1, r2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fd fb0c 	bl	800541e <mbedtls_mpi_shift_r>
 8007e06:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d160      	bne.n	8007ed0 <mbedtls_mpi_gcd+0x1b2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 8007e0e:	f107 0210 	add.w	r2, r7, #16
 8007e12:	f107 031c 	add.w	r3, r7, #28
 8007e16:	4611      	mov	r1, r2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fd fc1d 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	db17      	blt.n	8007e54 <mbedtls_mpi_gcd+0x136>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8007e24:	f107 0210 	add.w	r2, r7, #16
 8007e28:	f107 011c 	add.w	r1, r7, #28
 8007e2c:	f107 031c 	add.w	r3, r7, #28
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fd fddc 	bl	80059ee <mbedtls_mpi_sub_abs>
 8007e36:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d14a      	bne.n	8007ed4 <mbedtls_mpi_gcd+0x1b6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 8007e3e:	f107 031c 	add.w	r3, r7, #28
 8007e42:	2101      	movs	r1, #1
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fd faea 	bl	800541e <mbedtls_mpi_shift_r>
 8007e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d017      	beq.n	8007e82 <mbedtls_mpi_gcd+0x164>
 8007e52:	e046      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8007e54:	f107 021c 	add.w	r2, r7, #28
 8007e58:	f107 0110 	add.w	r1, r7, #16
 8007e5c:	f107 0310 	add.w	r3, r7, #16
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fd fdc4 	bl	80059ee <mbedtls_mpi_sub_abs>
 8007e66:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d134      	bne.n	8007ed8 <mbedtls_mpi_gcd+0x1ba>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8007e6e:	f107 0310 	add.w	r3, r7, #16
 8007e72:	2101      	movs	r1, #1
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fd fad2 	bl	800541e <mbedtls_mpi_shift_r>
 8007e7a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d12c      	bne.n	8007edc <mbedtls_mpi_gcd+0x1be>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8007e82:	f107 031c 	add.w	r3, r7, #28
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fd fc80 	bl	800578e <mbedtls_mpi_cmp_int>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d19c      	bne.n	8007dce <mbedtls_mpi_gcd+0xb0>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8007e94:	f107 0310 	add.w	r3, r7, #16
 8007e98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fd fa1a 	bl	80052d4 <mbedtls_mpi_shift_l>
 8007ea0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11b      	bne.n	8007ee0 <mbedtls_mpi_gcd+0x1c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8007ea8:	f107 0310 	add.w	r3, r7, #16
 8007eac:	4619      	mov	r1, r3
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7fc fd52 	bl	8004958 <mbedtls_mpi_copy>
 8007eb4:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb8:	2b00      	cmp	r3, #0

cleanup:
 8007eba:	e012      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8007ebc:	bf00      	nop
 8007ebe:	e010      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8007ec0:	bf00      	nop
 8007ec2:	e00e      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8007ec4:	bf00      	nop
 8007ec6:	e00c      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8007ec8:	bf00      	nop
 8007eca:	e00a      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8007ecc:	bf00      	nop
 8007ece:	e008      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8007ed0:	bf00      	nop
 8007ed2:	e006      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8007ed4:	bf00      	nop
 8007ed6:	e004      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8007ed8:	bf00      	nop
 8007eda:	e002      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8007edc:	bf00      	nop
 8007ede:	e000      	b.n	8007ee2 <mbedtls_mpi_gcd+0x1c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8007ee0:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 8007ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fc fc67 	bl	80047ba <mbedtls_mpi_free>
 8007eec:	f107 031c 	add.w	r3, r7, #28
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fc fc62 	bl	80047ba <mbedtls_mpi_free>
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fc fc5d 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 8007f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3740      	adds	r7, #64	; 0x40
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b088      	sub	sp, #32
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	603b      	str	r3, [r7, #0]
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	089b      	lsrs	r3, r3, #2
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	f002 0203 	and.w	r2, r2, #3
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	bf14      	ite	ne
 8007f26:	2201      	movne	r2, #1
 8007f28:	2200      	moveq	r2, #0
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - size;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	009a      	lsls	r2, r3, #2
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d00d      	beq.n	8007f60 <mbedtls_mpi_fill_random+0x56>
    {
        mbedtls_mpi_free( X );
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7fc fc38 	bl	80047ba <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7fc fc22 	bl	8004794 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8007f50:	69b9      	ldr	r1, [r7, #24]
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7fc fc57 	bl	8004806 <mbedtls_mpi_grow>
 8007f58:	61f8      	str	r0, [r7, #28]
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d118      	bne.n	8007f92 <mbedtls_mpi_fill_random+0x88>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8007f60:	2100      	movs	r1, #0
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7fc fe5b 	bl	8004c1e <mbedtls_mpi_lset>
 8007f68:	61f8      	str	r0, [r7, #28]
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d112      	bne.n	8007f96 <mbedtls_mpi_fill_random+0x8c>

    Xp = (unsigned char*) X->p;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	613b      	str	r3, [r7, #16]
    f_rng( p_rng, Xp + overhead, size );
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	18d1      	adds	r1, r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	6838      	ldr	r0, [r7, #0]
 8007f82:	4798      	blx	r3

    mpi_bigendian_to_host( X->p, limbs );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	69b9      	ldr	r1, [r7, #24]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fd f8ba 	bl	8005104 <mpi_bigendian_to_host>
 8007f90:	e002      	b.n	8007f98 <mbedtls_mpi_fill_random+0x8e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <mbedtls_mpi_fill_random+0x8e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8007f96:	bf00      	nop

cleanup:
    return( ret );
 8007f98:	69fb      	ldr	r3, [r7, #28]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b0a0      	sub	sp, #128	; 0x80
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8007fae:	2101      	movs	r1, #1
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7fd fbec 	bl	800578e <mbedtls_mpi_cmp_int>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc02      	bgt.n	8007fc2 <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8007fbc:	f06f 0303 	mvn.w	r3, #3
 8007fc0:	e23e      	b.n	8008440 <mbedtls_mpi_inv_mod+0x49e>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 8007fc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fc fbe4 	bl	8004794 <mbedtls_mpi_init>
 8007fcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fc fbdf 	bl	8004794 <mbedtls_mpi_init>
 8007fd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fc fbda 	bl	8004794 <mbedtls_mpi_init>
 8007fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fc fbd5 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 8007fea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fc fbd0 	bl	8004794 <mbedtls_mpi_init>
 8007ff4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fc fbcb 	bl	8004794 <mbedtls_mpi_init>
 8007ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008002:	4618      	mov	r0, r3
 8008004:	f7fc fbc6 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 8008008:	f107 031c 	add.w	r3, r7, #28
 800800c:	4618      	mov	r0, r3
 800800e:	f7fc fbc1 	bl	8004794 <mbedtls_mpi_init>
 8008012:	f107 0310 	add.w	r3, r7, #16
 8008016:	4618      	mov	r0, r3
 8008018:	f7fc fbbc 	bl	8004794 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800801c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff fe7a 	bl	8007d1e <mbedtls_mpi_gcd>
 800802a:	67f8      	str	r0, [r7, #124]	; 0x7c
 800802c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 81a5 	bne.w	800837e <mbedtls_mpi_inv_mod+0x3dc>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8008034:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008038:	2101      	movs	r1, #1
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd fba7 	bl	800578e <mbedtls_mpi_cmp_int>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8008046:	f06f 030d 	mvn.w	r3, #13
 800804a:	67fb      	str	r3, [r7, #124]	; 0x7c
        goto cleanup;
 800804c:	e1ca      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800804e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fe1a 	bl	8007c90 <mbedtls_mpi_mod_mpi>
 800805c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800805e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008060:	2b00      	cmp	r3, #0
 8008062:	f040 818e 	bne.w	8008382 <mbedtls_mpi_inv_mod+0x3e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8008066:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800806a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800806e:	4611      	mov	r1, r2
 8008070:	4618      	mov	r0, r3
 8008072:	f7fc fc71 	bl	8004958 <mbedtls_mpi_copy>
 8008076:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800807a:	2b00      	cmp	r3, #0
 800807c:	f040 8183 	bne.w	8008386 <mbedtls_mpi_inv_mod+0x3e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8008080:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	4618      	mov	r0, r3
 8008088:	f7fc fc66 	bl	8004958 <mbedtls_mpi_copy>
 800808c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800808e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008090:	2b00      	cmp	r3, #0
 8008092:	f040 817a 	bne.w	800838a <mbedtls_mpi_inv_mod+0x3e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8008096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	4618      	mov	r0, r3
 800809e:	f7fc fc5b 	bl	8004958 <mbedtls_mpi_copy>
 80080a2:	67f8      	str	r0, [r7, #124]	; 0x7c
 80080a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f040 8171 	bne.w	800838e <mbedtls_mpi_inv_mod+0x3ec>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 80080ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80080b0:	2101      	movs	r1, #1
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fc fdb3 	bl	8004c1e <mbedtls_mpi_lset>
 80080b8:	67f8      	str	r0, [r7, #124]	; 0x7c
 80080ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f040 8168 	bne.w	8008392 <mbedtls_mpi_inv_mod+0x3f0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 80080c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080c6:	2100      	movs	r1, #0
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fc fda8 	bl	8004c1e <mbedtls_mpi_lset>
 80080ce:	67f8      	str	r0, [r7, #124]	; 0x7c
 80080d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f040 815f 	bne.w	8008396 <mbedtls_mpi_inv_mod+0x3f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 80080d8:	f107 031c 	add.w	r3, r7, #28
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fc fd9d 	bl	8004c1e <mbedtls_mpi_lset>
 80080e4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80080e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f040 8156 	bne.w	800839a <mbedtls_mpi_inv_mod+0x3f8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 80080ee:	f107 0310 	add.w	r3, r7, #16
 80080f2:	2101      	movs	r1, #1
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fc fd92 	bl	8004c1e <mbedtls_mpi_lset>
 80080fa:	67f8      	str	r0, [r7, #124]	; 0x7c
 80080fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f040 814d 	bne.w	800839e <mbedtls_mpi_inv_mod+0x3fc>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 8008104:	e048      	b.n	8008198 <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 8008106:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800810a:	2101      	movs	r1, #1
 800810c:	4618      	mov	r0, r3
 800810e:	f7fd f986 	bl	800541e <mbedtls_mpi_shift_r>
 8008112:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008116:	2b00      	cmp	r3, #0
 8008118:	f040 8143 	bne.w	80083a2 <mbedtls_mpi_inv_mod+0x400>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800811c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d105      	bne.n	8008134 <mbedtls_mpi_inv_mod+0x192>
 8008128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01b      	beq.n	800816c <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 8008134:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008138:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800813c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008140:	4618      	mov	r0, r3
 8008142:	f7fd fcb8 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8008146:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800814a:	2b00      	cmp	r3, #0
 800814c:	f040 812b 	bne.w	80083a6 <mbedtls_mpi_inv_mod+0x404>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 8008150:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008154:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008158:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd fcf4 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8008162:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008166:	2b00      	cmp	r3, #0
 8008168:	f040 811f 	bne.w	80083aa <mbedtls_mpi_inv_mod+0x408>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800816c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd f953 	bl	800541e <mbedtls_mpi_shift_r>
 8008178:	67f8      	str	r0, [r7, #124]	; 0x7c
 800817a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 8116 	bne.w	80083ae <mbedtls_mpi_inv_mod+0x40c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8008182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008186:	2101      	movs	r1, #1
 8008188:	4618      	mov	r0, r3
 800818a:	f7fd f948 	bl	800541e <mbedtls_mpi_shift_r>
 800818e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 810d 	bne.w	80083b2 <mbedtls_mpi_inv_mod+0x410>
        while( ( TU.p[0] & 1 ) == 0 )
 8008198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0b0      	beq.n	8008106 <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 80081a4:	e048      	b.n	8008238 <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 80081a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081aa:	2101      	movs	r1, #1
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fd f936 	bl	800541e <mbedtls_mpi_shift_r>
 80081b2:	67f8      	str	r0, [r7, #124]	; 0x7c
 80081b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f040 80fd 	bne.w	80083b6 <mbedtls_mpi_inv_mod+0x414>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d105      	bne.n	80081d4 <mbedtls_mpi_inv_mod+0x232>
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01b      	beq.n	800820c <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 80081d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80081d8:	f107 011c 	add.w	r1, r7, #28
 80081dc:	f107 031c 	add.w	r3, r7, #28
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fd fc68 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 80081e6:	67f8      	str	r0, [r7, #124]	; 0x7c
 80081e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 80e5 	bne.w	80083ba <mbedtls_mpi_inv_mod+0x418>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 80081f0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80081f4:	f107 0110 	add.w	r1, r7, #16
 80081f8:	f107 0310 	add.w	r3, r7, #16
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fd fca4 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8008202:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008204:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008206:	2b00      	cmp	r3, #0
 8008208:	f040 80d9 	bne.w	80083be <mbedtls_mpi_inv_mod+0x41c>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800820c:	f107 031c 	add.w	r3, r7, #28
 8008210:	2101      	movs	r1, #1
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd f903 	bl	800541e <mbedtls_mpi_shift_r>
 8008218:	67f8      	str	r0, [r7, #124]	; 0x7c
 800821a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 80d0 	bne.w	80083c2 <mbedtls_mpi_inv_mod+0x420>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8008222:	f107 0310 	add.w	r3, r7, #16
 8008226:	2101      	movs	r1, #1
 8008228:	4618      	mov	r0, r3
 800822a:	f7fd f8f8 	bl	800541e <mbedtls_mpi_shift_r>
 800822e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008232:	2b00      	cmp	r3, #0
 8008234:	f040 80c7 	bne.w	80083c6 <mbedtls_mpi_inv_mod+0x424>
        while( ( TV.p[0] & 1 ) == 0 )
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0b0      	beq.n	80081a6 <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 8008244:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008248:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7fd fa02 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	db29      	blt.n	80082ae <mbedtls_mpi_inv_mod+0x30c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800825a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800825e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008266:	4618      	mov	r0, r3
 8008268:	f7fd fc6f 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800826c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800826e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 80aa 	bne.w	80083ca <mbedtls_mpi_inv_mod+0x428>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8008276:	f107 021c 	add.w	r2, r7, #28
 800827a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800827e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008282:	4618      	mov	r0, r3
 8008284:	f7fd fc61 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8008288:	67f8      	str	r0, [r7, #124]	; 0x7c
 800828a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 809e 	bne.w	80083ce <mbedtls_mpi_inv_mod+0x42c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8008292:	f107 0210 	add.w	r2, r7, #16
 8008296:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800829a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fd fc53 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 80082a4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80082a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d028      	beq.n	80082fe <mbedtls_mpi_inv_mod+0x35c>
 80082ac:	e09a      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 80082ae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80082b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80082b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fd fc45 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 80082c0:	67f8      	str	r0, [r7, #124]	; 0x7c
 80082c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f040 8084 	bne.w	80083d2 <mbedtls_mpi_inv_mod+0x430>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 80082ca:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80082ce:	f107 011c 	add.w	r1, r7, #28
 80082d2:	f107 031c 	add.w	r3, r7, #28
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd fc37 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 80082dc:	67f8      	str	r0, [r7, #124]	; 0x7c
 80082de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d178      	bne.n	80083d6 <mbedtls_mpi_inv_mod+0x434>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 80082e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80082e8:	f107 0110 	add.w	r1, r7, #16
 80082ec:	f107 0310 	add.w	r3, r7, #16
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fd fc2a 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 80082f6:	67f8      	str	r0, [r7, #124]	; 0x7c
 80082f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d16d      	bne.n	80083da <mbedtls_mpi_inv_mod+0x438>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 80082fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008302:	2100      	movs	r1, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f7fd fa42 	bl	800578e <mbedtls_mpi_cmp_int>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	f47f af43 	bne.w	8008198 <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 8008312:	e00b      	b.n	800832c <mbedtls_mpi_inv_mod+0x38a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 8008314:	f107 011c 	add.w	r1, r7, #28
 8008318:	f107 031c 	add.w	r3, r7, #28
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	4618      	mov	r0, r3
 8008320:	f7fd fbc9 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8008324:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d158      	bne.n	80083de <mbedtls_mpi_inv_mod+0x43c>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800832c:	f107 031c 	add.w	r3, r7, #28
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f7fd fa2b 	bl	800578e <mbedtls_mpi_cmp_int>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	dbea      	blt.n	8008314 <mbedtls_mpi_inv_mod+0x372>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800833e:	e00b      	b.n	8008358 <mbedtls_mpi_inv_mod+0x3b6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 8008340:	f107 011c 	add.w	r1, r7, #28
 8008344:	f107 031c 	add.w	r3, r7, #28
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	4618      	mov	r0, r3
 800834c:	f7fd fbfd 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8008350:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d144      	bne.n	80083e2 <mbedtls_mpi_inv_mod+0x440>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8008358:	f107 031c 	add.w	r3, r7, #28
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd f97a 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	daea      	bge.n	8008340 <mbedtls_mpi_inv_mod+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800836a:	f107 031c 	add.w	r3, r7, #28
 800836e:	4619      	mov	r1, r3
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7fc faf1 	bl	8004958 <mbedtls_mpi_copy>
 8008376:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800837a:	2b00      	cmp	r3, #0

cleanup:
 800837c:	e032      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800837e:	bf00      	nop
 8008380:	e030      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 8008382:	bf00      	nop
 8008384:	e02e      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8008386:	bf00      	nop
 8008388:	e02c      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800838a:	bf00      	nop
 800838c:	e02a      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800838e:	bf00      	nop
 8008390:	e028      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 8008392:	bf00      	nop
 8008394:	e026      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8008396:	bf00      	nop
 8008398:	e024      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800839a:	bf00      	nop
 800839c:	e022      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800839e:	bf00      	nop
 80083a0:	e020      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 80083a2:	bf00      	nop
 80083a4:	e01e      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 80083a6:	bf00      	nop
 80083a8:	e01c      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 80083aa:	bf00      	nop
 80083ac:	e01a      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80083ae:	bf00      	nop
 80083b0:	e018      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 80083b2:	bf00      	nop
 80083b4:	e016      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 80083b6:	bf00      	nop
 80083b8:	e014      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 80083ba:	bf00      	nop
 80083bc:	e012      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 80083be:	bf00      	nop
 80083c0:	e010      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 80083c2:	bf00      	nop
 80083c4:	e00e      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 80083c6:	bf00      	nop
 80083c8:	e00c      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 80083ca:	bf00      	nop
 80083cc:	e00a      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 80083ce:	bf00      	nop
 80083d0:	e008      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 80083d2:	bf00      	nop
 80083d4:	e006      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 80083d6:	bf00      	nop
 80083d8:	e004      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 80083da:	bf00      	nop
 80083dc:	e002      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 80083de:	bf00      	nop
 80083e0:	e000      	b.n	80083e4 <mbedtls_mpi_inv_mod+0x442>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 80083e2:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80083e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fc f9e6 	bl	80047ba <mbedtls_mpi_free>
 80083ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fc f9e1 	bl	80047ba <mbedtls_mpi_free>
 80083f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fc f9dc 	bl	80047ba <mbedtls_mpi_free>
 8008402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008406:	4618      	mov	r0, r3
 8008408:	f7fc f9d7 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800840c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008410:	4618      	mov	r0, r3
 8008412:	f7fc f9d2 	bl	80047ba <mbedtls_mpi_free>
 8008416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800841a:	4618      	mov	r0, r3
 800841c:	f7fc f9cd 	bl	80047ba <mbedtls_mpi_free>
 8008420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008424:	4618      	mov	r0, r3
 8008426:	f7fc f9c8 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800842a:	f107 031c 	add.w	r3, r7, #28
 800842e:	4618      	mov	r0, r3
 8008430:	f7fc f9c3 	bl	80047ba <mbedtls_mpi_free>
 8008434:	f107 0310 	add.w	r3, r7, #16
 8008438:	4618      	mov	r0, r3
 800843a:	f7fc f9be 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800843e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8008440:	4618      	mov	r0, r3
 8008442:	3780      	adds	r7, #128	; 0x80
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 8008450:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008454:	2100      	movs	r1, #0
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f009 fa0a 	bl	8011870 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08e      	sub	sp, #56	; 0x38
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 8008472:	f107 0314 	add.w	r3, r7, #20
 8008476:	2220      	movs	r2, #32
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f009 f9f8 	bl	8011870 <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3320      	adds	r3, #32
 8008484:	4618      	mov	r0, r3
 8008486:	f7fa ff14 	bl	80032b2 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    ctx->p_entropy = p_entropy;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    ctx->entropy_len = entropy_len;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800849e:	619a      	str	r2, [r3, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80084a6:	61da      	str	r2, [r3, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	3320      	adds	r3, #32
 80084ac:	f107 0114 	add.w	r1, r7, #20
 80084b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fa ff1b 	bl	80032f0 <mbedtls_aes_setkey_enc>
 80084ba:	6378      	str	r0, [r7, #52]	; 0x34
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <mbedtls_ctr_drbg_seed_entropy_len+0x62>
    {
        return( ret );
 80084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c4:	e00b      	b.n	80084de <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 80084c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 fa57 	bl	800897e <mbedtls_ctr_drbg_reseed>
 80084d0:	6378      	str	r0, [r7, #52]	; 0x34
 80084d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <mbedtls_ctr_drbg_seed_entropy_len+0x78>
    {
        return( ret );
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	e000      	b.n	80084de <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }
    return( 0 );
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3738      	adds	r7, #56	; 0x38
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af02      	add	r7, sp, #8
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
 80084f2:	603b      	str	r3, [r7, #0]
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 80084f4:	2330      	movs	r3, #48	; 0x30
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7ff ffae 	bl	8008464 <mbedtls_ctr_drbg_seed_entropy_len>
 8008508:	4603      	mov	r3, r0
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 8008512:	b5b0      	push	{r4, r5, r7, lr}
 8008514:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
 8008518:	af00      	add	r7, sp, #0
 800851a:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800851e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8008522:	6018      	str	r0, [r3, #0]
 8008524:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008528:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800852c:	6019      	str	r1, [r3, #0]
 800852e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008532:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8008536:	601a      	str	r2, [r3, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    unsigned char *p, *iv;
    mbedtls_aes_context aes_ctx;
    int ret = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 800853e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008542:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800854c:	d902      	bls.n	8008554 <block_cipher_df+0x42>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800854e:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8008552:	e191      	b.n	8008878 <block_cipher_df+0x366>

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 8008554:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008558:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f009 f986 	bl	8011870 <memset>
    mbedtls_aes_init( &aes_ctx );
 8008564:	f107 0314 	add.w	r3, r7, #20
 8008568:	4618      	mov	r0, r3
 800856a:	f7fa fea2 	bl	80032b2 <mbedtls_aes_init>
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800856e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008572:	3310      	adds	r3, #16
 8008574:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    *p++ = ( data_len >> 24 ) & 0xff;
 8008578:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800857c:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	0e19      	lsrs	r1, r3, #24
 8008584:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800858e:	b2ca      	uxtb	r2, r1
 8008590:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 16 ) & 0xff;
 8008592:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008596:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	0c19      	lsrs	r1, r3, #16
 800859e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 80085a8:	b2ca      	uxtb	r2, r1
 80085aa:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 8  ) & 0xff;
 80085ac:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80085b0:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	0a19      	lsrs	r1, r3, #8
 80085b8:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 80085c2:	b2ca      	uxtb	r2, r1
 80085c4:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len       ) & 0xff;
 80085c6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 80085d0:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80085d4:	f5a2 7251 	sub.w	r2, r2, #836	; 0x344
 80085d8:	6812      	ldr	r2, [r2, #0]
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	701a      	strb	r2, [r3, #0]
    p += 3;
 80085de:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80085e2:	3303      	adds	r3, #3
 80085e4:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 80085e8:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 80085f2:	2230      	movs	r2, #48	; 0x30
 80085f4:	701a      	strb	r2, [r3, #0]
    memcpy( p, data, data_len );
 80085f6:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80085fa:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 80085fe:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008602:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8008606:	6812      	ldr	r2, [r2, #0]
 8008608:	6819      	ldr	r1, [r3, #0]
 800860a:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 800860e:	f009 f921 	bl	8011854 <memcpy>
    p[data_len] = 0x80;
 8008612:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008616:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800861a:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4413      	add	r3, r2
 8008622:	2280      	movs	r2, #128	; 0x80
 8008624:	701a      	strb	r2, [r3, #0]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 8008626:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800862a:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3319      	adds	r3, #25
 8008632:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8008636:	2300      	movs	r3, #0
 8008638:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800863c:	e010      	b.n	8008660 <block_cipher_df+0x14e>
        key[i] = i;
 800863e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008642:	b2d9      	uxtb	r1, r3
 8008644:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008648:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800864c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008650:	4413      	add	r3, r2
 8008652:	460a      	mov	r2, r1
 8008654:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8008656:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800865a:	3301      	adds	r3, #1
 800865c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8008660:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008664:	2b1f      	cmp	r3, #31
 8008666:	ddea      	ble.n	800863e <block_cipher_df+0x12c>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8008668:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 800866c:	f107 0314 	add.w	r3, r7, #20
 8008670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008674:	4618      	mov	r0, r3
 8008676:	f7fa fe3b 	bl	80032f0 <mbedtls_aes_setkey_enc>
 800867a:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 800867e:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 80c5 	bne.w	8008812 <block_cipher_df+0x300>
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008688:	2300      	movs	r3, #0
 800868a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800868e:	e078      	b.n	8008782 <block_cipher_df+0x270>
    {
        p = buf;
 8008690:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8008694:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008698:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800869c:	2210      	movs	r2, #16
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f009 f8e5 	bl	8011870 <memset>
        use_len = buf_len;
 80086a6:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80086aa:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

        while( use_len > 0 )
 80086ae:	e043      	b.n	8008738 <block_cipher_df+0x226>
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80086b6:	e01d      	b.n	80086f4 <block_cipher_df+0x1e2>
                chain[i] ^= p[i];
 80086b8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80086bc:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80086c0:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80086c4:	4413      	add	r3, r2
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80086cc:	f8d7 1344 	ldr.w	r1, [r7, #836]	; 0x344
 80086d0:	440b      	add	r3, r1
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	4053      	eors	r3, r2
 80086d6:	b2d9      	uxtb	r1, r3
 80086d8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80086dc:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80086e0:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80086e4:	4413      	add	r3, r2
 80086e6:	460a      	mov	r2, r1
 80086e8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 80086ea:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80086ee:	3301      	adds	r3, #1
 80086f0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80086f4:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80086f8:	2b0f      	cmp	r3, #15
 80086fa:	dddd      	ble.n	80086b8 <block_cipher_df+0x1a6>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80086fc:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8008700:	3310      	adds	r3, #16
 8008702:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 8008706:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800870a:	2b10      	cmp	r3, #16
 800870c:	bf28      	it	cs
 800870e:	2310      	movcs	r3, #16
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8008710:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 800871a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800871e:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8008722:	f107 0014 	add.w	r0, r7, #20
 8008726:	2101      	movs	r1, #1
 8008728:	f7fb fd7c 	bl	8004224 <mbedtls_aes_crypt_ecb>
 800872c:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 8008730:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8008734:	2b00      	cmp	r3, #0
 8008736:	d16e      	bne.n	8008816 <block_cipher_df+0x304>
        while( use_len > 0 )
 8008738:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1b7      	bne.n	80086b0 <block_cipher_df+0x19e>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008740:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008744:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8008748:	441a      	add	r2, r3
 800874a:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800874e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8008752:	4614      	mov	r4, r2
 8008754:	461d      	mov	r5, r3
 8008756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008758:	6020      	str	r0, [r4, #0]
 800875a:	6061      	str	r1, [r4, #4]
 800875c:	60a2      	str	r2, [r4, #8]
 800875e:	60e3      	str	r3, [r4, #12]

        /*
         * Update IV
         */
        buf[3]++;
 8008760:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008764:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008768:	78db      	ldrb	r3, [r3, #3]
 800876a:	3301      	adds	r3, #1
 800876c:	b2da      	uxtb	r2, r3
 800876e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008772:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008776:	70da      	strb	r2, [r3, #3]
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008778:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800877c:	3310      	adds	r3, #16
 800877e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8008782:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008786:	2b2f      	cmp	r3, #47	; 0x2f
 8008788:	dd82      	ble.n	8008690 <block_cipher_df+0x17e>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 800878a:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 800878e:	f107 0314 	add.w	r3, r7, #20
 8008792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008796:	4618      	mov	r0, r3
 8008798:	f7fa fdaa 	bl	80032f0 <mbedtls_aes_setkey_enc>
 800879c:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 80087a0:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d138      	bne.n	800881a <block_cipher_df+0x308>
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
 80087a8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80087ac:	3320      	adds	r3, #32
 80087ae:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    p = output;
 80087b2:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80087b6:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 80087c6:	e01f      	b.n	8008808 <block_cipher_df+0x2f6>
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 80087c8:	f107 0014 	add.w	r0, r7, #20
 80087cc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80087d0:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80087d4:	2101      	movs	r1, #1
 80087d6:	f7fb fd25 	bl	8004224 <mbedtls_aes_crypt_ecb>
 80087da:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 80087de:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d11b      	bne.n	800881e <block_cipher_df+0x30c>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80087e6:	2210      	movs	r2, #16
 80087e8:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 80087ec:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 80087f0:	f009 f830 	bl	8011854 <memcpy>
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80087f4:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80087f8:	3310      	adds	r3, #16
 80087fa:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80087fe:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8008802:	3310      	adds	r3, #16
 8008804:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8008808:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800880c:	2b2f      	cmp	r3, #47	; 0x2f
 800880e:	dddb      	ble.n	80087c8 <block_cipher_df+0x2b6>
    }
exit:
 8008810:	e006      	b.n	8008820 <block_cipher_df+0x30e>
        goto exit;
 8008812:	bf00      	nop
 8008814:	e004      	b.n	8008820 <block_cipher_df+0x30e>
                goto exit;
 8008816:	bf00      	nop
 8008818:	e002      	b.n	8008820 <block_cipher_df+0x30e>
        goto exit;
 800881a:	bf00      	nop
 800881c:	e000      	b.n	8008820 <block_cipher_df+0x30e>
            goto exit;
 800881e:	bf00      	nop
    mbedtls_aes_free( &aes_ctx );
 8008820:	f107 0314 	add.w	r3, r7, #20
 8008824:	4618      	mov	r0, r3
 8008826:	f7fa fd52 	bl	80032ce <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800882a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800882e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8008832:	4618      	mov	r0, r3
 8008834:	f006 f8d8 	bl	800e9e8 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008838:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800883c:	2130      	movs	r1, #48	; 0x30
 800883e:	4618      	mov	r0, r3
 8008840:	f006 f8d2 	bl	800e9e8 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 8008844:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008848:	2120      	movs	r1, #32
 800884a:	4618      	mov	r0, r3
 800884c:	f006 f8cc 	bl	800e9e8 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 8008850:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008854:	2110      	movs	r1, #16
 8008856:	4618      	mov	r0, r3
 8008858:	f006 f8c6 	bl	800e9e8 <mbedtls_platform_zeroize>
    if( 0 != ret )
 800885c:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8008860:	2b00      	cmp	r3, #0
 8008862:	d007      	beq.n	8008874 <block_cipher_df+0x362>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 8008864:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008868:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800886c:	2130      	movs	r1, #48	; 0x30
 800886e:	6818      	ldr	r0, [r3, #0]
 8008870:	f006 f8ba 	bl	800e9e8 <mbedtls_platform_zeroize>
    }

    return( ret );
 8008874:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
}
 8008878:	4618      	mov	r0, r3
 800887a:	f507 7752 	add.w	r7, r7, #840	; 0x348
 800887e:	46bd      	mov	sp, r7
 8008880:	bdb0      	pop	{r4, r5, r7, pc}

08008882 <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b092      	sub	sp, #72	; 0x48
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
 800888c:	f107 0308 	add.w	r3, r7, #8
 8008890:	647b      	str	r3, [r7, #68]	; 0x44
    int i, j;
    int ret = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8008896:	f107 0308 	add.w	r3, r7, #8
 800889a:	2230      	movs	r2, #48	; 0x30
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f008 ffe6 	bl	8011870 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80088a4:	2300      	movs	r3, #0
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a8:	e028      	b.n	80088fc <ctr_drbg_update_internal+0x7a>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80088aa:	2310      	movs	r3, #16
 80088ac:	643b      	str	r3, [r7, #64]	; 0x40
 80088ae:	e00e      	b.n	80088ce <ctr_drbg_update_internal+0x4c>
            if( ++ctx->counter[i - 1] != 0 )
 80088b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b2:	3b01      	subs	r3, #1
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	5cd2      	ldrb	r2, [r2, r3]
 80088b8:	3201      	adds	r2, #1
 80088ba:	b2d1      	uxtb	r1, r2
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	54d1      	strb	r1, [r2, r3]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	5cd3      	ldrb	r3, [r2, r3]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <ctr_drbg_update_internal+0x54>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80088c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ca:	3b01      	subs	r3, #1
 80088cc:	643b      	str	r3, [r7, #64]	; 0x40
 80088ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dced      	bgt.n	80088b0 <ctr_drbg_update_internal+0x2e>
 80088d4:	e000      	b.n	80088d8 <ctr_drbg_update_internal+0x56>
                break;
 80088d6:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f103 0020 	add.w	r0, r3, #32
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088e2:	2101      	movs	r1, #1
 80088e4:	f7fb fc9e 	bl	8004224 <mbedtls_aes_crypt_ecb>
 80088e8:	63b8      	str	r0, [r7, #56]	; 0x38
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d138      	bne.n	8008962 <ctr_drbg_update_internal+0xe0>
            goto exit;

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80088f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f2:	3310      	adds	r3, #16
 80088f4:	647b      	str	r3, [r7, #68]	; 0x44
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80088f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f8:	3310      	adds	r3, #16
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fe:	2b2f      	cmp	r3, #47	; 0x2f
 8008900:	ddd3      	ble.n	80088aa <ctr_drbg_update_internal+0x28>
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8008902:	2300      	movs	r3, #0
 8008904:	643b      	str	r3, [r7, #64]	; 0x40
 8008906:	e013      	b.n	8008930 <ctr_drbg_update_internal+0xae>
        tmp[i] ^= data[i];
 8008908:	f107 0208 	add.w	r2, r7, #8
 800890c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800890e:	4413      	add	r3, r2
 8008910:	781a      	ldrb	r2, [r3, #0]
 8008912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	440b      	add	r3, r1
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	4053      	eors	r3, r2
 800891c:	b2d9      	uxtb	r1, r3
 800891e:	f107 0208 	add.w	r2, r7, #8
 8008922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008924:	4413      	add	r3, r2
 8008926:	460a      	mov	r2, r1
 8008928:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 800892a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800892c:	3301      	adds	r3, #1
 800892e:	643b      	str	r3, [r7, #64]	; 0x40
 8008930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008932:	2b2f      	cmp	r3, #47	; 0x2f
 8008934:	dde8      	ble.n	8008908 <ctr_drbg_update_internal+0x86>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3320      	adds	r3, #32
 800893a:	f107 0108 	add.w	r1, r7, #8
 800893e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008942:	4618      	mov	r0, r3
 8008944:	f7fa fcd4 	bl	80032f0 <mbedtls_aes_setkey_enc>
 8008948:	63b8      	str	r0, [r7, #56]	; 0x38
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <ctr_drbg_update_internal+0xe4>
        goto exit;
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	3320      	adds	r3, #32
 8008958:	2210      	movs	r2, #16
 800895a:	4619      	mov	r1, r3
 800895c:	f008 ff7a 	bl	8011854 <memcpy>
 8008960:	e002      	b.n	8008968 <ctr_drbg_update_internal+0xe6>
            goto exit;
 8008962:	bf00      	nop
 8008964:	e000      	b.n	8008968 <ctr_drbg_update_internal+0xe6>
        goto exit;
 8008966:	bf00      	nop

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008968:	f107 0308 	add.w	r3, r7, #8
 800896c:	2130      	movs	r1, #48	; 0x30
 800896e:	4618      	mov	r0, r3
 8008970:	f006 f83a 	bl	800e9e8 <mbedtls_platform_zeroize>
    return( ret );
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008976:	4618      	mov	r0, r3
 8008978:	3748      	adds	r7, #72	; 0x48
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b0e6      	sub	sp, #408	; 0x198
 8008982:	af00      	add	r7, sp, #0
 8008984:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008988:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800898c:	6018      	str	r0, [r3, #0]
 800898e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008992:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008996:	6019      	str	r1, [r3, #0]
 8008998:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800899c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80089a0:	601a      	str	r2, [r3, #0]
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80089a8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80089ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80089b8:	d80e      	bhi.n	80089d8 <mbedtls_ctr_drbg_reseed+0x5a>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 80089ba:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80089be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80089ca:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80089ce:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d902      	bls.n	80089de <mbedtls_ctr_drbg_reseed+0x60>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80089d8:	f06f 0337 	mvn.w	r3, #55	; 0x37
 80089dc:	e08b      	b.n	8008af6 <mbedtls_ctr_drbg_reseed+0x178>

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 80089de:	f107 0310 	add.w	r3, r7, #16
 80089e2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80089e6:	2100      	movs	r1, #0
 80089e8:	4618      	mov	r0, r3
 80089ea:	f008 ff41 	bl	8011870 <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 80089ee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80089f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80089fc:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008a00:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 8008a0a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8008a0e:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8008a12:	6812      	ldr	r2, [r2, #0]
 8008a14:	6992      	ldr	r2, [r2, #24]
 8008a16:	f107 0110 	add.w	r1, r7, #16
 8008a1a:	4798      	blx	r3
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <mbedtls_ctr_drbg_reseed+0xaa>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 8008a22:	f06f 0333 	mvn.w	r3, #51	; 0x33
 8008a26:	e066      	b.n	8008af6 <mbedtls_ctr_drbg_reseed+0x178>
    }

    seedlen += ctx->entropy_len;
 8008a28:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008a2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008a38:	4413      	add	r3, r2
 8008a3a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    /*
     * Add additional data
     */
    if( additional && len )
 8008a3e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008a42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d021      	beq.n	8008a90 <mbedtls_ctr_drbg_reseed+0x112>
 8008a4c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008a50:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d01a      	beq.n	8008a90 <mbedtls_ctr_drbg_reseed+0x112>
    {
        memcpy( seed + seedlen, additional, len );
 8008a5a:	f107 0210 	add.w	r2, r7, #16
 8008a5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008a62:	18d0      	adds	r0, r2, r3
 8008a64:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008a68:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8008a6c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008a70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	6819      	ldr	r1, [r3, #0]
 8008a78:	f008 feec 	bl	8011854 <memcpy>
        seedlen += len;
 8008a7c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008a80:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008a84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 8008a90:	f107 0110 	add.w	r1, r7, #16
 8008a94:	f107 0310 	add.w	r3, r7, #16
 8008a98:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff fd38 	bl	8008512 <block_cipher_df>
 8008aa2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8008aa6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d117      	bne.n	8008ade <mbedtls_ctr_drbg_reseed+0x160>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 8008aae:	f107 0210 	add.w	r2, r7, #16
 8008ab2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008ab6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008aba:	4611      	mov	r1, r2
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	f7ff fee0 	bl	8008882 <ctr_drbg_update_internal>
 8008ac2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8008ac6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <mbedtls_ctr_drbg_reseed+0x164>
        goto exit;
    ctx->reseed_counter = 1;
 8008ace:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008ad2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	611a      	str	r2, [r3, #16]
 8008adc:	e002      	b.n	8008ae4 <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 8008ade:	bf00      	nop
 8008ae0:	e000      	b.n	8008ae4 <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 8008ae2:	bf00      	nop

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 8008ae4:	f107 0310 	add.w	r3, r7, #16
 8008ae8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008aec:	4618      	mov	r0, r3
 8008aee:	f005 ff7b 	bl	800e9e8 <mbedtls_platform_zeroize>
    return( ret );
 8008af2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b09a      	sub	sp, #104	; 0x68
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	65fb      	str	r3, [r7, #92]	; 0x5c
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	65bb      	str	r3, [r7, #88]	; 0x58
    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = output;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	667b      	str	r3, [r7, #100]	; 0x64
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b20:	d902      	bls.n	8008b28 <mbedtls_ctr_drbg_random_with_add+0x28>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 8008b22:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008b26:	e09c      	b.n	8008c62 <mbedtls_ctr_drbg_random_with_add+0x162>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 8008b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2e:	d902      	bls.n	8008b36 <mbedtls_ctr_drbg_random_with_add+0x36>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8008b30:	f06f 0337 	mvn.w	r3, #55	; 0x37
 8008b34:	e095      	b.n	8008c62 <mbedtls_ctr_drbg_random_with_add+0x162>

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8008b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b3a:	2230      	movs	r2, #48	; 0x30
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f008 fe96 	bl	8011870 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8008b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b46:	691a      	ldr	r2, [r3, #16]
 8008b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	dc03      	bgt.n	8008b58 <mbedtls_ctr_drbg_random_with_add+0x58>
        ctx->prediction_resistance )
 8008b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b52:	695b      	ldr	r3, [r3, #20]
    if( ctx->reseed_counter > ctx->reseed_interval ||
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00c      	beq.n	8008b72 <mbedtls_ctr_drbg_random_with_add+0x72>
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8008b58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b5e:	f7ff ff0e 	bl	800897e <mbedtls_ctr_drbg_reseed>
 8008b62:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <mbedtls_ctr_drbg_random_with_add+0x6e>
        {
            return( ret );
 8008b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b6c:	e079      	b.n	8008c62 <mbedtls_ctr_drbg_random_with_add+0x162>
        }
        add_len = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	673b      	str	r3, [r7, #112]	; 0x70
    }

    if( add_len > 0 )
 8008b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d04d      	beq.n	8008c14 <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 8008b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fcc6 	bl	8008512 <block_cipher_df>
 8008b86:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d155      	bne.n	8008c3a <mbedtls_ctr_drbg_random_with_add+0x13a>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8008b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b92:	4619      	mov	r1, r3
 8008b94:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b96:	f7ff fe74 	bl	8008882 <ctr_drbg_update_internal>
 8008b9a:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d14d      	bne.n	8008c3e <mbedtls_ctr_drbg_random_with_add+0x13e>
            goto exit;
    }

    while( output_len > 0 )
 8008ba2:	e037      	b.n	8008c14 <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8008ba4:	2310      	movs	r3, #16
 8008ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8008ba8:	e00e      	b.n	8008bc8 <mbedtls_ctr_drbg_random_with_add+0xc8>
            if( ++ctx->counter[i - 1] != 0 )
 8008baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bac:	3b01      	subs	r3, #1
 8008bae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bb0:	5cd2      	ldrb	r2, [r2, r3]
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	b2d1      	uxtb	r1, r2
 8008bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bb8:	54d1      	strb	r1, [r2, r3]
 8008bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bbc:	5cd3      	ldrb	r3, [r2, r3]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <mbedtls_ctr_drbg_random_with_add+0xd0>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8008bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8008bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dced      	bgt.n	8008baa <mbedtls_ctr_drbg_random_with_add+0xaa>
 8008bce:	e000      	b.n	8008bd2 <mbedtls_ctr_drbg_random_with_add+0xd2>
                break;
 8008bd0:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 8008bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bd4:	f103 0020 	add.w	r0, r3, #32
 8008bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bda:	f107 0314 	add.w	r3, r7, #20
 8008bde:	2101      	movs	r1, #1
 8008be0:	f7fb fb20 	bl	8004224 <mbedtls_aes_crypt_ecb>
 8008be4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d12a      	bne.n	8008c42 <mbedtls_ctr_drbg_random_with_add+0x142>
            goto exit;

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	bf28      	it	cs
 8008bf2:	2310      	movcs	r3, #16
 8008bf4:	657b      	str	r3, [r7, #84]	; 0x54
                                                       output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 8008bf6:	f107 0314 	add.w	r3, r7, #20
 8008bfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008c00:	f008 fe28 	bl	8011854 <memcpy>
        p += use_len;
 8008c04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c08:	4413      	add	r3, r2
 8008c0a:	667b      	str	r3, [r7, #100]	; 0x64
        output_len -= use_len;
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	607b      	str	r3, [r7, #4]
    while( output_len > 0 )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1c4      	bne.n	8008ba4 <mbedtls_ctr_drbg_random_with_add+0xa4>
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8008c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008c22:	f7ff fe2e 	bl	8008882 <ctr_drbg_update_internal>
 8008c26:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10b      	bne.n	8008c46 <mbedtls_ctr_drbg_random_with_add+0x146>
        goto exit;

    ctx->reseed_counter++;
 8008c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c36:	611a      	str	r2, [r3, #16]
 8008c38:	e006      	b.n	8008c48 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8008c3a:	bf00      	nop
 8008c3c:	e004      	b.n	8008c48 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8008c3e:	bf00      	nop
 8008c40:	e002      	b.n	8008c48 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8008c42:	bf00      	nop
 8008c44:	e000      	b.n	8008c48 <mbedtls_ctr_drbg_random_with_add+0x148>
        goto exit;
 8008c46:	bf00      	nop

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 8008c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c4c:	2130      	movs	r1, #48	; 0x30
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f005 feca 	bl	800e9e8 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008c54:	f107 0314 	add.w	r3, r7, #20
 8008c58:	2110      	movs	r1, #16
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f005 fec4 	bl	800e9e8 <mbedtls_platform_zeroize>
    return( 0 );
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3768      	adds	r7, #104	; 0x68
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b088      	sub	sp, #32
 8008c6e:	af02      	add	r7, sp, #8
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	68b9      	ldr	r1, [r7, #8]
 8008c84:	6978      	ldr	r0, [r7, #20]
 8008c86:	f7ff ff3b 	bl	8008b00 <mbedtls_ctr_drbg_random_with_add>
 8008c8a:	6138      	str	r0, [r7, #16]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 8008c8c:	693b      	ldr	r3, [r7, #16]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b088      	sub	sp, #32
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	607a      	str	r2, [r7, #4]
 8008ca2:	603b      	str	r3, [r7, #0]
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca8:	3307      	adds	r3, #7
 8008caa:	08db      	lsrs	r3, r3, #3
 8008cac:	61bb      	str	r3, [r7, #24]
    size_t use_size = blen > n_size ? n_size : blen;
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	bf28      	it	cs
 8008cb6:	4613      	movcs	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	68b8      	ldr	r0, [r7, #8]
 8008cc0:	f7fc fa53 	bl	800516a <mbedtls_mpi_read_binary>
 8008cc4:	61f8      	str	r0, [r7, #28]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d126      	bne.n	8008d1a <derive_mpi+0x84>
    if( use_size * 8 > grp->nbits )
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	00da      	lsls	r2, r3, #3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d90c      	bls.n	8008cf2 <derive_mpi+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	00da      	lsls	r2, r3, #3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	68b8      	ldr	r0, [r7, #8]
 8008ce6:	f7fc fb9a 	bl	800541e <mbedtls_mpi_shift_r>
 8008cea:	61f8      	str	r0, [r7, #28]
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d115      	bne.n	8008d1e <derive_mpi+0x88>

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	334c      	adds	r3, #76	; 0x4c
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68b8      	ldr	r0, [r7, #8]
 8008cfa:	f7fc fcad 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	db0e      	blt.n	8008d22 <derive_mpi+0x8c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	334c      	adds	r3, #76	; 0x4c
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	68b8      	ldr	r0, [r7, #8]
 8008d0e:	f7fc ff1c 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8008d12:	61f8      	str	r0, [r7, #28]
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	2b00      	cmp	r3, #0

cleanup:
 8008d18:	e003      	b.n	8008d22 <derive_mpi+0x8c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 8008d1a:	bf00      	nop
 8008d1c:	e002      	b.n	8008d24 <derive_mpi+0x8e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 8008d1e:	bf00      	nop
 8008d20:	e000      	b.n	8008d24 <derive_mpi+0x8e>
cleanup:
 8008d22:	bf00      	nop
    return( ret );
 8008d24:	69fb      	ldr	r3, [r7, #28]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <ecdsa_sign_restartable>:
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
                mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
                mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b0a2      	sub	sp, #136	; 0x88
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
    int ret, key_tries, sign_tries;
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
 8008d3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008d42:	673b      	str	r3, [r7, #112]	; 0x70
 8008d44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d48:	66fb      	str	r3, [r7, #108]	; 0x6c
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;
 8008d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	667b      	str	r3, [r7, #100]	; 0x64

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <ecdsa_sign_restartable+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8008d5c:	4b8c      	ldr	r3, [pc, #560]	; (8008f90 <ecdsa_sign_restartable+0x260>)
 8008d5e:	e112      	b.n	8008f86 <ecdsa_sign_restartable+0x256>

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8008d60:	2101      	movs	r1, #1
 8008d62:	6838      	ldr	r0, [r7, #0]
 8008d64:	f7fc fd13 	bl	800578e <mbedtls_mpi_cmp_int>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	db08      	blt.n	8008d80 <ecdsa_sign_restartable+0x50>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	334c      	adds	r3, #76	; 0x4c
 8008d72:	4619      	mov	r1, r3
 8008d74:	6838      	ldr	r0, [r7, #0]
 8008d76:	f7fc fc6f 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	db01      	blt.n	8008d84 <ecdsa_sign_restartable+0x54>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8008d80:	4b84      	ldr	r3, [pc, #528]	; (8008f94 <ecdsa_sign_restartable+0x264>)
 8008d82:	e100      	b.n	8008f86 <ecdsa_sign_restartable+0x256>

    mbedtls_ecp_point_init( &R );
 8008d84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fbe3 	bl	8009554 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8008d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fb fcfe 	bl	8004794 <mbedtls_mpi_init>
 8008d98:	f107 0320 	add.w	r3, r7, #32
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fb fcf9 	bl	8004794 <mbedtls_mpi_init>
 8008da2:	f107 0314 	add.w	r3, r7, #20
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fb fcf4 	bl	8004794 <mbedtls_mpi_init>
        if( rs_ctx->sig->state == ecdsa_sig_modn )
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
 8008dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]
    do
    {
        if( *p_sign_tries++ > 10 )
 8008db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008db4:	1d1a      	adds	r2, r3, #4
 8008db6:	673a      	str	r2, [r7, #112]	; 0x70
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b0a      	cmp	r3, #10
 8008dbc:	dd02      	ble.n	8008dc4 <ecdsa_sign_restartable+0x94>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 8008dbe:	4b76      	ldr	r3, [pc, #472]	; (8008f98 <ecdsa_sign_restartable+0x268>)
 8008dc0:	677b      	str	r3, [r7, #116]	; 0x74
            goto cleanup;
 8008dc2:	e0cb      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
 8008dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]
        do
        {
            if( *p_key_tries++ > 10 )
 8008dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b0a      	cmp	r3, #10
 8008dd4:	dd02      	ble.n	8008ddc <ecdsa_sign_restartable+0xac>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 8008dd6:	4b70      	ldr	r3, [pc, #448]	; (8008f98 <ecdsa_sign_restartable+0x268>)
 8008dd8:	677b      	str	r3, [r7, #116]	; 0x74
                goto cleanup;
 8008dda:	e0bf      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
            }

            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 8008ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008de0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008de4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f003 fc3c 	bl	800c664 <mbedtls_ecp_gen_privkey>
 8008dec:	6778      	str	r0, [r7, #116]	; 0x74
 8008dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f040 809c 	bne.w	8008f2e <ecdsa_sign_restartable+0x1fe>
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008dfc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008e00:	2300      	movs	r3, #0
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	4613      	mov	r3, r2
 8008e12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f003 f93b 	bl	800c090 <mbedtls_ecp_mul_restartable>
 8008e1a:	6778      	str	r0, [r7, #116]	; 0x74
 8008e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 8087 	bne.w	8008f32 <ecdsa_sign_restartable+0x202>
                                                  f_rng, p_rng, ECDSA_RS_ECP ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8008e2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008e32:	f7fe ff2d 	bl	8007c90 <mbedtls_mpi_mod_mpi>
 8008e36:	6778      	str	r0, [r7, #116]	; 0x74
 8008e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d17b      	bne.n	8008f36 <ecdsa_sign_restartable+0x206>
        }
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
 8008e3e:	2100      	movs	r1, #0
 8008e40:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008e42:	f7fc fca4 	bl	800578e <mbedtls_mpi_cmp_int>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0be      	beq.n	8008dca <ecdsa_sign_restartable+0x9a>
        ECDSA_BUDGET( MBEDTLS_ECP_OPS_INV + 4 );

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8008e4c:	f107 0120 	add.w	r1, r7, #32
 8008e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff ff1c 	bl	8008c96 <derive_mpi>
 8008e5e:	6778      	str	r0, [r7, #116]	; 0x74
 8008e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d169      	bne.n	8008f3a <ecdsa_sign_restartable+0x20a>

        /*
         * Generate a random value to blind inv_mod in next step,
         * avoiding a potential timing leak.
         */
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 8008e66:	f107 0114 	add.w	r1, r7, #20
 8008e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f003 fbf6 	bl	800c664 <mbedtls_ecp_gen_privkey>
 8008e78:	6778      	str	r0, [r7, #116]	; 0x74
 8008e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d15e      	bne.n	8008f3e <ecdsa_sign_restartable+0x20e>

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7fe fa9b 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8008e8a:	6778      	str	r0, [r7, #116]	; 0x74
 8008e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d157      	bne.n	8008f42 <ecdsa_sign_restartable+0x212>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 8008e92:	f107 0120 	add.w	r1, r7, #32
 8008e96:	f107 0320 	add.w	r3, r7, #32
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fc fe0a 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8008ea2:	6778      	str	r0, [r7, #116]	; 0x74
 8008ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d14d      	bne.n	8008f46 <ecdsa_sign_restartable+0x216>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 8008eaa:	f107 0214 	add.w	r2, r7, #20
 8008eae:	f107 0120 	add.w	r1, r7, #32
 8008eb2:	f107 0320 	add.w	r3, r7, #32
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fa82 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8008ebc:	6778      	str	r0, [r7, #116]	; 0x74
 8008ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d142      	bne.n	8008f4a <ecdsa_sign_restartable+0x21a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 8008ec4:	f107 0314 	add.w	r3, r7, #20
 8008ec8:	461a      	mov	r2, r3
 8008eca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ecc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008ece:	f7fe fa77 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8008ed2:	6778      	str	r0, [r7, #116]	; 0x74
 8008ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d139      	bne.n	8008f4e <ecdsa_sign_restartable+0x21e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	334c      	adds	r3, #76	; 0x4c
 8008ede:	461a      	mov	r2, r3
 8008ee0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff f85d 	bl	8007fa2 <mbedtls_mpi_inv_mod>
 8008ee8:	6778      	str	r0, [r7, #116]	; 0x74
 8008eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d130      	bne.n	8008f52 <ecdsa_sign_restartable+0x222>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 8008ef0:	f107 0320 	add.w	r3, r7, #32
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7fe fa61 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8008efe:	6778      	str	r0, [r7, #116]	; 0x74
 8008f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d127      	bne.n	8008f56 <ecdsa_sign_restartable+0x226>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	334c      	adds	r3, #76	; 0x4c
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7fe febe 	bl	8007c90 <mbedtls_mpi_mod_mpi>
 8008f14:	6778      	str	r0, [r7, #116]	; 0x74
 8008f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d11e      	bne.n	8008f5a <ecdsa_sign_restartable+0x22a>
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7fc fc35 	bl	800578e <mbedtls_mpi_cmp_int>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f43f af43 	beq.w	8008db2 <ecdsa_sign_restartable+0x82>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->sig != NULL )
        mbedtls_mpi_copy( r, pr );
#endif

cleanup:
 8008f2c:	e016      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 8008f2e:	bf00      	nop
 8008f30:	e014      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 8008f32:	bf00      	nop
 8008f34:	e012      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 8008f36:	bf00      	nop
 8008f38:	e010      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8008f3a:	bf00      	nop
 8008f3c:	e00e      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 8008f3e:	bf00      	nop
 8008f40:	e00c      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 8008f42:	bf00      	nop
 8008f44:	e00a      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 8008f46:	bf00      	nop
 8008f48:	e008      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 8008f4a:	bf00      	nop
 8008f4c:	e006      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 8008f4e:	bf00      	nop
 8008f50:	e004      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 8008f52:	bf00      	nop
 8008f54:	e002      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 8008f56:	bf00      	nop
 8008f58:	e000      	b.n	8008f5c <ecdsa_sign_restartable+0x22c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 8008f5a:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 8008f5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 fb62 	bl	800962a <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 8008f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fb fc25 	bl	80047ba <mbedtls_mpi_free>
 8008f70:	f107 0320 	add.w	r3, r7, #32
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fb fc20 	bl	80047ba <mbedtls_mpi_free>
 8008f7a:	f107 0314 	add.w	r3, r7, #20
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fb fc1b 	bl	80047ba <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( sig );

    return( ret );
 8008f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3778      	adds	r7, #120	; 0x78
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	ffffb080 	.word	0xffffb080
 8008f94:	ffffb380 	.word	0xffffb380
 8008f98:	ffffb300 	.word	0xffffb300

08008f9c <ecdsa_verify_restartable>:
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
                                     const unsigned char *buf, size_t blen,
                                     const mbedtls_ecp_point *Q,
                                     const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b0a0      	sub	sp, #128	; 0x80
 8008fa0:	af04      	add	r7, sp, #16
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;
 8008faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fb4:	667b      	str	r3, [r7, #100]	; 0x64

    mbedtls_ecp_point_init( &R );
 8008fb6:	f107 0310 	add.w	r3, r7, #16
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 faca 	bl	8009554 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 8008fc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fb fbe5 	bl	8004794 <mbedtls_mpi_init>
 8008fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fb fbe0 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 8008fd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fb fbdb 	bl	8004794 <mbedtls_mpi_init>
 8008fde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fb fbd6 	bl	8004794 <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <ecdsa_verify_restartable+0x58>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8008ff0:	4b68      	ldr	r3, [pc, #416]	; (8009194 <ecdsa_verify_restartable+0x1f8>)
 8008ff2:	e0cb      	b.n	800918c <ecdsa_verify_restartable+0x1f0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008ff8:	f7fc fbc9 	bl	800578e <mbedtls_mpi_cmp_int>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	db18      	blt.n	8009034 <ecdsa_verify_restartable+0x98>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	334c      	adds	r3, #76	; 0x4c
 8009006:	4619      	mov	r1, r3
 8009008:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800900a:	f7fc fb25 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	da0f      	bge.n	8009034 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8009014:	2101      	movs	r1, #1
 8009016:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009018:	f7fc fbb9 	bl	800578e <mbedtls_mpi_cmp_int>
 800901c:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800901e:	2b00      	cmp	r3, #0
 8009020:	db08      	blt.n	8009034 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	334c      	adds	r3, #76	; 0x4c
 8009026:	4619      	mov	r1, r3
 8009028:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800902a:	f7fc fb15 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	db02      	blt.n	800903a <ecdsa_verify_restartable+0x9e>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 8009034:	4b58      	ldr	r3, [pc, #352]	; (8009198 <ecdsa_verify_restartable+0x1fc>)
 8009036:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 8009038:	e08e      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 800903a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fe27 	bl	8008c96 <derive_mpi>
 8009048:	66f8      	str	r0, [r7, #108]	; 0x6c
 800904a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d172      	bne.n	8009136 <ecdsa_verify_restartable+0x19a>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8009056:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800905a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800905c:	4618      	mov	r0, r3
 800905e:	f7fe ffa0 	bl	8007fa2 <mbedtls_mpi_inv_mod>
 8009062:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d167      	bne.n	800913a <ecdsa_verify_restartable+0x19e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 800906a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800906e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009072:	4619      	mov	r1, r3
 8009074:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009076:	f7fe f9a3 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800907a:	66f8      	str	r0, [r7, #108]	; 0x6c
 800907c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d15d      	bne.n	800913e <ecdsa_verify_restartable+0x1a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	334c      	adds	r3, #76	; 0x4c
 8009086:	461a      	mov	r2, r3
 8009088:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800908a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800908c:	f7fe fe00 	bl	8007c90 <mbedtls_mpi_mod_mpi>
 8009090:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d154      	bne.n	8009142 <ecdsa_verify_restartable+0x1a6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 8009098:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800909c:	461a      	mov	r2, r3
 800909e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80090a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80090a2:	f7fe f98d 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 80090a6:	66f8      	str	r0, [r7, #108]	; 0x6c
 80090a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d14b      	bne.n	8009146 <ecdsa_verify_restartable+0x1aa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	334c      	adds	r3, #76	; 0x4c
 80090b2:	461a      	mov	r2, r3
 80090b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80090b6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80090b8:	f7fe fdea 	bl	8007c90 <mbedtls_mpi_mod_mpi>
 80090bc:	66f8      	str	r0, [r7, #108]	; 0x6c
 80090be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d142      	bne.n	800914a <ecdsa_verify_restartable+0x1ae>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80090ca:	f107 0110 	add.w	r1, r7, #16
 80090ce:	2300      	movs	r3, #0
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4613      	mov	r3, r2
 80090dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f003 f9ca 	bl	800c478 <mbedtls_ecp_muladd_restartable>
 80090e4:	66f8      	str	r0, [r7, #108]	; 0x6c
 80090e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d130      	bne.n	800914e <ecdsa_verify_restartable+0x1b2>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 80090ec:	f107 0310 	add.w	r3, r7, #16
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fb84 	bl	80097fe <mbedtls_ecp_is_zero>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <ecdsa_verify_restartable+0x166>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 80090fc:	4b26      	ldr	r3, [pc, #152]	; (8009198 <ecdsa_verify_restartable+0x1fc>)
 80090fe:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 8009100:	e02a      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8009108:	f107 0110 	add.w	r1, r7, #16
 800910c:	f107 0310 	add.w	r3, r7, #16
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe fdbd 	bl	8007c90 <mbedtls_mpi_mod_mpi>
 8009116:	66f8      	str	r0, [r7, #108]	; 0x6c
 8009118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d119      	bne.n	8009152 <ecdsa_verify_restartable+0x1b6>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 800911e:	f107 0310 	add.w	r3, r7, #16
 8009122:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009124:	4618      	mov	r0, r3
 8009126:	f7fc fa97 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d012      	beq.n	8009156 <ecdsa_verify_restartable+0x1ba>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 8009130:	4b19      	ldr	r3, [pc, #100]	; (8009198 <ecdsa_verify_restartable+0x1fc>)
 8009132:	66fb      	str	r3, [r7, #108]	; 0x6c
        goto cleanup;
 8009134:	e010      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8009136:	bf00      	nop
 8009138:	e00e      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 800913a:	bf00      	nop
 800913c:	e00c      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 800913e:	bf00      	nop
 8009140:	e00a      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 8009142:	bf00      	nop
 8009144:	e008      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 8009146:	bf00      	nop
 8009148:	e006      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 800914a:	bf00      	nop
 800914c:	e004      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 800914e:	bf00      	nop
 8009150:	e002      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 8009152:	bf00      	nop
 8009154:	e000      	b.n	8009158 <ecdsa_verify_restartable+0x1bc>
    }

cleanup:
 8009156:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 8009158:	f107 0310 	add.w	r3, r7, #16
 800915c:	4618      	mov	r0, r3
 800915e:	f000 fa64 	bl	800962a <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 8009162:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009166:	4618      	mov	r0, r3
 8009168:	f7fb fb27 	bl	80047ba <mbedtls_mpi_free>
 800916c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009170:	4618      	mov	r0, r3
 8009172:	f7fb fb22 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 8009176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800917a:	4618      	mov	r0, r3
 800917c:	f7fb fb1d 	bl	80047ba <mbedtls_mpi_free>
 8009180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009184:	4618      	mov	r0, r3
 8009186:	f7fb fb18 	bl	80047ba <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
 800918a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800918c:	4618      	mov	r0, r3
 800918e:	3770      	adds	r7, #112	; 0x70
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	ffffb080 	.word	0xffffb080
 8009198:	ffffb200 	.word	0xffffb200

0800919c <ecdsa_signature_to_asn1>:
/*
 * Convert a signature (given by context) to ASN.1
 */
static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                    unsigned char *sig, size_t *slen )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b0a2      	sub	sp, #136	; 0x88
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
 80091a8:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    unsigned char *p = buf + sizeof( buf );
 80091aa:	f107 0314 	add.w	r3, r7, #20
 80091ae:	3369      	adds	r3, #105	; 0x69
 80091b0:	613b      	str	r3, [r7, #16]
    size_t len = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 80091b8:	f107 0114 	add.w	r1, r7, #20
 80091bc:	f107 0310 	add.w	r3, r7, #16
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fb fa63 	bl	800468e <mbedtls_asn1_write_mpi>
 80091c8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80091cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	da02      	bge.n	80091da <ecdsa_signature_to_asn1+0x3e>
 80091d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091d8:	e05b      	b.n	8009292 <ecdsa_signature_to_asn1+0xf6>
 80091da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80091e2:	4413      	add	r3, r2
 80091e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 80091e8:	f107 0114 	add.w	r1, r7, #20
 80091ec:	f107 0310 	add.w	r3, r7, #16
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fb fa4b 	bl	800468e <mbedtls_asn1_write_mpi>
 80091f8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80091fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009200:	2b00      	cmp	r3, #0
 8009202:	da02      	bge.n	800920a <ecdsa_signature_to_asn1+0x6e>
 8009204:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009208:	e043      	b.n	8009292 <ecdsa_signature_to_asn1+0xf6>
 800920a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800920e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009212:	4413      	add	r3, r2
 8009214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 8009218:	f107 0114 	add.w	r1, r7, #20
 800921c:	f107 0310 	add.w	r3, r7, #16
 8009220:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009224:	4618      	mov	r0, r3
 8009226:	f7fb f92a 	bl	800447e <mbedtls_asn1_write_len>
 800922a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800922e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009232:	2b00      	cmp	r3, #0
 8009234:	da02      	bge.n	800923c <ecdsa_signature_to_asn1+0xa0>
 8009236:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800923a:	e02a      	b.n	8009292 <ecdsa_signature_to_asn1+0xf6>
 800923c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009240:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009244:	4413      	add	r3, r2
 8009246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 800924a:	f107 0114 	add.w	r1, r7, #20
 800924e:	f107 0310 	add.w	r3, r7, #16
 8009252:	2230      	movs	r2, #48	; 0x30
 8009254:	4618      	mov	r0, r3
 8009256:	f7fb f9fa 	bl	800464e <mbedtls_asn1_write_tag>
 800925a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800925e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	da02      	bge.n	800926c <ecdsa_signature_to_asn1+0xd0>
 8009266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800926a:	e012      	b.n	8009292 <ecdsa_signature_to_asn1+0xf6>
 800926c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009270:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009274:	4413      	add	r3, r2
 8009276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );

    memcpy( sig, p, len );
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f008 fae6 	bl	8011854 <memcpy>
    *slen = len;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800928e:	601a      	str	r2, [r3, #0]

    return( 0 );
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3788      	adds	r7, #136	; 0x88
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800929a:	b590      	push	{r4, r7, lr}
 800929c:	b093      	sub	sp, #76	; 0x4c
 800929e:	af06      	add	r7, sp, #24
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	603b      	str	r3, [r7, #0]
 80092a6:	460b      	mov	r3, r1
 80092a8:	72fb      	strb	r3, [r7, #11]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
 80092aa:	f107 0320 	add.w	r3, r7, #32
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fb fa70 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80092b4:	f107 0314 	add.w	r3, r7, #20
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fb fa6b 	bl	8004794 <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80092c6:	f107 0214 	add.w	r2, r7, #20
 80092ca:	f107 0120 	add.w	r1, r7, #32
 80092ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d0:	9304      	str	r3, [sp, #16]
 80092d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d4:	9303      	str	r3, [sp, #12]
 80092d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092d8:	9302      	str	r3, [sp, #8]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	4623      	mov	r3, r4
 80092e4:	f7ff fd24 	bl	8008d30 <ecdsa_sign_restartable>
 80092e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10b      	bne.n	8009308 <mbedtls_ecdsa_write_signature_restartable+0x6e>
                         hash, hlen, f_rng, p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 80092f0:	f107 0114 	add.w	r1, r7, #20
 80092f4:	f107 0020 	add.w	r0, r7, #32
 80092f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092fc:	f7ff ff4e 	bl	800919c <ecdsa_signature_to_asn1>
 8009300:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	2b00      	cmp	r3, #0

cleanup:
 8009306:	e000      	b.n	800930a <mbedtls_ecdsa_write_signature_restartable+0x70>
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
 8009308:	bf00      	nop
    mbedtls_mpi_free( &r );
 800930a:	f107 0320 	add.w	r3, r7, #32
 800930e:	4618      	mov	r0, r3
 8009310:	f7fb fa53 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	4618      	mov	r0, r3
 800931a:	f7fb fa4e 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009320:	4618      	mov	r0, r3
 8009322:	3734      	adds	r7, #52	; 0x34
 8009324:	46bd      	mov	sp, r7
 8009326:	bd90      	pop	{r4, r7, pc}

08009328 <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	; 0x28
 800932c:	af06      	add	r7, sp, #24
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	607a      	str	r2, [r7, #4]
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	460b      	mov	r3, r1
 8009336:	72fb      	strb	r3, [r7, #11]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
 8009338:	7af9      	ldrb	r1, [r7, #11]
 800933a:	2300      	movs	r3, #0
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	9302      	str	r3, [sp, #8]
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff ffa1 	bl	800929a <mbedtls_ecdsa_write_signature_restartable>
 8009358:	4603      	mov	r3, r0
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	af02      	add	r7, sp, #8
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	603b      	str	r3, [r7, #0]
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    return( mbedtls_ecdsa_read_signature_restartable(
 8009370:	2300      	movs	r3, #0
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 f806 	bl	8009390 <mbedtls_ecdsa_read_signature_restartable>
 8009384:	4603      	mov	r3, r0
                ctx, hash, hlen, sig, slen, NULL ) );
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b092      	sub	sp, #72	; 0x48
 8009394:	af04      	add	r7, sp, #16
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char *p = (unsigned char *) sig;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const unsigned char *end = sig + slen;
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093a6:	4413      	add	r3, r2
 80093a8:	633b      	str	r3, [r7, #48]	; 0x30
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 80093aa:	f107 031c 	add.w	r3, r7, #28
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fb f9f0 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80093b4:	f107 0310 	add.w	r3, r7, #16
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fb f9eb 	bl	8004794 <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80093be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80093c2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80093c6:	2330      	movs	r3, #48	; 0x30
 80093c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093ca:	f7fb f809 	bl	80043e0 <mbedtls_asn1_get_tag>
 80093ce:	6378      	str	r0, [r7, #52]	; 0x34
 80093d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <mbedtls_ecdsa_read_signature_restartable+0x50>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	f5a3 439f 	sub.w	r3, r3, #20352	; 0x4f80
 80093dc:	637b      	str	r3, [r7, #52]	; 0x34
        goto cleanup;
 80093de:	e044      	b.n	800946a <mbedtls_ecdsa_read_signature_restartable+0xda>
    }

    if( p + len != end )
 80093e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	4413      	add	r3, r2
 80093e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d002      	beq.n	80093f2 <mbedtls_ecdsa_read_signature_restartable+0x62>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 80093ec:	4b26      	ldr	r3, [pc, #152]	; (8009488 <mbedtls_ecdsa_read_signature_restartable+0xf8>)
 80093ee:	637b      	str	r3, [r7, #52]	; 0x34
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
 80093f0:	e03b      	b.n	800946a <mbedtls_ecdsa_read_signature_restartable+0xda>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 80093f2:	f107 021c 	add.w	r2, r7, #28
 80093f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fb f818 	bl	8004432 <mbedtls_asn1_get_mpi>
 8009402:	6378      	str	r0, [r7, #52]	; 0x34
 8009404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10b      	bne.n	8009422 <mbedtls_ecdsa_read_signature_restartable+0x92>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
 800940a:	f107 0210 	add.w	r2, r7, #16
 800940e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009414:	4618      	mov	r0, r3
 8009416:	f7fb f80c 	bl	8004432 <mbedtls_asn1_get_mpi>
 800941a:	6378      	str	r0, [r7, #52]	; 0x34
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <mbedtls_ecdsa_read_signature_restartable+0x9c>
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8009422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009424:	f5a3 439f 	sub.w	r3, r3, #20352	; 0x4f80
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
        goto cleanup;
 800942a:	e01e      	b.n	800946a <mbedtls_ecdsa_read_signature_restartable+0xda>
#if defined(MBEDTLS_ECDSA_VERIFY_ALT)
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
                                      &ctx->Q, &r, &s ) ) != 0 )
        goto cleanup;
#else
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 800942c:	68f8      	ldr	r0, [r7, #12]
                              &ctx->Q, &r, &s, rs_ctx ) ) != 0 )
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f103 0288 	add.w	r2, r3, #136	; 0x88
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 8009434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	f107 0310 	add.w	r3, r7, #16
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	f107 031c 	add.w	r3, r7, #28
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	4613      	mov	r3, r2
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	f7ff fda7 	bl	8008f9c <ecdsa_verify_restartable>
 800944e:	6378      	str	r0, [r7, #52]	; 0x34
 8009450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009452:	2b00      	cmp	r3, #0
 8009454:	d106      	bne.n	8009464 <mbedtls_ecdsa_read_signature_restartable+0xd4>
#endif /* MBEDTLS_ECDSA_VERIFY_ALT */

    /* At this point we know that the buffer starts with a valid signature.
     * Return 0 if the buffer just contains the signature, and a specific
     * error code if the valid signature is followed by more data. */
    if( p != end )
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800945a:	429a      	cmp	r2, r3
 800945c:	d004      	beq.n	8009468 <mbedtls_ecdsa_read_signature_restartable+0xd8>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 800945e:	4b0b      	ldr	r3, [pc, #44]	; (800948c <mbedtls_ecdsa_read_signature_restartable+0xfc>)
 8009460:	637b      	str	r3, [r7, #52]	; 0x34
 8009462:	e002      	b.n	800946a <mbedtls_ecdsa_read_signature_restartable+0xda>
        goto cleanup;
 8009464:	bf00      	nop
 8009466:	e000      	b.n	800946a <mbedtls_ecdsa_read_signature_restartable+0xda>

cleanup:
 8009468:	bf00      	nop
    mbedtls_mpi_free( &r );
 800946a:	f107 031c 	add.w	r3, r7, #28
 800946e:	4618      	mov	r0, r3
 8009470:	f7fb f9a3 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8009474:	f107 0310 	add.w	r3, r7, #16
 8009478:	4618      	mov	r0, r3
 800947a:	f7fb f99e 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800947e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009480:	4618      	mov	r0, r3
 8009482:	3738      	adds	r7, #56	; 0x38
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	ffffb01a 	.word	0xffffb01a
 800948c:	ffffb400 	.word	0xffffb400

08009490 <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 f973 	bl	800978c <mbedtls_ecp_group_copy>
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d119      	bne.n	80094e2 <mbedtls_ecdsa_from_keypair+0x52>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	337c      	adds	r3, #124	; 0x7c
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f7fb fa4c 	bl	8004958 <mbedtls_mpi_copy>
 80094c0:	60f8      	str	r0, [r7, #12]
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10c      	bne.n	80094e2 <mbedtls_ecdsa_from_keypair+0x52>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	3388      	adds	r3, #136	; 0x88
 80094d2:	4619      	mov	r1, r3
 80094d4:	4610      	mov	r0, r2
 80094d6:	f000 f928 	bl	800972a <mbedtls_ecp_copy>
 80094da:	60f8      	str	r0, [r7, #12]
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <mbedtls_ecdsa_from_keypair+0x58>
    {
        mbedtls_ecdsa_free( ctx );
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f810 	bl	8009508 <mbedtls_ecdsa_free>
    }

    return( ret );
 80094e8:	68fb      	ldr	r3, [r7, #12]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <mbedtls_ecdsa_init>:

/*
 * Initialize context
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f87f 	bl	80095fe <mbedtls_ecp_keypair_init>
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <mbedtls_ecdsa_free>:

/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <mbedtls_ecdsa_free+0x16>
        return;

    mbedtls_ecp_keypair_free( ctx );
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f8ed 	bl	80096f6 <mbedtls_ecp_keypair_free>
 800951c:	e000      	b.n	8009520 <mbedtls_ecdsa_free+0x18>
        return;
 800951e:	bf00      	nop
}
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <ecp_get_type>:

/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
    if( grp->G.X.p == NULL )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <ecp_get_type+0x14>
        return( ECP_TYPE_NONE );
 8009536:	2300      	movs	r3, #0
 8009538:	e006      	b.n	8009548 <ecp_get_type+0x22>

    if( grp->G.Y.p == NULL )
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <ecp_get_type+0x20>
        return( ECP_TYPE_MONTGOMERY );
 8009542:	2302      	movs	r3, #2
 8009544:	e000      	b.n	8009548 <ecp_get_type+0x22>
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 8009546:	2301      	movs	r3, #1
}
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4618      	mov	r0, r3
 8009560:	f7fb f918 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	330c      	adds	r3, #12
 8009568:	4618      	mov	r0, r3
 800956a:	f7fb f913 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3318      	adds	r3, #24
 8009572:	4618      	mov	r0, r3
 8009574:	f7fb f90e 	bl	8004794 <mbedtls_mpi_init>
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
    mbedtls_mpi_init( &grp->P );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3304      	adds	r3, #4
 8009592:	4618      	mov	r0, r3
 8009594:	f7fb f8fe 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3310      	adds	r3, #16
 800959c:	4618      	mov	r0, r3
 800959e:	f7fb f8f9 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	331c      	adds	r3, #28
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fb f8f4 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3328      	adds	r3, #40	; 0x28
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff ffcf 	bl	8009554 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	334c      	adds	r3, #76	; 0x4c
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fb f8ea 	bl	8004794 <mbedtls_mpi_init>
    grp->pbits = 0;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	659a      	str	r2, [r3, #88]	; 0x58
    grp->nbits = 0;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	65da      	str	r2, [r3, #92]	; 0x5c
    grp->h = 0;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	661a      	str	r2, [r3, #96]	; 0x60
    grp->modp = NULL;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	665a      	str	r2, [r3, #100]	; 0x64
    grp->t_pre = NULL;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	669a      	str	r2, [r3, #104]	; 0x68
    grp->t_post = NULL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	66da      	str	r2, [r3, #108]	; 0x6c
    grp->t_data = NULL;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	671a      	str	r2, [r3, #112]	; 0x70
    grp->T = NULL;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	675a      	str	r2, [r3, #116]	; 0x74
    grp->T_size = 0;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	679a      	str	r2, [r3, #120]	; 0x78
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b082      	sub	sp, #8
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff ffb9 	bl	8009580 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	337c      	adds	r3, #124	; 0x7c
 8009612:	4618      	mov	r0, r3
 8009614:	f7fb f8be 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3388      	adds	r3, #136	; 0x88
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff ff99 	bl	8009554 <mbedtls_ecp_point_init>
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
    if( pt == NULL )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00e      	beq.n	8009656 <mbedtls_ecp_point_free+0x2c>
        return;

    mbedtls_mpi_free( &( pt->X ) );
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4618      	mov	r0, r3
 800963c:	f7fb f8bd 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	330c      	adds	r3, #12
 8009644:	4618      	mov	r0, r3
 8009646:	f7fb f8b8 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3318      	adds	r3, #24
 800964e:	4618      	mov	r0, r3
 8009650:	f7fb f8b3 	bl	80047ba <mbedtls_mpi_free>
 8009654:	e000      	b.n	8009658 <mbedtls_ecp_point_free+0x2e>
        return;
 8009656:	bf00      	nop
}
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
    size_t i;

    if( grp == NULL )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d040      	beq.n	80096ee <mbedtls_ecp_group_free+0x90>
        return;

    if( grp->h != 1 )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009670:	2b01      	cmp	r3, #1
 8009672:	d018      	beq.n	80096a6 <mbedtls_ecp_group_free+0x48>
    {
        mbedtls_mpi_free( &grp->P );
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3304      	adds	r3, #4
 8009678:	4618      	mov	r0, r3
 800967a:	f7fb f89e 	bl	80047ba <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3310      	adds	r3, #16
 8009682:	4618      	mov	r0, r3
 8009684:	f7fb f899 	bl	80047ba <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	331c      	adds	r3, #28
 800968c:	4618      	mov	r0, r3
 800968e:	f7fb f894 	bl	80047ba <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3328      	adds	r3, #40	; 0x28
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff ffc7 	bl	800962a <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	334c      	adds	r3, #76	; 0x4c
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fb f88a 	bl	80047ba <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01a      	beq.n	80096e4 <mbedtls_ecp_group_free+0x86>
    {
        for( i = 0; i < grp->T_size; i++ )
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	e00d      	b.n	80096d0 <mbedtls_ecp_group_free+0x72>
            mbedtls_ecp_point_free( &grp->T[i] );
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4613      	mov	r3, r2
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	440b      	add	r3, r1
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7ff ffb0 	bl	800962a <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3301      	adds	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d3ec      	bcc.n	80096b4 <mbedtls_ecp_group_free+0x56>
        mbedtls_free( grp->T );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096de:	4618      	mov	r0, r3
 80096e0:	f008 f8b0 	bl	8011844 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 80096e4:	217c      	movs	r1, #124	; 0x7c
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f005 f97e 	bl	800e9e8 <mbedtls_platform_zeroize>
 80096ec:	e000      	b.n	80096f0 <mbedtls_ecp_group_free+0x92>
        return;
 80096ee:	bf00      	nop
}
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
    if( key == NULL )
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00e      	beq.n	8009722 <mbedtls_ecp_keypair_free+0x2c>
        return;

    mbedtls_ecp_group_free( &key->grp );
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff ffa9 	bl	800965e <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	337c      	adds	r3, #124	; 0x7c
 8009710:	4618      	mov	r0, r3
 8009712:	f7fb f852 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3388      	adds	r3, #136	; 0x88
 800971a:	4618      	mov	r0, r3
 800971c:	f7ff ff85 	bl	800962a <mbedtls_ecp_point_free>
 8009720:	e000      	b.n	8009724 <mbedtls_ecp_keypair_free+0x2e>
        return;
 8009722:	bf00      	nop
}
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	4611      	mov	r1, r2
 800973a:	4618      	mov	r0, r3
 800973c:	f7fb f90c 	bl	8004958 <mbedtls_mpi_copy>
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d119      	bne.n	800977c <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f103 020c 	add.w	r2, r3, #12
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	330c      	adds	r3, #12
 8009752:	4619      	mov	r1, r3
 8009754:	4610      	mov	r0, r2
 8009756:	f7fb f8ff 	bl	8004958 <mbedtls_mpi_copy>
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10e      	bne.n	8009780 <mbedtls_ecp_copy+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f103 0218 	add.w	r2, r3, #24
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	3318      	adds	r3, #24
 800976c:	4619      	mov	r1, r3
 800976e:	4610      	mov	r0, r2
 8009770:	f7fb f8f2 	bl	8004958 <mbedtls_mpi_copy>
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0

cleanup:
 800977a:	e002      	b.n	8009782 <mbedtls_ecp_copy+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 800977c:	bf00      	nop
 800977e:	e000      	b.n	8009782 <mbedtls_ecp_copy+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8009780:	bf00      	nop
    return( ret );
 8009782:	68fb      	ldr	r3, [r7, #12]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <mbedtls_ecp_group_copy>:

/*
 * Copy the contents of a group object
 */
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( dst != NULL );
    ECP_VALIDATE_RET( src != NULL );

    return( mbedtls_ecp_group_load( dst, src->id ) );
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f003 fa51 	bl	800cc44 <mbedtls_ecp_group_load>
 80097a2:	4603      	mov	r3, r0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2101      	movs	r1, #1
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fb fa30 	bl	8004c1e <mbedtls_mpi_lset>
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d113      	bne.n	80097ee <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	330c      	adds	r3, #12
 80097ca:	2101      	movs	r1, #1
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fb fa26 	bl	8004c1e <mbedtls_mpi_lset>
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10b      	bne.n	80097f2 <mbedtls_ecp_set_zero+0x46>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3318      	adds	r3, #24
 80097de:	2100      	movs	r1, #0
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fb fa1c 	bl	8004c1e <mbedtls_mpi_lset>
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b00      	cmp	r3, #0

cleanup:
 80097ec:	e002      	b.n	80097f4 <mbedtls_ecp_set_zero+0x48>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80097ee:	bf00      	nop
 80097f0:	e000      	b.n	80097f4 <mbedtls_ecp_set_zero+0x48>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 80097f2:	bf00      	nop
    return( ret );
 80097f4:	68fb      	ldr	r3, [r7, #12]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3318      	adds	r3, #24
 800980a:	2100      	movs	r1, #0
 800980c:	4618      	mov	r0, r3
 800980e:	f7fb ffbe 	bl	800578e <mbedtls_mpi_cmp_int>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	bf0c      	ite	eq
 8009818:	2301      	moveq	r3, #1
 800981a:	2300      	movne	r3, #0
 800981c:	b2db      	uxtb	r3, r3
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <ecp_modp>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
    int ret;

    if( grp->modp == NULL )
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009836:	2b00      	cmp	r3, #0
 8009838:	d108      	bne.n	800984c <ecp_modp+0x24>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	3304      	adds	r3, #4
 800983e:	461a      	mov	r2, r3
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7fe fa24 	bl	8007c90 <mbedtls_mpi_mod_mpi>
 8009848:	4603      	mov	r3, r0
 800984a:	e050      	b.n	80098ee <ecp_modp+0xc6>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	da06      	bge.n	8009862 <ecp_modp+0x3a>
 8009854:	2100      	movs	r1, #0
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7fb ff99 	bl	800578e <mbedtls_mpi_cmp_int>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d108      	bne.n	8009874 <ecp_modp+0x4c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7fb fad5 	bl	8004e12 <mbedtls_mpi_bitlen>
 8009868:	4602      	mov	r2, r0
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800986e:	005b      	lsls	r3, r3, #1
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8009870:	429a      	cmp	r2, r3
 8009872:	d901      	bls.n	8009878 <ecp_modp+0x50>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8009874:	4b20      	ldr	r3, [pc, #128]	; (80098f8 <ecp_modp+0xd0>)
 8009876:	e03a      	b.n	80098ee <ecp_modp+0xc6>
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d12c      	bne.n	80098e2 <ecp_modp+0xba>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 8009888:	e00a      	b.n	80098a0 <ecp_modp+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	3304      	adds	r3, #4
 800988e:	461a      	mov	r2, r3
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7fc f90f 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d122      	bne.n	80098e6 <ecp_modp+0xbe>
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	da12      	bge.n	80098ce <ecp_modp+0xa6>
 80098a8:	2100      	movs	r1, #0
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f7fb ff6f 	bl	800578e <mbedtls_mpi_cmp_int>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e9      	bne.n	800988a <ecp_modp+0x62>

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 80098b6:	e00a      	b.n	80098ce <ecp_modp+0xa6>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	3304      	adds	r3, #4
 80098bc:	461a      	mov	r2, r3
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7fc f894 	bl	80059ee <mbedtls_mpi_sub_abs>
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10d      	bne.n	80098ea <ecp_modp+0xc2>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	3304      	adds	r3, #4
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fb febf 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	daeb      	bge.n	80098b8 <ecp_modp+0x90>

cleanup:
 80098e0:	e004      	b.n	80098ec <ecp_modp+0xc4>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 80098e2:	bf00      	nop
 80098e4:	e002      	b.n	80098ec <ecp_modp+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 80098e6:	bf00      	nop
 80098e8:	e000      	b.n	80098ec <ecp_modp+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 80098ea:	bf00      	nop
    return( ret );
 80098ec:	68fb      	ldr	r3, [r7, #12]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	ffffb080 	.word	0xffffb080

080098fc <ecp_normalize_jac>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	; 0x28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	3318      	adds	r3, #24
 800990a:	2100      	movs	r1, #0
 800990c:	4618      	mov	r0, r3
 800990e:	f7fb ff3e 	bl	800578e <mbedtls_mpi_cmp_int>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <ecp_normalize_jac+0x20>
        return( 0 );
 8009918:	2300      	movs	r3, #0
 800991a:	e098      	b.n	8009a4e <ecp_normalize_jac+0x152>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800991c:	f107 0318 	add.w	r3, r7, #24
 8009920:	4618      	mov	r0, r3
 8009922:	f7fa ff37 	bl	8004794 <mbedtls_mpi_init>
 8009926:	f107 030c 	add.w	r3, r7, #12
 800992a:	4618      	mov	r0, r3
 800992c:	f7fa ff32 	bl	8004794 <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	f103 0118 	add.w	r1, r3, #24
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	1d1a      	adds	r2, r3, #4
 800993a:	f107 0318 	add.w	r3, r7, #24
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe fb2f 	bl	8007fa2 <mbedtls_mpi_inv_mod>
 8009944:	6278      	str	r0, [r7, #36]	; 0x24
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	d164      	bne.n	8009a16 <ecp_normalize_jac+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 800994c:	f107 0218 	add.w	r2, r7, #24
 8009950:	f107 0118 	add.w	r1, r7, #24
 8009954:	f107 030c 	add.w	r3, r7, #12
 8009958:	4618      	mov	r0, r3
 800995a:	f7fd fd31 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800995e:	6278      	str	r0, [r7, #36]	; 0x24
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	2b00      	cmp	r3, #0
 8009964:	d159      	bne.n	8009a1a <ecp_normalize_jac+0x11e>
 8009966:	f107 030c 	add.w	r3, r7, #12
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff ff5b 	bl	8009828 <ecp_modp>
 8009972:	6278      	str	r0, [r7, #36]	; 0x24
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	d151      	bne.n	8009a1e <ecp_normalize_jac+0x122>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	f107 020c 	add.w	r2, r7, #12
 8009982:	4618      	mov	r0, r3
 8009984:	f7fd fd1c 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009988:	6278      	str	r0, [r7, #36]	; 0x24
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	d148      	bne.n	8009a22 <ecp_normalize_jac+0x126>
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	4618      	mov	r0, r3
 8009996:	f7ff ff47 	bl	8009828 <ecp_modp>
 800999a:	6278      	str	r0, [r7, #36]	; 0x24
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d141      	bne.n	8009a26 <ecp_normalize_jac+0x12a>

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	f103 000c 	add.w	r0, r3, #12
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	330c      	adds	r3, #12
 80099ac:	f107 020c 	add.w	r2, r7, #12
 80099b0:	4619      	mov	r1, r3
 80099b2:	f7fd fd05 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 80099b6:	6278      	str	r0, [r7, #36]	; 0x24
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d135      	bne.n	8009a2a <ecp_normalize_jac+0x12e>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	330c      	adds	r3, #12
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff ff2f 	bl	8009828 <ecp_modp>
 80099ca:	6278      	str	r0, [r7, #36]	; 0x24
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d12d      	bne.n	8009a2e <ecp_normalize_jac+0x132>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	f103 000c 	add.w	r0, r3, #12
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	330c      	adds	r3, #12
 80099dc:	f107 0218 	add.w	r2, r7, #24
 80099e0:	4619      	mov	r1, r3
 80099e2:	f7fd fced 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 80099e6:	6278      	str	r0, [r7, #36]	; 0x24
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d121      	bne.n	8009a32 <ecp_normalize_jac+0x136>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff ff17 	bl	8009828 <ecp_modp>
 80099fa:	6278      	str	r0, [r7, #36]	; 0x24
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d119      	bne.n	8009a36 <ecp_normalize_jac+0x13a>

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	3318      	adds	r3, #24
 8009a06:	2101      	movs	r1, #1
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fb f908 	bl	8004c1e <mbedtls_mpi_lset>
 8009a0e:	6278      	str	r0, [r7, #36]	; 0x24
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	2b00      	cmp	r3, #0

cleanup:
 8009a14:	e010      	b.n	8009a38 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8009a16:	bf00      	nop
 8009a18:	e00e      	b.n	8009a38 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8009a1a:	bf00      	nop
 8009a1c:	e00c      	b.n	8009a38 <ecp_normalize_jac+0x13c>
 8009a1e:	bf00      	nop
 8009a20:	e00a      	b.n	8009a38 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8009a22:	bf00      	nop
 8009a24:	e008      	b.n	8009a38 <ecp_normalize_jac+0x13c>
 8009a26:	bf00      	nop
 8009a28:	e006      	b.n	8009a38 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8009a2a:	bf00      	nop
 8009a2c:	e004      	b.n	8009a38 <ecp_normalize_jac+0x13c>
 8009a2e:	bf00      	nop
 8009a30:	e002      	b.n	8009a38 <ecp_normalize_jac+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8009a32:	bf00      	nop
 8009a34:	e000      	b.n	8009a38 <ecp_normalize_jac+0x13c>
 8009a36:	bf00      	nop

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8009a38:	f107 0318 	add.w	r3, r7, #24
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fa febc 	bl	80047ba <mbedtls_mpi_free>
 8009a42:	f107 030c 	add.w	r3, r7, #12
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fa feb7 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3728      	adds	r7, #40	; 0x28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <ecp_normalize_jac_many>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b090      	sub	sp, #64	; 0x40
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d807      	bhi.n	8009a7a <ecp_normalize_jac_many+0x22>
        return( ecp_normalize_jac( grp, *T ) );
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff ff43 	bl	80098fc <ecp_normalize_jac>
 8009a76:	4603      	mov	r3, r0
 8009a78:	e1dc      	b.n	8009e34 <ecp_normalize_jac_many+0x3dc>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 8009a7a:	210c      	movs	r1, #12
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f007 feaf 	bl	80117e0 <calloc>
 8009a82:	4603      	mov	r3, r0
 8009a84:	637b      	str	r3, [r7, #52]	; 0x34
 8009a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <ecp_normalize_jac_many+0x38>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 8009a8c:	4b48      	ldr	r3, [pc, #288]	; (8009bb0 <ecp_normalize_jac_many+0x158>)
 8009a8e:	e1d1      	b.n	8009e34 <ecp_normalize_jac_many+0x3dc>

    for( i = 0; i < T_size; i++ )
 8009a90:	2300      	movs	r3, #0
 8009a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a94:	e00d      	b.n	8009ab2 <ecp_normalize_jac_many+0x5a>
        mbedtls_mpi_init( &c[i] );
 8009a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a98:	4613      	mov	r3, r2
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa4:	4413      	add	r3, r2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fa fe74 	bl	8004794 <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	3301      	adds	r3, #1
 8009ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d3ed      	bcc.n	8009a96 <ecp_normalize_jac_many+0x3e>

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8009aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fa fe68 	bl	8004794 <mbedtls_mpi_init>
 8009ac4:	f107 031c 	add.w	r3, r7, #28
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fa fe63 	bl	8004794 <mbedtls_mpi_init>
 8009ace:	f107 0310 	add.w	r3, r7, #16
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fa fe5e 	bl	8004794 <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3318      	adds	r3, #24
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009ae2:	f7fa ff39 	bl	8004958 <mbedtls_mpi_copy>
 8009ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f040 8155 	bne.w	8009d9a <ecp_normalize_jac_many+0x342>
    for( i = 1; i < T_size; i++ )
 8009af0:	2301      	movs	r3, #1
 8009af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009af4:	e031      	b.n	8009b5a <ecp_normalize_jac_many+0x102>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 8009af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009af8:	4613      	mov	r3, r2
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	461a      	mov	r2, r3
 8009b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b04:	1898      	adds	r0, r3, r2
 8009b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b08:	4613      	mov	r3, r2
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	3b0c      	subs	r3, #12
 8009b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b14:	18d1      	adds	r1, r2, r3
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3318      	adds	r3, #24
 8009b22:	461a      	mov	r2, r3
 8009b24:	f7fd fc4c 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009b28:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f040 8136 	bne.w	8009d9e <ecp_normalize_jac_many+0x346>
        MOD_MUL( c[i] );
 8009b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b34:	4613      	mov	r3, r2
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	4413      	add	r3, r2
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff fe6f 	bl	8009828 <ecp_modp>
 8009b4a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f040 8127 	bne.w	8009da2 <ecp_normalize_jac_many+0x34a>
    for( i = 1; i < T_size; i++ )
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	3301      	adds	r3, #1
 8009b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d3c9      	bcc.n	8009af6 <ecp_normalize_jac_many+0x9e>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	4613      	mov	r3, r2
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	3b0c      	subs	r3, #12
 8009b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b70:	18d1      	adds	r1, r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	1d1a      	adds	r2, r3, #4
 8009b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fa11 	bl	8007fa2 <mbedtls_mpi_inv_mod>
 8009b80:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 810e 	bne.w	8009da6 <ecp_normalize_jac_many+0x34e>

    for( i = T_size - 1; ; i-- )
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	63bb      	str	r3, [r7, #56]	; 0x38
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10e      	bne.n	8009bb4 <ecp_normalize_jac_many+0x15c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 8009b96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009b9a:	f107 031c 	add.w	r3, r7, #28
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fa fed9 	bl	8004958 <mbedtls_mpi_copy>
 8009ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d03f      	beq.n	8009c2e <ecp_normalize_jac_many+0x1d6>
 8009bae:	e119      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
 8009bb0:	ffffb280 	.word	0xffffb280
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8009bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	3b0c      	subs	r3, #12
 8009bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc2:	441a      	add	r2, r3
 8009bc4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009bc8:	f107 031c 	add.w	r3, r7, #28
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fd fbf7 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009bd2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 80e7 	bne.w	8009daa <ecp_normalize_jac_many+0x352>
 8009bdc:	f107 031c 	add.w	r3, r7, #28
 8009be0:	68f9      	ldr	r1, [r7, #12]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff fe20 	bl	8009828 <ecp_modp>
 8009be8:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f040 80de 	bne.w	8009dae <ecp_normalize_jac_many+0x356>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f103 0218 	add.w	r2, r3, #24
 8009c00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fd fbd9 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009c0e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f040 80cd 	bne.w	8009db2 <ecp_normalize_jac_many+0x35a>
 8009c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c1c:	68f9      	ldr	r1, [r7, #12]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fe02 	bl	8009828 <ecp_modp>
 8009c24:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 80c4 	bne.w	8009db6 <ecp_normalize_jac_many+0x35e>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8009c2e:	f107 021c 	add.w	r2, r7, #28
 8009c32:	f107 011c 	add.w	r1, r7, #28
 8009c36:	f107 0310 	add.w	r3, r7, #16
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fd fbc0 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009c40:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f040 80b8 	bne.w	8009dba <ecp_normalize_jac_many+0x362>
 8009c4a:	f107 0310 	add.w	r3, r7, #16
 8009c4e:	68f9      	ldr	r1, [r7, #12]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7ff fde9 	bl	8009828 <ecp_modp>
 8009c56:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f040 80af 	bne.w	8009dbe <ecp_normalize_jac_many+0x366>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	4413      	add	r3, r2
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	4413      	add	r3, r2
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4619      	mov	r1, r3
 8009c78:	f107 0310 	add.w	r3, r7, #16
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	f7fd fb9f 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009c82:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 809b 	bne.w	8009dc2 <ecp_normalize_jac_many+0x36a>
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	4413      	add	r3, r2
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7ff fdc5 	bl	8009828 <ecp_modp>
 8009c9e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f040 808f 	bne.w	8009dc6 <ecp_normalize_jac_many+0x36e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	4413      	add	r3, r2
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f103 000c 	add.w	r0, r3, #12
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	f107 0210 	add.w	r2, r7, #16
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	f7fd fb7a 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009ccc:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d17a      	bne.n	8009dca <ecp_normalize_jac_many+0x372>
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	4413      	add	r3, r2
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	330c      	adds	r3, #12
 8009ce0:	68f9      	ldr	r1, [r7, #12]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff fda0 	bl	8009828 <ecp_modp>
 8009ce8:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d16e      	bne.n	8009dce <ecp_normalize_jac_many+0x376>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f103 000c 	add.w	r0, r3, #12
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	4413      	add	r3, r2
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	330c      	adds	r3, #12
 8009d0a:	f107 021c 	add.w	r2, r7, #28
 8009d0e:	4619      	mov	r1, r3
 8009d10:	f7fd fb56 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009d14:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d15a      	bne.n	8009dd2 <ecp_normalize_jac_many+0x37a>
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	4413      	add	r3, r2
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	330c      	adds	r3, #12
 8009d28:	68f9      	ldr	r1, [r7, #12]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff fd7c 	bl	8009828 <ecp_modp>
 8009d30:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d14e      	bne.n	8009dd6 <ecp_normalize_jac_many+0x37e>
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	4413      	add	r3, r2
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fa fd9e 	bl	800488c <mbedtls_mpi_shrink>
 8009d50:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d140      	bne.n	8009dda <ecp_normalize_jac_many+0x382>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	4413      	add	r3, r2
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f103 020c 	add.w	r2, r3, #12
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	f7fa fd8d 	bl	800488c <mbedtls_mpi_shrink>
 8009d72:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d131      	bne.n	8009dde <ecp_normalize_jac_many+0x386>
        mbedtls_mpi_free( &T[i]->Z );
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	4413      	add	r3, r2
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3318      	adds	r3, #24
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fa fd17 	bl	80047ba <mbedtls_mpi_free>

        if( i == 0 )
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d027      	beq.n	8009de2 <ecp_normalize_jac_many+0x38a>
    for( i = T_size - 1; ; i-- )
 8009d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d94:	3b01      	subs	r3, #1
 8009d96:	63bb      	str	r3, [r7, #56]	; 0x38
        if( i == 0 ) {
 8009d98:	e6fa      	b.n	8009b90 <ecp_normalize_jac_many+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 8009d9a:	bf00      	nop
 8009d9c:	e022      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 8009d9e:	bf00      	nop
 8009da0:	e020      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
        MOD_MUL( c[i] );
 8009da2:	bf00      	nop
 8009da4:	e01e      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 8009da6:	bf00      	nop
 8009da8:	e01c      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8009daa:	bf00      	nop
 8009dac:	e01a      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
 8009dae:	bf00      	nop
 8009db0:	e018      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8009db2:	bf00      	nop
 8009db4:	e016      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
 8009db6:	bf00      	nop
 8009db8:	e014      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8009dba:	bf00      	nop
 8009dbc:	e012      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
 8009dbe:	bf00      	nop
 8009dc0:	e010      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8009dc2:	bf00      	nop
 8009dc4:	e00e      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
 8009dc6:	bf00      	nop
 8009dc8:	e00c      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8009dca:	bf00      	nop
 8009dcc:	e00a      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
 8009dce:	bf00      	nop
 8009dd0:	e008      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8009dd2:	bf00      	nop
 8009dd4:	e006      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
 8009dd6:	bf00      	nop
 8009dd8:	e004      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8009dda:	bf00      	nop
 8009ddc:	e002      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <ecp_normalize_jac_many+0x38c>
            break;
 8009de2:	bf00      	nop
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8009de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fa fce6 	bl	80047ba <mbedtls_mpi_free>
 8009dee:	f107 031c 	add.w	r3, r7, #28
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fa fce1 	bl	80047ba <mbedtls_mpi_free>
 8009df8:	f107 0310 	add.w	r3, r7, #16
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fa fcdc 	bl	80047ba <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 8009e02:	2300      	movs	r3, #0
 8009e04:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e06:	e00d      	b.n	8009e24 <ecp_normalize_jac_many+0x3cc>
        mbedtls_mpi_free( &c[i] );
 8009e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	4413      	add	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	461a      	mov	r2, r3
 8009e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e16:	4413      	add	r3, r2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fa fcce 	bl	80047ba <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 8009e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e20:	3301      	adds	r3, #1
 8009e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d3ed      	bcc.n	8009e08 <ecp_normalize_jac_many+0x3b0>
    mbedtls_free( c );
 8009e2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009e2e:	f007 fd09 	bl	8011844 <free>

    return( ret );
 8009e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3740      	adds	r7, #64	; 0x40
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08a      	sub	sp, #40	; 0x28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	71fb      	strb	r3, [r7, #7]
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 8009e4a:	f107 0314 	add.w	r3, r7, #20
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fa fca0 	bl	8004794 <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	1d19      	adds	r1, r3, #4
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f103 020c 	add.w	r2, r3, #12
 8009e5e:	f107 0314 	add.w	r3, r7, #20
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fb fe71 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8009e68:	6278      	str	r0, [r7, #36]	; 0x24
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d11e      	bne.n	8009eae <ecp_safe_invert_jac+0x72>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	330c      	adds	r3, #12
 8009e74:	2100      	movs	r1, #0
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fb fc89 	bl	800578e <mbedtls_mpi_cmp_int>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bf14      	ite	ne
 8009e82:	2301      	movne	r3, #1
 8009e84:	2300      	moveq	r3, #0
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f103 000c 	add.w	r0, r3, #12
 8009e92:	79fa      	ldrb	r2, [r7, #7]
 8009e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e98:	4013      	ands	r3, r2
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	f107 0314 	add.w	r3, r7, #20
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f7fa fdb5 	bl	8004a10 <mbedtls_mpi_safe_cond_assign>
 8009ea6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0

cleanup:
 8009eac:	e000      	b.n	8009eb0 <ecp_safe_invert_jac+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 8009eae:	bf00      	nop
    mbedtls_mpi_free( &mQY );
 8009eb0:	f107 0314 	add.w	r3, r7, #20
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fa fc80 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3728      	adds	r7, #40	; 0x28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b092      	sub	sp, #72	; 0x48
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 8009ed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fa fc5d 	bl	8004794 <mbedtls_mpi_init>
 8009eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fa fc58 	bl	8004794 <mbedtls_mpi_init>
 8009ee4:	f107 0320 	add.w	r3, r7, #32
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fa fc53 	bl	8004794 <mbedtls_mpi_init>
 8009eee:	f107 0314 	add.w	r3, r7, #20
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fa fc4e 	bl	8004794 <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f040 80ab 	bne.w	800a058 <ecp_double_jac+0x194>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f103 0118 	add.w	r1, r3, #24
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f103 0218 	add.w	r2, r3, #24
 8009f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd fa54 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009f18:	6478      	str	r0, [r7, #68]	; 0x44
 8009f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f040 834c 	bne.w	800a5ba <ecp_double_jac+0x6f6>
 8009f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f26:	68f9      	ldr	r1, [r7, #12]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7ff fc7d 	bl	8009828 <ecp_modp>
 8009f2e:	6478      	str	r0, [r7, #68]	; 0x44
 8009f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f040 8343 	bne.w	800a5be <ecp_double_jac+0x6fa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009f3e:	f107 0320 	add.w	r3, r7, #32
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fb fdb7 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8009f48:	6478      	str	r0, [r7, #68]	; 0x44
 8009f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f040 8338 	bne.w	800a5c2 <ecp_double_jac+0x6fe>
 8009f52:	e00d      	b.n	8009f70 <ecp_double_jac+0xac>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	1d1a      	adds	r2, r3, #4
 8009f58:	f107 0120 	add.w	r1, r7, #32
 8009f5c:	f107 0320 	add.w	r3, r7, #32
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fb fd44 	bl	80059ee <mbedtls_mpi_sub_abs>
 8009f66:	6478      	str	r0, [r7, #68]	; 0x44
 8009f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f040 832b 	bne.w	800a5c6 <ecp_double_jac+0x702>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	1d1a      	adds	r2, r3, #4
 8009f74:	f107 0320 	add.w	r3, r7, #32
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fb fb6c 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	dae6      	bge.n	8009f54 <ecp_double_jac+0x90>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009f8c:	f107 0314 	add.w	r3, r7, #20
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fb fdda 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 8009f96:	6478      	str	r0, [r7, #68]	; 0x44
 8009f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f040 8315 	bne.w	800a5ca <ecp_double_jac+0x706>
 8009fa0:	e00d      	b.n	8009fbe <ecp_double_jac+0xfa>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	1d1a      	adds	r2, r3, #4
 8009fa6:	f107 0114 	add.w	r1, r7, #20
 8009faa:	f107 0314 	add.w	r3, r7, #20
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fb fd81 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 8009fb4:	6478      	str	r0, [r7, #68]	; 0x44
 8009fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f040 8308 	bne.w	800a5ce <ecp_double_jac+0x70a>
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	da08      	bge.n	8009fd6 <ecp_double_jac+0x112>
 8009fc4:	f107 0314 	add.w	r3, r7, #20
 8009fc8:	2100      	movs	r1, #0
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fb fbdf 	bl	800578e <mbedtls_mpi_cmp_int>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e5      	bne.n	8009fa2 <ecp_double_jac+0xde>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8009fd6:	f107 0214 	add.w	r2, r7, #20
 8009fda:	f107 0120 	add.w	r1, r7, #32
 8009fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fd f9ec 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 8009fe8:	6478      	str	r0, [r7, #68]	; 0x44
 8009fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f040 82f0 	bne.w	800a5d2 <ecp_double_jac+0x70e>
 8009ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ff6:	68f9      	ldr	r1, [r7, #12]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff fc15 	bl	8009828 <ecp_modp>
 8009ffe:	6478      	str	r0, [r7, #68]	; 0x44
 800a000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a002:	2b00      	cmp	r3, #0
 800a004:	f040 82e7 	bne.w	800a5d6 <ecp_double_jac+0x712>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800a008:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a00c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a010:	2203      	movs	r2, #3
 800a012:	4618      	mov	r0, r3
 800a014:	f7fd fa84 	bl	8007520 <mbedtls_mpi_mul_int>
 800a018:	6478      	str	r0, [r7, #68]	; 0x44
 800a01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f040 82dc 	bne.w	800a5da <ecp_double_jac+0x716>
 800a022:	e00d      	b.n	800a040 <ecp_double_jac+0x17c>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	1d1a      	adds	r2, r3, #4
 800a028:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a02c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a030:	4618      	mov	r0, r3
 800a032:	f7fb fcdc 	bl	80059ee <mbedtls_mpi_sub_abs>
 800a036:	6478      	str	r0, [r7, #68]	; 0x44
 800a038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f040 82cf 	bne.w	800a5de <ecp_double_jac+0x71a>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	1d1a      	adds	r2, r3, #4
 800a044:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fb fb04 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	dae6      	bge.n	800a024 <ecp_double_jac+0x160>
 800a056:	e0bc      	b.n	800a1d2 <ecp_double_jac+0x30e>
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a060:	4618      	mov	r0, r3
 800a062:	f7fd f9ad 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a066:	6478      	str	r0, [r7, #68]	; 0x44
 800a068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f040 82b9 	bne.w	800a5e2 <ecp_double_jac+0x71e>
 800a070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a074:	68f9      	ldr	r1, [r7, #12]
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff fbd6 	bl	8009828 <ecp_modp>
 800a07c:	6478      	str	r0, [r7, #68]	; 0x44
 800a07e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 82b0 	bne.w	800a5e6 <ecp_double_jac+0x722>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800a086:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a08a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a08e:	2203      	movs	r2, #3
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd fa45 	bl	8007520 <mbedtls_mpi_mul_int>
 800a096:	6478      	str	r0, [r7, #68]	; 0x44
 800a098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f040 82a5 	bne.w	800a5ea <ecp_double_jac+0x726>
 800a0a0:	e00d      	b.n	800a0be <ecp_double_jac+0x1fa>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	1d1a      	adds	r2, r3, #4
 800a0a6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a0aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fb fc9d 	bl	80059ee <mbedtls_mpi_sub_abs>
 800a0b4:	6478      	str	r0, [r7, #68]	; 0x44
 800a0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f040 8298 	bne.w	800a5ee <ecp_double_jac+0x72a>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	1d1a      	adds	r2, r3, #4
 800a0c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fb fac5 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dae6      	bge.n	800a0a2 <ecp_double_jac+0x1de>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3310      	adds	r3, #16
 800a0d8:	2100      	movs	r1, #0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fb fb57 	bl	800578e <mbedtls_mpi_cmp_int>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d075      	beq.n	800a1d2 <ecp_double_jac+0x30e>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f103 0118 	add.w	r1, r3, #24
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f103 0218 	add.w	r2, r3, #24
 800a0f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fd f962 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a0fc:	6478      	str	r0, [r7, #68]	; 0x44
 800a0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a100:	2b00      	cmp	r3, #0
 800a102:	f040 8276 	bne.w	800a5f2 <ecp_double_jac+0x72e>
 800a106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a10a:	68f9      	ldr	r1, [r7, #12]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fb8b 	bl	8009828 <ecp_modp>
 800a112:	6478      	str	r0, [r7, #68]	; 0x44
 800a114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a116:	2b00      	cmp	r3, #0
 800a118:	f040 826d 	bne.w	800a5f6 <ecp_double_jac+0x732>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800a11c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a120:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a124:	f107 0320 	add.w	r3, r7, #32
 800a128:	4618      	mov	r0, r3
 800a12a:	f7fd f949 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a12e:	6478      	str	r0, [r7, #68]	; 0x44
 800a130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a132:	2b00      	cmp	r3, #0
 800a134:	f040 8261 	bne.w	800a5fa <ecp_double_jac+0x736>
 800a138:	f107 0320 	add.w	r3, r7, #32
 800a13c:	68f9      	ldr	r1, [r7, #12]
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff fb72 	bl	8009828 <ecp_modp>
 800a144:	6478      	str	r0, [r7, #68]	; 0x44
 800a146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f040 8258 	bne.w	800a5fe <ecp_double_jac+0x73a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f103 0210 	add.w	r2, r3, #16
 800a154:	f107 0120 	add.w	r1, r7, #32
 800a158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fd f92f 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a162:	6478      	str	r0, [r7, #68]	; 0x44
 800a164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a166:	2b00      	cmp	r3, #0
 800a168:	f040 824b 	bne.w	800a602 <ecp_double_jac+0x73e>
 800a16c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a170:	68f9      	ldr	r1, [r7, #12]
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff fb58 	bl	8009828 <ecp_modp>
 800a178:	6478      	str	r0, [r7, #68]	; 0x44
 800a17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f040 8242 	bne.w	800a606 <ecp_double_jac+0x742>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800a182:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a186:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a18a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fb fc91 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800a194:	6478      	str	r0, [r7, #68]	; 0x44
 800a196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f040 8236 	bne.w	800a60a <ecp_double_jac+0x746>
 800a19e:	e00d      	b.n	800a1bc <ecp_double_jac+0x2f8>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	1d1a      	adds	r2, r3, #4
 800a1a4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a1a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fb fc1e 	bl	80059ee <mbedtls_mpi_sub_abs>
 800a1b2:	6478      	str	r0, [r7, #68]	; 0x44
 800a1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f040 8229 	bne.w	800a60e <ecp_double_jac+0x74a>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	1d1a      	adds	r2, r3, #4
 800a1c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fb fa46 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dae6      	bge.n	800a1a0 <ecp_double_jac+0x2dc>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f103 010c 	add.w	r1, r3, #12
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f103 020c 	add.w	r2, r3, #12
 800a1de:	f107 0320 	add.w	r3, r7, #32
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fd f8ec 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a1e8:	6478      	str	r0, [r7, #68]	; 0x44
 800a1ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f040 8210 	bne.w	800a612 <ecp_double_jac+0x74e>
 800a1f2:	f107 0320 	add.w	r3, r7, #32
 800a1f6:	68f9      	ldr	r1, [r7, #12]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff fb15 	bl	8009828 <ecp_modp>
 800a1fe:	6478      	str	r0, [r7, #68]	; 0x44
 800a200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a202:	2b00      	cmp	r3, #0
 800a204:	f040 8207 	bne.w	800a616 <ecp_double_jac+0x752>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800a208:	f107 0320 	add.w	r3, r7, #32
 800a20c:	2101      	movs	r1, #1
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fb f860 	bl	80052d4 <mbedtls_mpi_shift_l>
 800a214:	6478      	str	r0, [r7, #68]	; 0x44
 800a216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f040 81fe 	bne.w	800a61a <ecp_double_jac+0x756>
 800a21e:	e00d      	b.n	800a23c <ecp_double_jac+0x378>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	f107 0120 	add.w	r1, r7, #32
 800a228:	f107 0320 	add.w	r3, r7, #32
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fb fbde 	bl	80059ee <mbedtls_mpi_sub_abs>
 800a232:	6478      	str	r0, [r7, #68]	; 0x44
 800a234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a236:	2b00      	cmp	r3, #0
 800a238:	f040 81f1 	bne.w	800a61e <ecp_double_jac+0x75a>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	1d1a      	adds	r2, r3, #4
 800a240:	f107 0320 	add.w	r3, r7, #32
 800a244:	4611      	mov	r1, r2
 800a246:	4618      	mov	r0, r3
 800a248:	f7fb fa06 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dae6      	bge.n	800a220 <ecp_double_jac+0x35c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	f107 0220 	add.w	r2, r7, #32
 800a258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fd f8af 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a262:	6478      	str	r0, [r7, #68]	; 0x44
 800a264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a266:	2b00      	cmp	r3, #0
 800a268:	f040 81db 	bne.w	800a622 <ecp_double_jac+0x75e>
 800a26c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a270:	68f9      	ldr	r1, [r7, #12]
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff fad8 	bl	8009828 <ecp_modp>
 800a278:	6478      	str	r0, [r7, #68]	; 0x44
 800a27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f040 81d2 	bne.w	800a626 <ecp_double_jac+0x762>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800a282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a286:	2101      	movs	r1, #1
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fb f823 	bl	80052d4 <mbedtls_mpi_shift_l>
 800a28e:	6478      	str	r0, [r7, #68]	; 0x44
 800a290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 81c9 	bne.w	800a62a <ecp_double_jac+0x766>
 800a298:	e00d      	b.n	800a2b6 <ecp_double_jac+0x3f2>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	1d1a      	adds	r2, r3, #4
 800a29e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a2a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fb fba1 	bl	80059ee <mbedtls_mpi_sub_abs>
 800a2ac:	6478      	str	r0, [r7, #68]	; 0x44
 800a2ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f040 81bc 	bne.w	800a62e <ecp_double_jac+0x76a>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	1d1a      	adds	r2, r3, #4
 800a2ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fb f9c9 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dae6      	bge.n	800a29a <ecp_double_jac+0x3d6>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800a2cc:	f107 0220 	add.w	r2, r7, #32
 800a2d0:	f107 0120 	add.w	r1, r7, #32
 800a2d4:	f107 0314 	add.w	r3, r7, #20
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fd f871 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a2de:	6478      	str	r0, [r7, #68]	; 0x44
 800a2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f040 81a5 	bne.w	800a632 <ecp_double_jac+0x76e>
 800a2e8:	f107 0314 	add.w	r3, r7, #20
 800a2ec:	68f9      	ldr	r1, [r7, #12]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff fa9a 	bl	8009828 <ecp_modp>
 800a2f4:	6478      	str	r0, [r7, #68]	; 0x44
 800a2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f040 819c 	bne.w	800a636 <ecp_double_jac+0x772>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800a2fe:	f107 0314 	add.w	r3, r7, #20
 800a302:	2101      	movs	r1, #1
 800a304:	4618      	mov	r0, r3
 800a306:	f7fa ffe5 	bl	80052d4 <mbedtls_mpi_shift_l>
 800a30a:	6478      	str	r0, [r7, #68]	; 0x44
 800a30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f040 8193 	bne.w	800a63a <ecp_double_jac+0x776>
 800a314:	e00d      	b.n	800a332 <ecp_double_jac+0x46e>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	1d1a      	adds	r2, r3, #4
 800a31a:	f107 0114 	add.w	r1, r7, #20
 800a31e:	f107 0314 	add.w	r3, r7, #20
 800a322:	4618      	mov	r0, r3
 800a324:	f7fb fb63 	bl	80059ee <mbedtls_mpi_sub_abs>
 800a328:	6478      	str	r0, [r7, #68]	; 0x44
 800a32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f040 8186 	bne.w	800a63e <ecp_double_jac+0x77a>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	1d1a      	adds	r2, r3, #4
 800a336:	f107 0314 	add.w	r3, r7, #20
 800a33a:	4611      	mov	r1, r2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fb f98b 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	dae6      	bge.n	800a316 <ecp_double_jac+0x452>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800a348:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a34c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a350:	f107 0320 	add.w	r3, r7, #32
 800a354:	4618      	mov	r0, r3
 800a356:	f7fd f833 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a35a:	6478      	str	r0, [r7, #68]	; 0x44
 800a35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f040 816f 	bne.w	800a642 <ecp_double_jac+0x77e>
 800a364:	f107 0320 	add.w	r3, r7, #32
 800a368:	68f9      	ldr	r1, [r7, #12]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7ff fa5c 	bl	8009828 <ecp_modp>
 800a370:	6478      	str	r0, [r7, #68]	; 0x44
 800a372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a374:	2b00      	cmp	r3, #0
 800a376:	f040 8166 	bne.w	800a646 <ecp_double_jac+0x782>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800a37a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a37e:	f107 0120 	add.w	r1, r7, #32
 800a382:	f107 0320 	add.w	r3, r7, #32
 800a386:	4618      	mov	r0, r3
 800a388:	f7fb fbdf 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800a38c:	6478      	str	r0, [r7, #68]	; 0x44
 800a38e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a390:	2b00      	cmp	r3, #0
 800a392:	f040 815a 	bne.w	800a64a <ecp_double_jac+0x786>
 800a396:	e00d      	b.n	800a3b4 <ecp_double_jac+0x4f0>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	1d1a      	adds	r2, r3, #4
 800a39c:	f107 0120 	add.w	r1, r7, #32
 800a3a0:	f107 0320 	add.w	r3, r7, #32
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fb fb86 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800a3aa:	6478      	str	r0, [r7, #68]	; 0x44
 800a3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f040 814d 	bne.w	800a64e <ecp_double_jac+0x78a>
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	da08      	bge.n	800a3cc <ecp_double_jac+0x508>
 800a3ba:	f107 0320 	add.w	r3, r7, #32
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fb f9e4 	bl	800578e <mbedtls_mpi_cmp_int>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e5      	bne.n	800a398 <ecp_double_jac+0x4d4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800a3cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a3d0:	f107 0120 	add.w	r1, r7, #32
 800a3d4:	f107 0320 	add.w	r3, r7, #32
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fb fbb6 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800a3de:	6478      	str	r0, [r7, #68]	; 0x44
 800a3e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f040 8135 	bne.w	800a652 <ecp_double_jac+0x78e>
 800a3e8:	e00d      	b.n	800a406 <ecp_double_jac+0x542>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	f107 0120 	add.w	r1, r7, #32
 800a3f2:	f107 0320 	add.w	r3, r7, #32
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fb fb5d 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800a3fc:	6478      	str	r0, [r7, #68]	; 0x44
 800a3fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a400:	2b00      	cmp	r3, #0
 800a402:	f040 8128 	bne.w	800a656 <ecp_double_jac+0x792>
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	da08      	bge.n	800a41e <ecp_double_jac+0x55a>
 800a40c:	f107 0320 	add.w	r3, r7, #32
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f7fb f9bb 	bl	800578e <mbedtls_mpi_cmp_int>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1e5      	bne.n	800a3ea <ecp_double_jac+0x526>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800a41e:	f107 0220 	add.w	r2, r7, #32
 800a422:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fb fb8d 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800a430:	6478      	str	r0, [r7, #68]	; 0x44
 800a432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a434:	2b00      	cmp	r3, #0
 800a436:	f040 8110 	bne.w	800a65a <ecp_double_jac+0x796>
 800a43a:	e00d      	b.n	800a458 <ecp_double_jac+0x594>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	1d1a      	adds	r2, r3, #4
 800a440:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fb fb34 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800a44e:	6478      	str	r0, [r7, #68]	; 0x44
 800a450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a452:	2b00      	cmp	r3, #0
 800a454:	f040 8103 	bne.w	800a65e <ecp_double_jac+0x79a>
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	da08      	bge.n	800a470 <ecp_double_jac+0x5ac>
 800a45e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a462:	2100      	movs	r1, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f7fb f992 	bl	800578e <mbedtls_mpi_cmp_int>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e5      	bne.n	800a43c <ecp_double_jac+0x578>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800a470:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a474:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fc ff9f 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a482:	6478      	str	r0, [r7, #68]	; 0x44
 800a484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a486:	2b00      	cmp	r3, #0
 800a488:	f040 80eb 	bne.w	800a662 <ecp_double_jac+0x79e>
 800a48c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a490:	68f9      	ldr	r1, [r7, #12]
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff f9c8 	bl	8009828 <ecp_modp>
 800a498:	6478      	str	r0, [r7, #68]	; 0x44
 800a49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f040 80e2 	bne.w	800a666 <ecp_double_jac+0x7a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800a4a2:	f107 0214 	add.w	r2, r7, #20
 800a4a6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a4aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fb fb4b 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800a4b4:	6478      	str	r0, [r7, #68]	; 0x44
 800a4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f040 80d6 	bne.w	800a66a <ecp_double_jac+0x7a6>
 800a4be:	e00d      	b.n	800a4dc <ecp_double_jac+0x618>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	1d1a      	adds	r2, r3, #4
 800a4c4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a4c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fb faf2 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800a4d2:	6478      	str	r0, [r7, #68]	; 0x44
 800a4d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f040 80c9 	bne.w	800a66e <ecp_double_jac+0x7aa>
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	da08      	bge.n	800a4f4 <ecp_double_jac+0x630>
 800a4e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fb f950 	bl	800578e <mbedtls_mpi_cmp_int>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e5      	bne.n	800a4c0 <ecp_double_jac+0x5fc>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f103 010c 	add.w	r1, r3, #12
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f103 0218 	add.w	r2, r3, #24
 800a500:	f107 0314 	add.w	r3, r7, #20
 800a504:	4618      	mov	r0, r3
 800a506:	f7fc ff5b 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a50a:	6478      	str	r0, [r7, #68]	; 0x44
 800a50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 80af 	bne.w	800a672 <ecp_double_jac+0x7ae>
 800a514:	f107 0314 	add.w	r3, r7, #20
 800a518:	68f9      	ldr	r1, [r7, #12]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff f984 	bl	8009828 <ecp_modp>
 800a520:	6478      	str	r0, [r7, #68]	; 0x44
 800a522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a524:	2b00      	cmp	r3, #0
 800a526:	f040 80a6 	bne.w	800a676 <ecp_double_jac+0x7b2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800a52a:	f107 0314 	add.w	r3, r7, #20
 800a52e:	2101      	movs	r1, #1
 800a530:	4618      	mov	r0, r3
 800a532:	f7fa fecf 	bl	80052d4 <mbedtls_mpi_shift_l>
 800a536:	6478      	str	r0, [r7, #68]	; 0x44
 800a538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f040 809d 	bne.w	800a67a <ecp_double_jac+0x7b6>
 800a540:	e00d      	b.n	800a55e <ecp_double_jac+0x69a>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	1d1a      	adds	r2, r3, #4
 800a546:	f107 0114 	add.w	r1, r7, #20
 800a54a:	f107 0314 	add.w	r3, r7, #20
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fb fa4d 	bl	80059ee <mbedtls_mpi_sub_abs>
 800a554:	6478      	str	r0, [r7, #68]	; 0x44
 800a556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f040 8090 	bne.w	800a67e <ecp_double_jac+0x7ba>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	1d1a      	adds	r2, r3, #4
 800a562:	f107 0314 	add.w	r3, r7, #20
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fb f875 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	dae6      	bge.n	800a542 <ecp_double_jac+0x67e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f107 0220 	add.w	r2, r7, #32
 800a57a:	4611      	mov	r1, r2
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fa f9eb 	bl	8004958 <mbedtls_mpi_copy>
 800a582:	6478      	str	r0, [r7, #68]	; 0x44
 800a584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a586:	2b00      	cmp	r3, #0
 800a588:	d17b      	bne.n	800a682 <ecp_double_jac+0x7be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	330c      	adds	r3, #12
 800a58e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a592:	4611      	mov	r1, r2
 800a594:	4618      	mov	r0, r3
 800a596:	f7fa f9df 	bl	8004958 <mbedtls_mpi_copy>
 800a59a:	6478      	str	r0, [r7, #68]	; 0x44
 800a59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d171      	bne.n	800a686 <ecp_double_jac+0x7c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	3318      	adds	r3, #24
 800a5a6:	f107 0214 	add.w	r2, r7, #20
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fa f9d3 	bl	8004958 <mbedtls_mpi_copy>
 800a5b2:	6478      	str	r0, [r7, #68]	; 0x44
 800a5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b6:	2b00      	cmp	r3, #0

cleanup:
 800a5b8:	e066      	b.n	800a688 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800a5ba:	bf00      	nop
 800a5bc:	e064      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5be:	bf00      	nop
 800a5c0:	e062      	b.n	800a688 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800a5c2:	bf00      	nop
 800a5c4:	e060      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5c6:	bf00      	nop
 800a5c8:	e05e      	b.n	800a688 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800a5ca:	bf00      	nop
 800a5cc:	e05c      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5ce:	bf00      	nop
 800a5d0:	e05a      	b.n	800a688 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 800a5d2:	bf00      	nop
 800a5d4:	e058      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5d6:	bf00      	nop
 800a5d8:	e056      	b.n	800a688 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800a5da:	bf00      	nop
 800a5dc:	e054      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5de:	bf00      	nop
 800a5e0:	e052      	b.n	800a688 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800a5e2:	bf00      	nop
 800a5e4:	e050      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5e6:	bf00      	nop
 800a5e8:	e04e      	b.n	800a688 <ecp_double_jac+0x7c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800a5ea:	bf00      	nop
 800a5ec:	e04c      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5ee:	bf00      	nop
 800a5f0:	e04a      	b.n	800a688 <ecp_double_jac+0x7c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800a5f2:	bf00      	nop
 800a5f4:	e048      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5f6:	bf00      	nop
 800a5f8:	e046      	b.n	800a688 <ecp_double_jac+0x7c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800a5fa:	bf00      	nop
 800a5fc:	e044      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a5fe:	bf00      	nop
 800a600:	e042      	b.n	800a688 <ecp_double_jac+0x7c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800a602:	bf00      	nop
 800a604:	e040      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a606:	bf00      	nop
 800a608:	e03e      	b.n	800a688 <ecp_double_jac+0x7c4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800a60a:	bf00      	nop
 800a60c:	e03c      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a60e:	bf00      	nop
 800a610:	e03a      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800a612:	bf00      	nop
 800a614:	e038      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a616:	bf00      	nop
 800a618:	e036      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800a61a:	bf00      	nop
 800a61c:	e034      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a61e:	bf00      	nop
 800a620:	e032      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800a622:	bf00      	nop
 800a624:	e030      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a626:	bf00      	nop
 800a628:	e02e      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800a62a:	bf00      	nop
 800a62c:	e02c      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a62e:	bf00      	nop
 800a630:	e02a      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800a632:	bf00      	nop
 800a634:	e028      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a636:	bf00      	nop
 800a638:	e026      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800a63a:	bf00      	nop
 800a63c:	e024      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a63e:	bf00      	nop
 800a640:	e022      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800a642:	bf00      	nop
 800a644:	e020      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a646:	bf00      	nop
 800a648:	e01e      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800a64a:	bf00      	nop
 800a64c:	e01c      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a64e:	bf00      	nop
 800a650:	e01a      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800a652:	bf00      	nop
 800a654:	e018      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a656:	bf00      	nop
 800a658:	e016      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800a65a:	bf00      	nop
 800a65c:	e014      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a65e:	bf00      	nop
 800a660:	e012      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800a662:	bf00      	nop
 800a664:	e010      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a666:	bf00      	nop
 800a668:	e00e      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800a66a:	bf00      	nop
 800a66c:	e00c      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a66e:	bf00      	nop
 800a670:	e00a      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800a672:	bf00      	nop
 800a674:	e008      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a676:	bf00      	nop
 800a678:	e006      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800a67a:	bf00      	nop
 800a67c:	e004      	b.n	800a688 <ecp_double_jac+0x7c4>
 800a67e:	bf00      	nop
 800a680:	e002      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800a682:	bf00      	nop
 800a684:	e000      	b.n	800a688 <ecp_double_jac+0x7c4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800a686:	bf00      	nop
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 800a688:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fa f894 	bl	80047ba <mbedtls_mpi_free>
 800a692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a696:	4618      	mov	r0, r3
 800a698:	f7fa f88f 	bl	80047ba <mbedtls_mpi_free>
 800a69c:	f107 0320 	add.w	r3, r7, #32
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fa f88a 	bl	80047ba <mbedtls_mpi_free>
 800a6a6:	f107 0314 	add.w	r3, r7, #20
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fa f885 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800a6b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3748      	adds	r7, #72	; 0x48
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <ecp_add_mixed>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b09a      	sub	sp, #104	; 0x68
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3318      	adds	r3, #24
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fb f85c 	bl	800578e <mbedtls_mpi_cmp_int>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d105      	bne.n	800a6e8 <ecp_add_mixed+0x2c>
        return( mbedtls_ecp_copy( R, Q ) );
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	68b8      	ldr	r0, [r7, #8]
 800a6e0:	f7ff f823 	bl	800972a <mbedtls_ecp_copy>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	e329      	b.n	800ad3c <ecp_add_mixed+0x680>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00e      	beq.n	800a70e <ecp_add_mixed+0x52>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	3318      	adds	r3, #24
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fb f849 	bl	800578e <mbedtls_mpi_cmp_int>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d105      	bne.n	800a70e <ecp_add_mixed+0x52>
        return( mbedtls_ecp_copy( R, P ) );
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	68b8      	ldr	r0, [r7, #8]
 800a706:	f7ff f810 	bl	800972a <mbedtls_ecp_copy>
 800a70a:	4603      	mov	r3, r0
 800a70c:	e316      	b.n	800ad3c <ecp_add_mixed+0x680>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <ecp_add_mixed+0x70>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	3318      	adds	r3, #24
 800a71a:	2101      	movs	r1, #1
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fb f836 	bl	800578e <mbedtls_mpi_cmp_int>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <ecp_add_mixed+0x70>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800a728:	4bb6      	ldr	r3, [pc, #728]	; (800aa04 <ecp_add_mixed+0x348>)
 800a72a:	e307      	b.n	800ad3c <ecp_add_mixed+0x680>

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 800a72c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a730:	4618      	mov	r0, r3
 800a732:	f7fa f82f 	bl	8004794 <mbedtls_mpi_init>
 800a736:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fa f82a 	bl	8004794 <mbedtls_mpi_init>
 800a740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a744:	4618      	mov	r0, r3
 800a746:	f7fa f825 	bl	8004794 <mbedtls_mpi_init>
 800a74a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fa f820 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800a754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fa f81b 	bl	8004794 <mbedtls_mpi_init>
 800a75e:	f107 031c 	add.w	r3, r7, #28
 800a762:	4618      	mov	r0, r3
 800a764:	f7fa f816 	bl	8004794 <mbedtls_mpi_init>
 800a768:	f107 0310 	add.w	r3, r7, #16
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fa f811 	bl	8004794 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f103 0118 	add.w	r1, r3, #24
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f103 0218 	add.w	r2, r3, #24
 800a77e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a782:	4618      	mov	r0, r3
 800a784:	f7fc fe1c 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a788:	6678      	str	r0, [r7, #100]	; 0x64
 800a78a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f040 8266 	bne.w	800ac5e <ecp_add_mixed+0x5a2>
 800a792:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a796:	68f9      	ldr	r1, [r7, #12]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7ff f845 	bl	8009828 <ecp_modp>
 800a79e:	6678      	str	r0, [r7, #100]	; 0x64
 800a7a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f040 825d 	bne.w	800ac62 <ecp_add_mixed+0x5a6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f103 0218 	add.w	r2, r3, #24
 800a7ae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a7b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fc fe02 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a7bc:	6678      	str	r0, [r7, #100]	; 0x64
 800a7be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f040 8250 	bne.w	800ac66 <ecp_add_mixed+0x5aa>
 800a7c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a7ca:	68f9      	ldr	r1, [r7, #12]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7ff f82b 	bl	8009828 <ecp_modp>
 800a7d2:	6678      	str	r0, [r7, #100]	; 0x64
 800a7d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f040 8247 	bne.w	800ac6a <ecp_add_mixed+0x5ae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a7e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fc fdea 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a7ec:	6678      	str	r0, [r7, #100]	; 0x64
 800a7ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f040 823c 	bne.w	800ac6e <ecp_add_mixed+0x5b2>
 800a7f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a7fa:	68f9      	ldr	r1, [r7, #12]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7ff f813 	bl	8009828 <ecp_modp>
 800a802:	6678      	str	r0, [r7, #100]	; 0x64
 800a804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a806:	2b00      	cmp	r3, #0
 800a808:	f040 8233 	bne.w	800ac72 <ecp_add_mixed+0x5b6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	f103 020c 	add.w	r2, r3, #12
 800a812:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800a816:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fc fdd0 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a820:	6678      	str	r0, [r7, #100]	; 0x64
 800a822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a824:	2b00      	cmp	r3, #0
 800a826:	f040 8226 	bne.w	800ac76 <ecp_add_mixed+0x5ba>
 800a82a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a82e:	68f9      	ldr	r1, [r7, #12]
 800a830:	4618      	mov	r0, r3
 800a832:	f7fe fff9 	bl	8009828 <ecp_modp>
 800a836:	6678      	str	r0, [r7, #100]	; 0x64
 800a838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f040 821d 	bne.w	800ac7a <ecp_add_mixed+0x5be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a846:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fb f97d 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800a850:	6678      	str	r0, [r7, #100]	; 0x64
 800a852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a854:	2b00      	cmp	r3, #0
 800a856:	f040 8212 	bne.w	800ac7e <ecp_add_mixed+0x5c2>
 800a85a:	e00d      	b.n	800a878 <ecp_add_mixed+0x1bc>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	1d1a      	adds	r2, r3, #4
 800a860:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a864:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fb f924 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800a86e:	6678      	str	r0, [r7, #100]	; 0x64
 800a870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a872:	2b00      	cmp	r3, #0
 800a874:	f040 8205 	bne.w	800ac82 <ecp_add_mixed+0x5c6>
 800a878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	da08      	bge.n	800a890 <ecp_add_mixed+0x1d4>
 800a87e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f7fa ff82 	bl	800578e <mbedtls_mpi_cmp_int>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e5      	bne.n	800a85c <ecp_add_mixed+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f103 020c 	add.w	r2, r3, #12
 800a896:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800a89a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fb f953 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800a8a4:	6678      	str	r0, [r7, #100]	; 0x64
 800a8a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 81ec 	bne.w	800ac86 <ecp_add_mixed+0x5ca>
 800a8ae:	e00d      	b.n	800a8cc <ecp_add_mixed+0x210>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	1d1a      	adds	r2, r3, #4
 800a8b4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800a8b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fb f8fa 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800a8c2:	6678      	str	r0, [r7, #100]	; 0x64
 800a8c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f040 81df 	bne.w	800ac8a <ecp_add_mixed+0x5ce>
 800a8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	da08      	bge.n	800a8e4 <ecp_add_mixed+0x228>
 800a8d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fa ff58 	bl	800578e <mbedtls_mpi_cmp_int>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e5      	bne.n	800a8b0 <ecp_add_mixed+0x1f4>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 800a8e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fa ff4f 	bl	800578e <mbedtls_mpi_cmp_int>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d114      	bne.n	800a920 <ecp_add_mixed+0x264>
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 800a8f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fa ff46 	bl	800578e <mbedtls_mpi_cmp_int>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <ecp_add_mixed+0x25a>
        {
            ret = ecp_double_jac( grp, R, P );
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff fad9 	bl	8009ec4 <ecp_double_jac>
 800a912:	6678      	str	r0, [r7, #100]	; 0x64
            goto cleanup;
 800a914:	e1ee      	b.n	800acf4 <ecp_add_mixed+0x638>
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
 800a916:	68b8      	ldr	r0, [r7, #8]
 800a918:	f7fe ff48 	bl	80097ac <mbedtls_ecp_set_zero>
 800a91c:	6678      	str	r0, [r7, #100]	; 0x64
            goto cleanup;
 800a91e:	e1e9      	b.n	800acf4 <ecp_add_mixed+0x638>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f103 0118 	add.w	r1, r3, #24
 800a926:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a92a:	f107 0310 	add.w	r3, r7, #16
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fc fd46 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a934:	6678      	str	r0, [r7, #100]	; 0x64
 800a936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f040 81a8 	bne.w	800ac8e <ecp_add_mixed+0x5d2>
 800a93e:	f107 0310 	add.w	r3, r7, #16
 800a942:	68f9      	ldr	r1, [r7, #12]
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe ff6f 	bl	8009828 <ecp_modp>
 800a94a:	6678      	str	r0, [r7, #100]	; 0x64
 800a94c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f040 819f 	bne.w	800ac92 <ecp_add_mixed+0x5d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800a954:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a958:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a95c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a960:	4618      	mov	r0, r3
 800a962:	f7fc fd2d 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a966:	6678      	str	r0, [r7, #100]	; 0x64
 800a968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f040 8193 	bne.w	800ac96 <ecp_add_mixed+0x5da>
 800a970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a974:	68f9      	ldr	r1, [r7, #12]
 800a976:	4618      	mov	r0, r3
 800a978:	f7fe ff56 	bl	8009828 <ecp_modp>
 800a97c:	6678      	str	r0, [r7, #100]	; 0x64
 800a97e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a980:	2b00      	cmp	r3, #0
 800a982:	f040 818a 	bne.w	800ac9a <ecp_add_mixed+0x5de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800a986:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a98a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a98e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a992:	4618      	mov	r0, r3
 800a994:	f7fc fd14 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a998:	6678      	str	r0, [r7, #100]	; 0x64
 800a99a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f040 817e 	bne.w	800ac9e <ecp_add_mixed+0x5e2>
 800a9a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a9a6:	68f9      	ldr	r1, [r7, #12]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe ff3d 	bl	8009828 <ecp_modp>
 800a9ae:	6678      	str	r0, [r7, #100]	; 0x64
 800a9b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f040 8175 	bne.w	800aca2 <ecp_add_mixed+0x5e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a9be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fc fcfc 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800a9c8:	6678      	str	r0, [r7, #100]	; 0x64
 800a9ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f040 816a 	bne.w	800aca6 <ecp_add_mixed+0x5ea>
 800a9d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9d6:	68f9      	ldr	r1, [r7, #12]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe ff25 	bl	8009828 <ecp_modp>
 800a9de:	6678      	str	r0, [r7, #100]	; 0x64
 800a9e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f040 8161 	bne.w	800acaa <ecp_add_mixed+0x5ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800a9e8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a9ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fc fd94 	bl	8007520 <mbedtls_mpi_mul_int>
 800a9f8:	6678      	str	r0, [r7, #100]	; 0x64
 800a9fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f040 8156 	bne.w	800acae <ecp_add_mixed+0x5f2>
 800aa02:	e00f      	b.n	800aa24 <ecp_add_mixed+0x368>
 800aa04:	ffffb080 	.word	0xffffb080
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	1d1a      	adds	r2, r3, #4
 800aa0c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800aa10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fa ffea 	bl	80059ee <mbedtls_mpi_sub_abs>
 800aa1a:	6678      	str	r0, [r7, #100]	; 0x64
 800aa1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f040 8147 	bne.w	800acb2 <ecp_add_mixed+0x5f6>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	1d1a      	adds	r2, r3, #4
 800aa28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fa fe12 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dae6      	bge.n	800aa08 <ecp_add_mixed+0x34c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800aa3a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800aa3e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800aa42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fc fcba 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800aa4c:	6678      	str	r0, [r7, #100]	; 0x64
 800aa4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f040 8130 	bne.w	800acb6 <ecp_add_mixed+0x5fa>
 800aa56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa5a:	68f9      	ldr	r1, [r7, #12]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fe fee3 	bl	8009828 <ecp_modp>
 800aa62:	6678      	str	r0, [r7, #100]	; 0x64
 800aa64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f040 8127 	bne.w	800acba <ecp_add_mixed+0x5fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800aa6c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aa70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aa74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fb f866 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800aa7e:	6678      	str	r0, [r7, #100]	; 0x64
 800aa80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f040 811b 	bne.w	800acbe <ecp_add_mixed+0x602>
 800aa88:	e00d      	b.n	800aaa6 <ecp_add_mixed+0x3ea>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	1d1a      	adds	r2, r3, #4
 800aa8e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aa92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fb f80d 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800aa9c:	6678      	str	r0, [r7, #100]	; 0x64
 800aa9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f040 810e 	bne.w	800acc2 <ecp_add_mixed+0x606>
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	da08      	bge.n	800aabe <ecp_add_mixed+0x402>
 800aaac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aab0:	2100      	movs	r1, #0
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fa fe6b 	bl	800578e <mbedtls_mpi_cmp_int>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e5      	bne.n	800aa8a <ecp_add_mixed+0x3ce>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800aabe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800aac2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fb f83d 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800aad0:	6678      	str	r0, [r7, #100]	; 0x64
 800aad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 80f6 	bne.w	800acc6 <ecp_add_mixed+0x60a>
 800aada:	e00d      	b.n	800aaf8 <ecp_add_mixed+0x43c>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	1d1a      	adds	r2, r3, #4
 800aae0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fa ffe4 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800aaee:	6678      	str	r0, [r7, #100]	; 0x64
 800aaf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f040 80e9 	bne.w	800acca <ecp_add_mixed+0x60e>
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	da08      	bge.n	800ab10 <ecp_add_mixed+0x454>
 800aafe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab02:	2100      	movs	r1, #0
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fa fe42 	bl	800578e <mbedtls_mpi_cmp_int>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e5      	bne.n	800aadc <ecp_add_mixed+0x420>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800ab10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ab14:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ab18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fb f814 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800ab22:	6678      	str	r0, [r7, #100]	; 0x64
 800ab24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f040 80d1 	bne.w	800acce <ecp_add_mixed+0x612>
 800ab2c:	e00d      	b.n	800ab4a <ecp_add_mixed+0x48e>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	1d1a      	adds	r2, r3, #4
 800ab32:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ab36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fa ffbb 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800ab40:	6678      	str	r0, [r7, #100]	; 0x64
 800ab42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f040 80c4 	bne.w	800acd2 <ecp_add_mixed+0x616>
 800ab4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	da08      	bge.n	800ab62 <ecp_add_mixed+0x4a6>
 800ab50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fa fe19 	bl	800578e <mbedtls_mpi_cmp_int>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1e5      	bne.n	800ab2e <ecp_add_mixed+0x472>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800ab62:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ab66:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ab6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fc fc26 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800ab74:	6678      	str	r0, [r7, #100]	; 0x64
 800ab76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 80ac 	bne.w	800acd6 <ecp_add_mixed+0x61a>
 800ab7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fe fe4f 	bl	8009828 <ecp_modp>
 800ab8a:	6678      	str	r0, [r7, #100]	; 0x64
 800ab8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f040 80a3 	bne.w	800acda <ecp_add_mixed+0x61e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f103 020c 	add.w	r2, r3, #12
 800ab9a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ab9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fc fc0c 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800aba8:	6678      	str	r0, [r7, #100]	; 0x64
 800abaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abac:	2b00      	cmp	r3, #0
 800abae:	f040 8096 	bne.w	800acde <ecp_add_mixed+0x622>
 800abb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe fe35 	bl	8009828 <ecp_modp>
 800abbe:	6678      	str	r0, [r7, #100]	; 0x64
 800abc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f040 808d 	bne.w	800ace2 <ecp_add_mixed+0x626>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800abc8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800abcc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800abd0:	f107 031c 	add.w	r3, r7, #28
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7fa ffb8 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800abda:	6678      	str	r0, [r7, #100]	; 0x64
 800abdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f040 8081 	bne.w	800ace6 <ecp_add_mixed+0x62a>
 800abe4:	e00c      	b.n	800ac00 <ecp_add_mixed+0x544>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1d1a      	adds	r2, r3, #4
 800abea:	f107 011c 	add.w	r1, r7, #28
 800abee:	f107 031c 	add.w	r3, r7, #28
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fa ff5f 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800abf8:	6678      	str	r0, [r7, #100]	; 0x64
 800abfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d174      	bne.n	800acea <ecp_add_mixed+0x62e>
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	da08      	bge.n	800ac18 <ecp_add_mixed+0x55c>
 800ac06:	f107 031c 	add.w	r3, r7, #28
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fa fdbe 	bl	800578e <mbedtls_mpi_cmp_int>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e6      	bne.n	800abe6 <ecp_add_mixed+0x52a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ac1e:	4611      	mov	r1, r2
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7f9 fe99 	bl	8004958 <mbedtls_mpi_copy>
 800ac26:	6678      	str	r0, [r7, #100]	; 0x64
 800ac28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d15f      	bne.n	800acee <ecp_add_mixed+0x632>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	330c      	adds	r3, #12
 800ac32:	f107 021c 	add.w	r2, r7, #28
 800ac36:	4611      	mov	r1, r2
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7f9 fe8d 	bl	8004958 <mbedtls_mpi_copy>
 800ac3e:	6678      	str	r0, [r7, #100]	; 0x64
 800ac40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d155      	bne.n	800acf2 <ecp_add_mixed+0x636>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	3318      	adds	r3, #24
 800ac4a:	f107 0210 	add.w	r2, r7, #16
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7f9 fe81 	bl	8004958 <mbedtls_mpi_copy>
 800ac56:	6678      	str	r0, [r7, #100]	; 0x64
 800ac58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac5a:	2b00      	cmp	r3, #0

cleanup:
 800ac5c:	e04a      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800ac5e:	bf00      	nop
 800ac60:	e048      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ac62:	bf00      	nop
 800ac64:	e046      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800ac66:	bf00      	nop
 800ac68:	e044      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ac6a:	bf00      	nop
 800ac6c:	e042      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800ac6e:	bf00      	nop
 800ac70:	e040      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ac72:	bf00      	nop
 800ac74:	e03e      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800ac76:	bf00      	nop
 800ac78:	e03c      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ac7a:	bf00      	nop
 800ac7c:	e03a      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800ac7e:	bf00      	nop
 800ac80:	e038      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ac82:	bf00      	nop
 800ac84:	e036      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800ac86:	bf00      	nop
 800ac88:	e034      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ac8a:	bf00      	nop
 800ac8c:	e032      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800ac8e:	bf00      	nop
 800ac90:	e030      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ac92:	bf00      	nop
 800ac94:	e02e      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800ac96:	bf00      	nop
 800ac98:	e02c      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ac9a:	bf00      	nop
 800ac9c:	e02a      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800ac9e:	bf00      	nop
 800aca0:	e028      	b.n	800acf4 <ecp_add_mixed+0x638>
 800aca2:	bf00      	nop
 800aca4:	e026      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800aca6:	bf00      	nop
 800aca8:	e024      	b.n	800acf4 <ecp_add_mixed+0x638>
 800acaa:	bf00      	nop
 800acac:	e022      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800acae:	bf00      	nop
 800acb0:	e020      	b.n	800acf4 <ecp_add_mixed+0x638>
 800acb2:	bf00      	nop
 800acb4:	e01e      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800acb6:	bf00      	nop
 800acb8:	e01c      	b.n	800acf4 <ecp_add_mixed+0x638>
 800acba:	bf00      	nop
 800acbc:	e01a      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800acbe:	bf00      	nop
 800acc0:	e018      	b.n	800acf4 <ecp_add_mixed+0x638>
 800acc2:	bf00      	nop
 800acc4:	e016      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800acc6:	bf00      	nop
 800acc8:	e014      	b.n	800acf4 <ecp_add_mixed+0x638>
 800acca:	bf00      	nop
 800accc:	e012      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800acce:	bf00      	nop
 800acd0:	e010      	b.n	800acf4 <ecp_add_mixed+0x638>
 800acd2:	bf00      	nop
 800acd4:	e00e      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800acd6:	bf00      	nop
 800acd8:	e00c      	b.n	800acf4 <ecp_add_mixed+0x638>
 800acda:	bf00      	nop
 800acdc:	e00a      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800acde:	bf00      	nop
 800ace0:	e008      	b.n	800acf4 <ecp_add_mixed+0x638>
 800ace2:	bf00      	nop
 800ace4:	e006      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800ace6:	bf00      	nop
 800ace8:	e004      	b.n	800acf4 <ecp_add_mixed+0x638>
 800acea:	bf00      	nop
 800acec:	e002      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800acee:	bf00      	nop
 800acf0:	e000      	b.n	800acf4 <ecp_add_mixed+0x638>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800acf2:	bf00      	nop

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 800acf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7f9 fd5e 	bl	80047ba <mbedtls_mpi_free>
 800acfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f9 fd59 	bl	80047ba <mbedtls_mpi_free>
 800ad08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7f9 fd54 	bl	80047ba <mbedtls_mpi_free>
 800ad12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7f9 fd4f 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800ad1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7f9 fd4a 	bl	80047ba <mbedtls_mpi_free>
 800ad26:	f107 031c 	add.w	r3, r7, #28
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7f9 fd45 	bl	80047ba <mbedtls_mpi_free>
 800ad30:	f107 0310 	add.w	r3, r7, #16
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7f9 fd40 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800ad3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3768      	adds	r7, #104	; 0x68
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <ecp_randomize_jac>:
 *
 * This countermeasure was first suggested in [2].
 */
static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08e      	sub	sp, #56	; 0x38
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l, ll;
    size_t p_size;
    int count = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad5a:	3307      	adds	r3, #7
 800ad5c:	08db      	lsrs	r3, r3, #3
 800ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800ad60:	f107 0320 	add.w	r3, r7, #32
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7f9 fd15 	bl	8004794 <mbedtls_mpi_init>
 800ad6a:	f107 0314 	add.w	r3, r7, #20
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7f9 fd10 	bl	8004794 <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800ad74:	f107 0020 	add.w	r0, r7, #32
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad7e:	f7fd f8c4 	bl	8007f0a <mbedtls_mpi_fill_random>
 800ad82:	6378      	str	r0, [r7, #52]	; 0x34
 800ad84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f040 8099 	bne.w	800aebe <ecp_randomize_jac+0x17a>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800ad8c:	e00a      	b.n	800ada4 <ecp_randomize_jac+0x60>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800ad8e:	f107 0320 	add.w	r3, r7, #32
 800ad92:	2101      	movs	r1, #1
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fa fb42 	bl	800541e <mbedtls_mpi_shift_r>
 800ad9a:	6378      	str	r0, [r7, #52]	; 0x34
 800ad9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f040 808f 	bne.w	800aec2 <ecp_randomize_jac+0x17e>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	1d1a      	adds	r2, r3, #4
 800ada8:	f107 0320 	add.w	r3, r7, #32
 800adac:	4611      	mov	r1, r2
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fa fc52 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	dae9      	bge.n	800ad8e <ecp_randomize_jac+0x4a>

        if( count++ > 10 )
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	1c5a      	adds	r2, r3, #1
 800adbe:	633a      	str	r2, [r7, #48]	; 0x30
 800adc0:	2b0a      	cmp	r3, #10
 800adc2:	dd01      	ble.n	800adc8 <ecp_randomize_jac+0x84>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800adc4:	4b50      	ldr	r3, [pc, #320]	; (800af08 <ecp_randomize_jac+0x1c4>)
 800adc6:	e09a      	b.n	800aefe <ecp_randomize_jac+0x1ba>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800adc8:	f107 0320 	add.w	r3, r7, #32
 800adcc:	2101      	movs	r1, #1
 800adce:	4618      	mov	r0, r3
 800add0:	f7fa fcdd 	bl	800578e <mbedtls_mpi_cmp_int>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	ddcc      	ble.n	800ad74 <ecp_randomize_jac+0x30>

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f103 0018 	add.w	r0, r3, #24
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	3318      	adds	r3, #24
 800ade4:	f107 0220 	add.w	r2, r7, #32
 800ade8:	4619      	mov	r1, r3
 800adea:	f7fc fae9 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800adee:	6378      	str	r0, [r7, #52]	; 0x34
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d167      	bne.n	800aec6 <ecp_randomize_jac+0x182>
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	3318      	adds	r3, #24
 800adfa:	68f9      	ldr	r1, [r7, #12]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe fd13 	bl	8009828 <ecp_modp>
 800ae02:	6378      	str	r0, [r7, #52]	; 0x34
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d15f      	bne.n	800aeca <ecp_randomize_jac+0x186>

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800ae0a:	f107 0220 	add.w	r2, r7, #32
 800ae0e:	f107 0120 	add.w	r1, r7, #32
 800ae12:	f107 0314 	add.w	r3, r7, #20
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fc fad2 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800ae1c:	6378      	str	r0, [r7, #52]	; 0x34
 800ae1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d154      	bne.n	800aece <ecp_randomize_jac+0x18a>
 800ae24:	f107 0314 	add.w	r3, r7, #20
 800ae28:	68f9      	ldr	r1, [r7, #12]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fcfc 	bl	8009828 <ecp_modp>
 800ae30:	6378      	str	r0, [r7, #52]	; 0x34
 800ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d14c      	bne.n	800aed2 <ecp_randomize_jac+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	68b9      	ldr	r1, [r7, #8]
 800ae3c:	f107 0214 	add.w	r2, r7, #20
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fc fabd 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800ae46:	6378      	str	r0, [r7, #52]	; 0x34
 800ae48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d143      	bne.n	800aed6 <ecp_randomize_jac+0x192>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	68f9      	ldr	r1, [r7, #12]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe fce8 	bl	8009828 <ecp_modp>
 800ae58:	6378      	str	r0, [r7, #52]	; 0x34
 800ae5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d13c      	bne.n	800aeda <ecp_randomize_jac+0x196>

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800ae60:	f107 0220 	add.w	r2, r7, #32
 800ae64:	f107 0114 	add.w	r1, r7, #20
 800ae68:	f107 0314 	add.w	r3, r7, #20
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fc faa7 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800ae72:	6378      	str	r0, [r7, #52]	; 0x34
 800ae74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d131      	bne.n	800aede <ecp_randomize_jac+0x19a>
 800ae7a:	f107 0314 	add.w	r3, r7, #20
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fcd1 	bl	8009828 <ecp_modp>
 800ae86:	6378      	str	r0, [r7, #52]	; 0x34
 800ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d129      	bne.n	800aee2 <ecp_randomize_jac+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f103 000c 	add.w	r0, r3, #12
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	330c      	adds	r3, #12
 800ae98:	f107 0214 	add.w	r2, r7, #20
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	f7fc fa8f 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800aea2:	6378      	str	r0, [r7, #52]	; 0x34
 800aea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d11d      	bne.n	800aee6 <ecp_randomize_jac+0x1a2>
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	330c      	adds	r3, #12
 800aeae:	68f9      	ldr	r1, [r7, #12]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe fcb9 	bl	8009828 <ecp_modp>
 800aeb6:	6378      	str	r0, [r7, #52]	; 0x34
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeba:	2b00      	cmp	r3, #0

cleanup:
 800aebc:	e014      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800aebe:	bf00      	nop
 800aec0:	e012      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800aec2:	bf00      	nop
 800aec4:	e010      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800aec6:	bf00      	nop
 800aec8:	e00e      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
 800aeca:	bf00      	nop
 800aecc:	e00c      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800aece:	bf00      	nop
 800aed0:	e00a      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
 800aed2:	bf00      	nop
 800aed4:	e008      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800aed6:	bf00      	nop
 800aed8:	e006      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
 800aeda:	bf00      	nop
 800aedc:	e004      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800aede:	bf00      	nop
 800aee0:	e002      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
 800aee2:	bf00      	nop
 800aee4:	e000      	b.n	800aee8 <ecp_randomize_jac+0x1a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800aee6:	bf00      	nop
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 800aee8:	f107 0320 	add.w	r3, r7, #32
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7f9 fc64 	bl	80047ba <mbedtls_mpi_free>
 800aef2:	f107 0314 	add.w	r3, r7, #20
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f9 fc5f 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800aefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3738      	adds	r7, #56	; 0x38
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	ffffb300 	.word	0xffffb300

0800af0c <ecp_comb_recode_core>:
 * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
 *   (the result will be incorrect if these assumptions are not satisfied)
 */
static void ecp_comb_recode_core( unsigned char x[], size_t d,
                                  unsigned char w, const mbedtls_mpi *m )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	4613      	mov	r3, r2
 800af1a:	71fb      	strb	r3, [r7, #7]
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	3301      	adds	r3, #1
 800af20:	461a      	mov	r2, r3
 800af22:	2100      	movs	r1, #0
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f006 fca3 	bl	8011870 <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 800af2a:	2300      	movs	r3, #0
 800af2c:	61fb      	str	r3, [r7, #28]
 800af2e:	e027      	b.n	800af80 <ecp_comb_recode_core+0x74>
        for( j = 0; j < w; j++ )
 800af30:	2300      	movs	r3, #0
 800af32:	61bb      	str	r3, [r7, #24]
 800af34:	e01d      	b.n	800af72 <ecp_comb_recode_core+0x66>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	fb03 f202 	mul.w	r2, r3, r2
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	4413      	add	r3, r2
 800af42:	4619      	mov	r1, r3
 800af44:	6838      	ldr	r0, [r7, #0]
 800af46:	f7f9 fe98 	bl	8004c7a <mbedtls_mpi_get_bit>
 800af4a:	4602      	mov	r2, r0
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	fa02 f103 	lsl.w	r1, r2, r3
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	4413      	add	r3, r2
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	b25a      	sxtb	r2, r3
 800af5c:	b24b      	sxtb	r3, r1
 800af5e:	4313      	orrs	r3, r2
 800af60:	b259      	sxtb	r1, r3
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	4413      	add	r3, r2
 800af68:	b2ca      	uxtb	r2, r1
 800af6a:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < w; j++ )
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	3301      	adds	r3, #1
 800af70:	61bb      	str	r3, [r7, #24]
 800af72:	79fb      	ldrb	r3, [r7, #7]
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	429a      	cmp	r2, r3
 800af78:	d3dd      	bcc.n	800af36 <ecp_comb_recode_core+0x2a>
    for( i = 0; i < d; i++ )
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	3301      	adds	r3, #1
 800af7e:	61fb      	str	r3, [r7, #28]
 800af80:	69fa      	ldr	r2, [r7, #28]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	429a      	cmp	r2, r3
 800af86:	d3d3      	bcc.n	800af30 <ecp_comb_recode_core+0x24>

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	75fb      	strb	r3, [r7, #23]
    for( i = 1; i <= d; i++ )
 800af8c:	2301      	movs	r3, #1
 800af8e:	61fb      	str	r3, [r7, #28]
 800af90:	e05f      	b.n	800b052 <ecp_comb_recode_core+0x146>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	4413      	add	r3, r2
 800af98:	781a      	ldrb	r2, [r3, #0]
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	4013      	ands	r3, r2
 800af9e:	75bb      	strb	r3, [r7, #22]
        x[i] = x[i] ^ c;
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	4413      	add	r3, r2
 800afa6:	7819      	ldrb	r1, [r3, #0]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	4413      	add	r3, r2
 800afae:	7dfa      	ldrb	r2, [r7, #23]
 800afb0:	404a      	eors	r2, r1
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	701a      	strb	r2, [r3, #0]
        c = cc;
 800afb6:	7dbb      	ldrb	r3, [r7, #22]
 800afb8:	75fb      	strb	r3, [r7, #23]

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	4413      	add	r3, r2
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bf0c      	ite	eq
 800afca:	2301      	moveq	r3, #1
 800afcc:	2300      	movne	r3, #0
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	757b      	strb	r3, [r7, #21]
        c   |= x[i] & ( x[i-1] * adjust );
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	4413      	add	r3, r2
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	b25a      	sxtb	r2, r3
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	3b01      	subs	r3, #1
 800afe0:	68f9      	ldr	r1, [r7, #12]
 800afe2:	440b      	add	r3, r1
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	7d79      	ldrb	r1, [r7, #21]
 800afe8:	fb11 f303 	smulbb	r3, r1, r3
 800afec:	b2db      	uxtb	r3, r3
 800afee:	b25b      	sxtb	r3, r3
 800aff0:	4013      	ands	r3, r2
 800aff2:	b25a      	sxtb	r2, r3
 800aff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aff8:	4313      	orrs	r3, r2
 800affa:	b25b      	sxtb	r3, r3
 800affc:	75fb      	strb	r3, [r7, #23]
        x[i] = x[i] ^ ( x[i-1] * adjust );
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	4413      	add	r3, r2
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	b25a      	sxtb	r2, r3
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	68f9      	ldr	r1, [r7, #12]
 800b00e:	440b      	add	r3, r1
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	7d79      	ldrb	r1, [r7, #21]
 800b014:	fb11 f303 	smulbb	r3, r1, r3
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	b25b      	sxtb	r3, r3
 800b01c:	4053      	eors	r3, r2
 800b01e:	b259      	sxtb	r1, r3
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	4413      	add	r3, r2
 800b026:	b2ca      	uxtb	r2, r1
 800b028:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	4413      	add	r3, r2
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b25a      	sxtb	r2, r3
 800b036:	7d7b      	ldrb	r3, [r7, #21]
 800b038:	01db      	lsls	r3, r3, #7
 800b03a:	b25b      	sxtb	r3, r3
 800b03c:	4313      	orrs	r3, r2
 800b03e:	b259      	sxtb	r1, r3
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	3b01      	subs	r3, #1
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	4413      	add	r3, r2
 800b048:	b2ca      	uxtb	r2, r1
 800b04a:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= d; i++ )
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	3301      	adds	r3, #1
 800b050:	61fb      	str	r3, [r7, #28]
 800b052:	69fa      	ldr	r2, [r7, #28]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	429a      	cmp	r2, r3
 800b058:	d99b      	bls.n	800af92 <ecp_comb_recode_core+0x86>
    }
}
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
 800b05e:	3720      	adds	r7, #32
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <ecp_precompute_comb>:
 */
static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
                                unsigned char w, size_t d,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08a      	sub	sp, #40	; 0x28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char i;
    size_t j = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	61fb      	str	r3, [r7, #28]
    const unsigned char T_size = 1U << ( w - 1 );
 800b076:	78fb      	ldrb	r3, [r7, #3]
 800b078:	3b01      	subs	r3, #1
 800b07a:	2201      	movs	r2, #1
 800b07c:	fa02 f303 	lsl.w	r3, r2, r3
 800b080:	76fb      	strb	r3, [r7, #27]
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800b082:	6879      	ldr	r1, [r7, #4]
 800b084:	68b8      	ldr	r0, [r7, #8]
 800b086:	f7fe fb50 	bl	800972a <mbedtls_ecp_copy>
 800b08a:	6278      	str	r0, [r7, #36]	; 0x24
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f040 80d7 	bne.w	800b242 <ecp_precompute_comb+0x1de>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL && rs_ctx->rsm->i != 0 )
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	61fb      	str	r3, [r7, #28]

    for( ; j < d * ( w - 1 ); j++ )
 800b098:	e03e      	b.n	800b118 <ecp_precompute_comb+0xb4>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
 800b09a:	69fa      	ldr	r2, [r7, #28]
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        cur = T + i;
 800b0ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	4413      	add	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]

        if( j % d == 0 )
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0ca:	fb01 f202 	mul.w	r2, r1, r2
 800b0ce:	1a9b      	subs	r3, r3, r2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d114      	bne.n	800b0fe <ecp_precompute_comb+0x9a>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800b0d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0d8:	085b      	lsrs	r3, r3, #1
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4613      	mov	r3, r2
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6978      	ldr	r0, [r7, #20]
 800b0f0:	f7fe fb1b 	bl	800972a <mbedtls_ecp_copy>
 800b0f4:	6278      	str	r0, [r7, #36]	; 0x24
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f040 80a4 	bne.w	800b246 <ecp_precompute_comb+0x1e2>

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	6979      	ldr	r1, [r7, #20]
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7fe fede 	bl	8009ec4 <ecp_double_jac>
 800b108:	6278      	str	r0, [r7, #36]	; 0x24
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f040 809c 	bne.w	800b24a <ecp_precompute_comb+0x1e6>
    for( ; j < d * ( w - 1 ); j++ )
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	3301      	adds	r3, #1
 800b116:	61fb      	str	r3, [r7, #28]
 800b118:	78fb      	ldrb	r3, [r7, #3]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	461a      	mov	r2, r3
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	fb02 f303 	mul.w	r3, r2, r3
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	429a      	cmp	r2, r3
 800b128:	d3b7      	bcc.n	800b09a <ecp_precompute_comb+0x36>
#endif
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	61fb      	str	r3, [r7, #28]
    for( i = 1; i < T_size; i <<= 1 )
 800b12e:	2301      	movs	r3, #1
 800b130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b134:	e015      	b.n	800b162 <ecp_precompute_comb+0xfe>
        TT[j++] = T + i;
 800b136:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b13a:	4613      	mov	r3, r2
 800b13c:	00db      	lsls	r3, r3, #3
 800b13e:	4413      	add	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4619      	mov	r1, r3
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	61fa      	str	r2, [r7, #28]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	440a      	add	r2, r1
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	3328      	adds	r3, #40	; 0x28
 800b152:	443b      	add	r3, r7
 800b154:	f843 2c18 	str.w	r2, [r3, #-24]
    for( i = 1; i < T_size; i <<= 1 )
 800b158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b15c:	005b      	lsls	r3, r3, #1
 800b15e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b162:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b166:	7efb      	ldrb	r3, [r7, #27]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d3e4      	bcc.n	800b136 <ecp_precompute_comb+0xd2>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800b16c:	f107 0310 	add.w	r3, r7, #16
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	4619      	mov	r1, r3
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f7fe fc6f 	bl	8009a58 <ecp_normalize_jac_many>
 800b17a:	6278      	str	r0, [r7, #36]	; 0x24
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d165      	bne.n	800b24e <ecp_precompute_comb+0x1ea>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
 800b182:	2301      	movs	r3, #1
 800b184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b188:	e031      	b.n	800b1ee <ecp_precompute_comb+0x18a>
    {
        j = i;
 800b18a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b18e:	61fb      	str	r3, [r7, #28]
        while( j-- )
 800b190:	e023      	b.n	800b1da <ecp_precompute_comb+0x176>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800b192:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	441a      	add	r2, r3
 800b19a:	4613      	mov	r3, r2
 800b19c:	00db      	lsls	r3, r3, #3
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	1899      	adds	r1, r3, r2
 800b1a8:	69fa      	ldr	r2, [r7, #28]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	1898      	adds	r0, r3, r2
 800b1b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b1bc:	4613      	mov	r3, r2
 800b1be:	00db      	lsls	r3, r3, #3
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f7ff fa75 	bl	800a6bc <ecp_add_mixed>
 800b1d2:	6278      	str	r0, [r7, #36]	; 0x24
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d13b      	bne.n	800b252 <ecp_precompute_comb+0x1ee>
        while( j-- )
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	1e5a      	subs	r2, r3, #1
 800b1de:	61fa      	str	r2, [r7, #28]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1d6      	bne.n	800b192 <ecp_precompute_comb+0x12e>
    for( i = 1; i < T_size; i <<= 1 )
 800b1e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1e8:	005b      	lsls	r3, r3, #1
 800b1ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1ee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b1f2:	7efb      	ldrb	r3, [r7, #27]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d3c8      	bcc.n	800b18a <ecp_precompute_comb+0x126>
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	e011      	b.n	800b222 <ecp_precompute_comb+0x1be>
        TT[j] = T + j + 1;
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	4613      	mov	r3, r2
 800b204:	00db      	lsls	r3, r3, #3
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	461a      	mov	r2, r3
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	441a      	add	r2, r3
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	3328      	adds	r3, #40	; 0x28
 800b216:	443b      	add	r3, r7
 800b218:	f843 2c18 	str.w	r2, [r3, #-24]
    for( j = 0; j + 1 < T_size; j++ )
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	3301      	adds	r3, #1
 800b220:	61fb      	str	r3, [r7, #28]
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	7efb      	ldrb	r3, [r7, #27]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d3e8      	bcc.n	800b1fe <ecp_precompute_comb+0x19a>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800b22c:	f107 0310 	add.w	r3, r7, #16
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	4619      	mov	r1, r3
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f7fe fc0f 	bl	8009a58 <ecp_normalize_jac_many>
 800b23a:	6278      	str	r0, [r7, #36]	; 0x24
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	2b00      	cmp	r3, #0

cleanup:
 800b240:	e008      	b.n	800b254 <ecp_precompute_comb+0x1f0>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800b242:	bf00      	nop
 800b244:	e006      	b.n	800b254 <ecp_precompute_comb+0x1f0>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800b246:	bf00      	nop
 800b248:	e004      	b.n	800b254 <ecp_precompute_comb+0x1f0>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800b24a:	bf00      	nop
 800b24c:	e002      	b.n	800b254 <ecp_precompute_comb+0x1f0>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800b24e:	bf00      	nop
 800b250:	e000      	b.n	800b254 <ecp_precompute_comb+0x1f0>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800b252:	bf00      	nop
        if( rs_ctx->rsm->state == ecp_rsm_pre_dbl )
            rs_ctx->rsm->i = j;
    }
#endif

    return( ret );
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b256:	4618      	mov	r0, r3
 800b258:	3728      	adds	r7, #40	; 0x28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b086      	sub	sp, #24
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
 800b26a:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 800b26c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b270:	085b      	lsrs	r3, r3, #1
 800b272:	b2db      	uxtb	r3, r3
 800b274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b278:	74bb      	strb	r3, [r7, #18]

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 800b27a:	2300      	movs	r3, #0
 800b27c:	74fb      	strb	r3, [r7, #19]
 800b27e:	e035      	b.n	800b2ec <ecp_select_comb+0x8e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	7cfa      	ldrb	r2, [r7, #19]
 800b284:	4613      	mov	r3, r2
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	4413      	add	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	461a      	mov	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4413      	add	r3, r2
 800b292:	4619      	mov	r1, r3
 800b294:	7cfa      	ldrb	r2, [r7, #19]
 800b296:	7cbb      	ldrb	r3, [r7, #18]
 800b298:	429a      	cmp	r2, r3
 800b29a:	bf0c      	ite	eq
 800b29c:	2301      	moveq	r3, #1
 800b29e:	2300      	movne	r3, #0
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	f7f9 fbb4 	bl	8004a10 <mbedtls_mpi_safe_cond_assign>
 800b2a8:	6178      	str	r0, [r7, #20]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d12e      	bne.n	800b30e <ecp_select_comb+0xb0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f103 000c 	add.w	r0, r3, #12
 800b2b6:	7cfa      	ldrb	r2, [r7, #19]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f103 010c 	add.w	r1, r3, #12
 800b2ca:	7cfa      	ldrb	r2, [r7, #19]
 800b2cc:	7cbb      	ldrb	r3, [r7, #18]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	bf0c      	ite	eq
 800b2d2:	2301      	moveq	r3, #1
 800b2d4:	2300      	movne	r3, #0
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	461a      	mov	r2, r3
 800b2da:	f7f9 fb99 	bl	8004a10 <mbedtls_mpi_safe_cond_assign>
 800b2de:	6178      	str	r0, [r7, #20]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d115      	bne.n	800b312 <ecp_select_comb+0xb4>
    for( j = 0; j < T_size; j++ )
 800b2e6:	7cfb      	ldrb	r3, [r7, #19]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	74fb      	strb	r3, [r7, #19]
 800b2ec:	7cfa      	ldrb	r2, [r7, #19]
 800b2ee:	78fb      	ldrb	r3, [r7, #3]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d3c5      	bcc.n	800b280 <ecp_select_comb+0x22>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800b2f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2f8:	09db      	lsrs	r3, r3, #7
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7fe fd9b 	bl	8009e3c <ecp_safe_invert_jac>
 800b306:	6178      	str	r0, [r7, #20]
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	2b00      	cmp	r3, #0

cleanup:
 800b30c:	e002      	b.n	800b314 <ecp_select_comb+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800b30e:	bf00      	nop
 800b310:	e000      	b.n	800b314 <ecp_select_comb+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800b312:	bf00      	nop
    return( ret );
 800b314:	697b      	ldr	r3, [r7, #20]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3718      	adds	r7, #24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <ecp_mul_comb_core>:
                              const mbedtls_ecp_point T[], unsigned char T_size,
                              const unsigned char x[], size_t d,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng,
                              mbedtls_ecp_restart_ctx *rs_ctx )
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b092      	sub	sp, #72	; 0x48
 800b322:	af02      	add	r7, sp, #8
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	607a      	str	r2, [r7, #4]
 800b32a:	70fb      	strb	r3, [r7, #3]
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
 800b32c:	f107 0314 	add.w	r3, r7, #20
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe f90f 	bl	8009554 <mbedtls_ecp_point_init>
    }
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
 800b336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b338:	63bb      	str	r3, [r7, #56]	; 0x38
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800b33a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	4413      	add	r3, r2
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	78fa      	ldrb	r2, [r7, #3]
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	4613      	mov	r3, r2
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	68b9      	ldr	r1, [r7, #8]
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f7ff ff86 	bl	800b25e <ecp_select_comb>
 800b352:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d143      	bne.n	800b3e2 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	3318      	adds	r3, #24
 800b35e:	2101      	movs	r1, #1
 800b360:	4618      	mov	r0, r3
 800b362:	f7f9 fc5c 	bl	8004c1e <mbedtls_mpi_lset>
 800b366:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d13b      	bne.n	800b3e6 <ecp_mul_comb_core+0xc8>
        if( f_rng != 0 )
 800b36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b370:	2b00      	cmp	r3, #0
 800b372:	d032      	beq.n	800b3da <ecp_mul_comb_core+0xbc>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800b374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b376:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b378:	68b9      	ldr	r1, [r7, #8]
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f7ff fce2 	bl	800ad44 <ecp_randomize_jac>
 800b380:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d130      	bne.n	800b3ea <ecp_mul_comb_core+0xcc>
    }

    while( i != 0 )
 800b388:	e027      	b.n	800b3da <ecp_mul_comb_core+0xbc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	3b01      	subs	r3, #1
 800b38e:	63bb      	str	r3, [r7, #56]	; 0x38

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	68b9      	ldr	r1, [r7, #8]
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7fe fd95 	bl	8009ec4 <ecp_double_jac>
 800b39a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d125      	bne.n	800b3ee <ecp_mul_comb_core+0xd0>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800b3a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	4413      	add	r3, r2
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	78fa      	ldrb	r2, [r7, #3]
 800b3ac:	f107 0114 	add.w	r1, r7, #20
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff ff51 	bl	800b25e <ecp_select_comb>
 800b3bc:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b3be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d116      	bne.n	800b3f2 <ecp_mul_comb_core+0xd4>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800b3c4:	f107 0314 	add.w	r3, r7, #20
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	68b9      	ldr	r1, [r7, #8]
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f7ff f975 	bl	800a6bc <ecp_add_mixed>
 800b3d2:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10d      	bne.n	800b3f6 <ecp_mul_comb_core+0xd8>
    while( i != 0 )
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1d4      	bne.n	800b38a <ecp_mul_comb_core+0x6c>
    }

cleanup:
 800b3e0:	e00a      	b.n	800b3f8 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800b3e2:	bf00      	nop
 800b3e4:	e008      	b.n	800b3f8 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800b3e6:	bf00      	nop
 800b3e8:	e006      	b.n	800b3f8 <ecp_mul_comb_core+0xda>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800b3ea:	bf00      	nop
 800b3ec:	e004      	b.n	800b3f8 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800b3ee:	bf00      	nop
 800b3f0:	e002      	b.n	800b3f8 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800b3f2:	bf00      	nop
 800b3f4:	e000      	b.n	800b3f8 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800b3f6:	bf00      	nop

    mbedtls_ecp_point_free( &Txi );
 800b3f8:	f107 0314 	add.w	r3, r7, #20
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fe f914 	bl	800962a <mbedtls_ecp_point_free>
        rs_ctx->rsm->i = i;
        /* no need to save R, already pointing to rs_ctx->rsm->R */
    }
#endif

    return( ret );
 800b402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b404:	4618      	mov	r0, r3
 800b406:	3740      	adds	r7, #64	; 0x40
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <ecp_comb_recode_scalar>:
                                   const mbedtls_mpi *m,
                                   unsigned char k[COMB_MAX_D + 1],
                                   size_t d,
                                   unsigned char w,
                                   unsigned char *parity_trick )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08c      	sub	sp, #48	; 0x30
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 800b41a:	f107 0320 	add.w	r3, r7, #32
 800b41e:	4618      	mov	r0, r3
 800b420:	f7f9 f9b8 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 800b424:	f107 0314 	add.w	r3, r7, #20
 800b428:	4618      	mov	r0, r3
 800b42a:	f7f9 f9b3 	bl	8004794 <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	334c      	adds	r3, #76	; 0x4c
 800b432:	2100      	movs	r1, #0
 800b434:	4618      	mov	r0, r3
 800b436:	f7f9 fc20 	bl	8004c7a <mbedtls_mpi_get_bit>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d001      	beq.n	800b444 <ecp_comb_recode_scalar+0x38>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800b440:	4b27      	ldr	r3, [pc, #156]	; (800b4e0 <ecp_comb_recode_scalar+0xd4>)
 800b442:	e049      	b.n	800b4d8 <ecp_comb_recode_scalar+0xcc>

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800b444:	2100      	movs	r1, #0
 800b446:	68b8      	ldr	r0, [r7, #8]
 800b448:	f7f9 fc17 	bl	8004c7a <mbedtls_mpi_get_bit>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bf0c      	ite	eq
 800b452:	2301      	moveq	r3, #1
 800b454:	2300      	movne	r3, #0
 800b456:	b2db      	uxtb	r3, r3
 800b458:	461a      	mov	r2, r3
 800b45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b45c:	701a      	strb	r2, [r3, #0]

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800b45e:	f107 0320 	add.w	r3, r7, #32
 800b462:	68b9      	ldr	r1, [r7, #8]
 800b464:	4618      	mov	r0, r3
 800b466:	f7f9 fa77 	bl	8004958 <mbedtls_mpi_copy>
 800b46a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d122      	bne.n	800b4b8 <ecp_comb_recode_scalar+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800b478:	f107 0314 	add.w	r3, r7, #20
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fa fb63 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800b484:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d117      	bne.n	800b4bc <ecp_comb_recode_scalar+0xb0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800b48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48e:	781a      	ldrb	r2, [r3, #0]
 800b490:	f107 0114 	add.w	r1, r7, #20
 800b494:	f107 0320 	add.w	r3, r7, #32
 800b498:	4618      	mov	r0, r3
 800b49a:	f7f9 fab9 	bl	8004a10 <mbedtls_mpi_safe_cond_assign>
 800b49e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10c      	bne.n	800b4c0 <ecp_comb_recode_scalar+0xb4>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );
 800b4a6:	f107 0320 	add.w	r3, r7, #32
 800b4aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff fd2b 	bl	800af0c <ecp_comb_recode_core>
 800b4b6:	e004      	b.n	800b4c2 <ecp_comb_recode_scalar+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800b4b8:	bf00      	nop
 800b4ba:	e002      	b.n	800b4c2 <ecp_comb_recode_scalar+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800b4bc:	bf00      	nop
 800b4be:	e000      	b.n	800b4c2 <ecp_comb_recode_scalar+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800b4c0:	bf00      	nop

cleanup:
    mbedtls_mpi_free( &mm );
 800b4c2:	f107 0314 	add.w	r3, r7, #20
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7f9 f977 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 800b4cc:	f107 0320 	add.w	r3, r7, #32
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f9 f972 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800b4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3730      	adds	r7, #48	; 0x30
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	ffffb080 	.word	0xffffb080

0800b4e4 <ecp_mul_comb_after_precomp>:
                                unsigned char w,
                                size_t d,
                                int (*f_rng)(void *, unsigned char *, size_t),
                                void *p_rng,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b0be      	sub	sp, #248	; 0xf8
 800b4e8:	af06      	add	r7, sp, #24
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char parity_trick;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *RR = R;
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800b4f8:	f107 0214 	add.w	r2, r7, #20
 800b4fc:	f107 03d7 	add.w	r3, r7, #215	; 0xd7
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b50c:	6879      	ldr	r1, [r7, #4]
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7ff ff7c 	bl	800b40c <ecp_comb_recode_scalar>
 800b514:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800b518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d136      	bne.n	800b58e <ecp_mul_comb_after_precomp+0xaa>
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800b520:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
 800b524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b528:	9304      	str	r3, [sp, #16]
 800b52a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b52e:	9303      	str	r3, [sp, #12]
 800b530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b534:	9302      	str	r3, [sp, #8]
 800b536:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b53a:	9301      	str	r3, [sp, #4]
 800b53c:	f107 0314 	add.w	r3, r7, #20
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	4613      	mov	r3, r2
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7ff fee7 	bl	800b31e <ecp_mul_comb_core>
 800b550:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800b554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d11a      	bne.n	800b592 <ecp_mul_comb_after_precomp+0xae>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800b55c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800b560:	461a      	mov	r2, r3
 800b562:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f7fe fc68 	bl	8009e3c <ecp_safe_invert_jac>
 800b56c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800b570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10e      	bne.n	800b596 <ecp_mul_comb_after_precomp+0xb2>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 800b578:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f7fe f9bd 	bl	80098fc <ecp_normalize_jac>
 800b582:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800b586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b58a:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
 800b58c:	e004      	b.n	800b598 <ecp_mul_comb_after_precomp+0xb4>
    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800b58e:	bf00      	nop
 800b590:	e002      	b.n	800b598 <ecp_mul_comb_after_precomp+0xb4>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800b592:	bf00      	nop
 800b594:	e000      	b.n	800b598 <ecp_mul_comb_after_precomp+0xb4>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800b596:	bf00      	nop
    return( ret );
 800b598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	37e0      	adds	r7, #224	; 0xe0
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <ecp_pick_window_size>:
/*
 * Pick window size based on curve size and whether we optimize for base point
 */
static unsigned char ecp_pick_window_size( const mbedtls_ecp_group *grp,
                                           unsigned char p_eq_g )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	70fb      	strb	r3, [r7, #3]
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5b4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b5b8:	d301      	bcc.n	800b5be <ecp_pick_window_size+0x1a>
 800b5ba:	2305      	movs	r3, #5
 800b5bc:	e000      	b.n	800b5c0 <ecp_pick_window_size+0x1c>
 800b5be:	2304      	movs	r3, #4
 800b5c0:	73fb      	strb	r3, [r7, #15]
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
 800b5c2:	78fb      	ldrb	r3, [r7, #3]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <ecp_pick_window_size+0x2a>
        w++;
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	73fb      	strb	r3, [r7, #15]

    /*
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d901      	bls.n	800b5d8 <ecp_pick_window_size+0x34>
        w = MBEDTLS_ECP_WINDOW_SIZE;
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	73fb      	strb	r3, [r7, #15]
    if( w >= grp->nbits )
 800b5d8:	7bfa      	ldrb	r2, [r7, #15]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d301      	bcc.n	800b5e6 <ecp_pick_window_size+0x42>
        w = 2;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	73fb      	strb	r3, [r7, #15]

    return( w );
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <ecp_mul_comb>:
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b090      	sub	sp, #64	; 0x40
 800b5f8:	af06      	add	r7, sp, #24
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
#else
    p_eq_g = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	76fb      	strb	r3, [r7, #27]
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
 800b606:	7efb      	ldrb	r3, [r7, #27]
 800b608:	4619      	mov	r1, r3
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7ff ffca 	bl	800b5a4 <ecp_pick_window_size>
 800b610:	4603      	mov	r3, r0
 800b612:	76bb      	strb	r3, [r7, #26]
    T_size = 1U << ( w - 1 );
 800b614:	7ebb      	ldrb	r3, [r7, #26]
 800b616:	3b01      	subs	r3, #1
 800b618:	2201      	movs	r2, #1
 800b61a:	fa02 f303 	lsl.w	r3, r2, r3
 800b61e:	767b      	strb	r3, [r7, #25]
    d = ( grp->nbits + w - 1 ) / w;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b624:	7ebb      	ldrb	r3, [r7, #26]
 800b626:	4413      	add	r3, r2
 800b628:	1e5a      	subs	r2, r3, #1
 800b62a:	7ebb      	ldrb	r3, [r7, #26]
 800b62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b630:	617b      	str	r3, [r7, #20]

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
 800b632:	7efb      	ldrb	r3, [r7, #27]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00a      	beq.n	800b64e <ecp_mul_comb+0x5a>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d006      	beq.n	800b64e <ecp_mul_comb+0x5a>
    {
        /* second pointer to the same table, will be deleted on exit */
        T = grp->T;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b644:	61fb      	str	r3, [r7, #28]
        T_ok = 1;
 800b646:	2301      	movs	r3, #1
 800b648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b64c:	e029      	b.n	800b6a2 <ecp_mul_comb+0xae>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 800b64e:	7e7b      	ldrb	r3, [r7, #25]
 800b650:	2124      	movs	r1, #36	; 0x24
 800b652:	4618      	mov	r0, r3
 800b654:	f006 f8c4 	bl	80117e0 <calloc>
 800b658:	4603      	mov	r3, r0
 800b65a:	61fb      	str	r3, [r7, #28]
        if( T == NULL )
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d102      	bne.n	800b668 <ecp_mul_comb+0x74>
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 800b662:	4b42      	ldr	r3, [pc, #264]	; (800b76c <ecp_mul_comb+0x178>)
 800b664:	627b      	str	r3, [r7, #36]	; 0x24
            goto cleanup;
 800b666:	e04f      	b.n	800b708 <ecp_mul_comb+0x114>
        }

        for( i = 0; i < T_size; i++ )
 800b668:	2300      	movs	r3, #0
 800b66a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b66e:	e010      	b.n	800b692 <ecp_mul_comb+0x9e>
            mbedtls_ecp_point_init( &T[i] );
 800b670:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b674:	4613      	mov	r3, r2
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	461a      	mov	r2, r3
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7fd ff66 	bl	8009554 <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
 800b688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b68c:	3301      	adds	r3, #1
 800b68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b692:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b696:	7e7b      	ldrb	r3, [r7, #25]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d3e9      	bcc.n	800b670 <ecp_mul_comb+0x7c>

        T_ok = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
 800b6a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d117      	bne.n	800b6da <ecp_mul_comb+0xe6>
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 800b6aa:	7eba      	ldrb	r2, [r7, #26]
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	69f9      	ldr	r1, [r7, #28]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fcd2 	bl	800b064 <ecp_precompute_comb>
 800b6c0:	6278      	str	r0, [r7, #36]	; 0x24
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d11e      	bne.n	800b706 <ecp_mul_comb+0x112>

        if( p_eq_g )
 800b6c8:	7efb      	ldrb	r3, [r7, #27]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <ecp_mul_comb+0xe6>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	69fa      	ldr	r2, [r7, #28]
 800b6d2:	675a      	str	r2, [r3, #116]	; 0x74
            grp->T_size = T_size;
 800b6d4:	7e7a      	ldrb	r2, [r7, #25]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	679a      	str	r2, [r3, #120]	; 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	9305      	str	r3, [sp, #20]
 800b6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e0:	9304      	str	r3, [sp, #16]
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	9303      	str	r3, [sp, #12]
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	9302      	str	r3, [sp, #8]
 800b6ea:	7ebb      	ldrb	r3, [r7, #26]
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	7e7b      	ldrb	r3, [r7, #25]
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	68b9      	ldr	r1, [r7, #8]
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f7ff fef3 	bl	800b4e4 <ecp_mul_comb_after_precomp>
 800b6fe:	6278      	str	r0, [r7, #36]	; 0x24
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	2b00      	cmp	r3, #0
                                                 T, T_size, w, d,
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:
 800b704:	e000      	b.n	800b708 <ecp_mul_comb+0x114>
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 800b706:	bf00      	nop

    /* does T belong to the group? */
    if( T == grp->T )
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b70c:	69fa      	ldr	r2, [r7, #28]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d101      	bne.n	800b716 <ecp_mul_comb+0x122>
        T = NULL;
 800b712:	2300      	movs	r3, #0
 800b714:	61fb      	str	r3, [r7, #28]
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01c      	beq.n	800b756 <ecp_mul_comb+0x162>
    {
        for( i = 0; i < T_size; i++ )
 800b71c:	2300      	movs	r3, #0
 800b71e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b722:	e010      	b.n	800b746 <ecp_mul_comb+0x152>
            mbedtls_ecp_point_free( &T[i] );
 800b724:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b728:	4613      	mov	r3, r2
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	461a      	mov	r2, r3
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	4413      	add	r3, r2
 800b736:	4618      	mov	r0, r3
 800b738:	f7fd ff77 	bl	800962a <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 800b73c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b740:	3301      	adds	r3, #1
 800b742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b746:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b74a:	7e7b      	ldrb	r3, [r7, #25]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d3e9      	bcc.n	800b724 <ecp_mul_comb+0x130>
        mbedtls_free( T );
 800b750:	69f8      	ldr	r0, [r7, #28]
 800b752:	f006 f877 	bl	8011844 <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
 800b756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <ecp_mul_comb+0x16e>
        mbedtls_ecp_point_free( R );
 800b75c:	68b8      	ldr	r0, [r7, #8]
 800b75e:	f7fd ff64 	bl	800962a <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( rsm );

    return( ret );
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b764:	4618      	mov	r0, r3
 800b766:	3728      	adds	r7, #40	; 0x28
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	ffffb280 	.word	0xffffb280

0800b770 <ecp_normalize_mxz>:
/*
 * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
 * Cost: 1M + 1I
 */
static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_mxz( grp, P ) );
#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	f103 0018 	add.w	r0, r3, #24
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	f103 0118 	add.w	r1, r3, #24
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	3304      	adds	r3, #4
 800b78a:	461a      	mov	r2, r3
 800b78c:	f7fc fc09 	bl	8007fa2 <mbedtls_mpi_inv_mod>
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d11d      	bne.n	800b7d4 <ecp_normalize_mxz+0x64>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 800b798:	6838      	ldr	r0, [r7, #0]
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	3318      	adds	r3, #24
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	f7fb fe0d 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d114      	bne.n	800b7d8 <ecp_normalize_mxz+0x68>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	6879      	ldr	r1, [r7, #4]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe f838 	bl	8009828 <ecp_modp>
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10d      	bne.n	800b7dc <ecp_normalize_mxz+0x6c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	3318      	adds	r3, #24
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7f9 fa29 	bl	8004c1e <mbedtls_mpi_lset>
 800b7cc:	60f8      	str	r0, [r7, #12]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0

cleanup:
 800b7d2:	e004      	b.n	800b7de <ecp_normalize_mxz+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 800b7d4:	bf00      	nop
 800b7d6:	e002      	b.n	800b7de <ecp_normalize_mxz+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 800b7d8:	bf00      	nop
 800b7da:	e000      	b.n	800b7de <ecp_normalize_mxz+0x6e>
 800b7dc:	bf00      	nop
    return( ret );
 800b7de:	68fb      	ldr	r3, [r7, #12]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <ecp_randomize_mxz>:
 * This countermeasure was first suggested in [2].
 * Cost: 2M
 */
static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08a      	sub	sp, #40	; 0x28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l;
    size_t p_size;
    int count = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	623b      	str	r3, [r7, #32]
#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );
#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7fe:	3307      	adds	r3, #7
 800b800:	08db      	lsrs	r3, r3, #3
 800b802:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi_init( &l );
 800b804:	f107 0310 	add.w	r3, r7, #16
 800b808:	4618      	mov	r0, r3
 800b80a:	f7f8 ffc3 	bl	8004794 <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800b80e:	f107 0010 	add.w	r0, r7, #16
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	69f9      	ldr	r1, [r7, #28]
 800b818:	f7fc fb77 	bl	8007f0a <mbedtls_mpi_fill_random>
 800b81c:	6278      	str	r0, [r7, #36]	; 0x24
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	d151      	bne.n	800b8c8 <ecp_randomize_mxz+0xe0>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800b824:	e009      	b.n	800b83a <ecp_randomize_mxz+0x52>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800b826:	f107 0310 	add.w	r3, r7, #16
 800b82a:	2101      	movs	r1, #1
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f9 fdf6 	bl	800541e <mbedtls_mpi_shift_r>
 800b832:	6278      	str	r0, [r7, #36]	; 0x24
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	2b00      	cmp	r3, #0
 800b838:	d148      	bne.n	800b8cc <ecp_randomize_mxz+0xe4>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	1d1a      	adds	r2, r3, #4
 800b83e:	f107 0310 	add.w	r3, r7, #16
 800b842:	4611      	mov	r1, r2
 800b844:	4618      	mov	r0, r3
 800b846:	f7f9 ff07 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	daea      	bge.n	800b826 <ecp_randomize_mxz+0x3e>

        if( count++ > 10 )
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	623a      	str	r2, [r7, #32]
 800b856:	2b0a      	cmp	r3, #10
 800b858:	dd01      	ble.n	800b85e <ecp_randomize_mxz+0x76>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800b85a:	4b25      	ldr	r3, [pc, #148]	; (800b8f0 <ecp_randomize_mxz+0x108>)
 800b85c:	e043      	b.n	800b8e6 <ecp_randomize_mxz+0xfe>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800b85e:	f107 0310 	add.w	r3, r7, #16
 800b862:	2101      	movs	r1, #1
 800b864:	4618      	mov	r0, r3
 800b866:	f7f9 ff92 	bl	800578e <mbedtls_mpi_cmp_int>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	ddce      	ble.n	800b80e <ecp_randomize_mxz+0x26>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	68b9      	ldr	r1, [r7, #8]
 800b874:	f107 0210 	add.w	r2, r7, #16
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fb fda1 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800b87e:	6278      	str	r0, [r7, #36]	; 0x24
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	2b00      	cmp	r3, #0
 800b884:	d124      	bne.n	800b8d0 <ecp_randomize_mxz+0xe8>
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fd ffcc 	bl	8009828 <ecp_modp>
 800b890:	6278      	str	r0, [r7, #36]	; 0x24
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	2b00      	cmp	r3, #0
 800b896:	d11d      	bne.n	800b8d4 <ecp_randomize_mxz+0xec>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f103 0018 	add.w	r0, r3, #24
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	3318      	adds	r3, #24
 800b8a2:	f107 0210 	add.w	r2, r7, #16
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	f7fb fd8a 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800b8ac:	6278      	str	r0, [r7, #36]	; 0x24
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d111      	bne.n	800b8d8 <ecp_randomize_mxz+0xf0>
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	3318      	adds	r3, #24
 800b8b8:	68f9      	ldr	r1, [r7, #12]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fd ffb4 	bl	8009828 <ecp_modp>
 800b8c0:	6278      	str	r0, [r7, #36]	; 0x24
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c4:	2b00      	cmp	r3, #0

cleanup:
 800b8c6:	e008      	b.n	800b8da <ecp_randomize_mxz+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800b8c8:	bf00      	nop
 800b8ca:	e006      	b.n	800b8da <ecp_randomize_mxz+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800b8cc:	bf00      	nop
 800b8ce:	e004      	b.n	800b8da <ecp_randomize_mxz+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 800b8d0:	bf00      	nop
 800b8d2:	e002      	b.n	800b8da <ecp_randomize_mxz+0xf2>
 800b8d4:	bf00      	nop
 800b8d6:	e000      	b.n	800b8da <ecp_randomize_mxz+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 800b8d8:	bf00      	nop
    mbedtls_mpi_free( &l );
 800b8da:	f107 0310 	add.w	r3, r7, #16
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7f8 ff6b 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3728      	adds	r7, #40	; 0x28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	ffffb300 	.word	0xffffb300

0800b8f4 <ecp_double_add_mxz>:
 */
static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,
                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
                               const mbedtls_mpi *d )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b0a0      	sub	sp, #128	; 0x80
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
 800b900:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d ) );
#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */

    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 800b902:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b906:	4618      	mov	r0, r3
 800b908:	f7f8 ff44 	bl	8004794 <mbedtls_mpi_init>
 800b90c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b910:	4618      	mov	r0, r3
 800b912:	f7f8 ff3f 	bl	8004794 <mbedtls_mpi_init>
 800b916:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7f8 ff3a 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 800b920:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b924:	4618      	mov	r0, r3
 800b926:	f7f8 ff35 	bl	8004794 <mbedtls_mpi_init>
 800b92a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f8 ff30 	bl	8004794 <mbedtls_mpi_init>
 800b934:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b938:	4618      	mov	r0, r3
 800b93a:	f7f8 ff2b 	bl	8004794 <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 800b93e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b942:	4618      	mov	r0, r3
 800b944:	f7f8 ff26 	bl	8004794 <mbedtls_mpi_init>
 800b948:	f107 031c 	add.w	r3, r7, #28
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7f8 ff21 	bl	8004794 <mbedtls_mpi_init>
 800b952:	f107 0310 	add.w	r3, r7, #16
 800b956:	4618      	mov	r0, r3
 800b958:	f7f8 ff1c 	bl	8004794 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	f103 0218 	add.w	r2, r3, #24
 800b964:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fa f8a4 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800b96e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b972:	2b00      	cmp	r3, #0
 800b974:	f040 8227 	bne.w	800bdc6 <ecp_double_add_mxz+0x4d2>
 800b978:	e00d      	b.n	800b996 <ecp_double_add_mxz+0xa2>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	1d1a      	adds	r2, r3, #4
 800b97e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800b982:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b986:	4618      	mov	r0, r3
 800b988:	f7fa f831 	bl	80059ee <mbedtls_mpi_sub_abs>
 800b98c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b98e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 821a 	bne.w	800bdca <ecp_double_add_mxz+0x4d6>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	1d1a      	adds	r2, r3, #4
 800b99a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f9 fe59 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	dae6      	bge.n	800b97a <ecp_double_add_mxz+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 800b9ac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800b9b0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800b9b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fb fd01 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800b9be:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b9c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f040 8203 	bne.w	800bdce <ecp_double_add_mxz+0x4da>
 800b9c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b9cc:	68f9      	ldr	r1, [r7, #12]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fd ff2a 	bl	8009828 <ecp_modp>
 800b9d4:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b9d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f040 81fa 	bne.w	800bdd2 <ecp_double_add_mxz+0x4de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	f103 0218 	add.w	r2, r3, #24
 800b9e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fa f8ad 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800b9f0:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b9f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f040 81ee 	bne.w	800bdd6 <ecp_double_add_mxz+0x4e2>
 800b9fa:	e00d      	b.n	800ba18 <ecp_double_add_mxz+0x124>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	1d1a      	adds	r2, r3, #4
 800ba00:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ba04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fa f854 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800ba0e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ba10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f040 81e1 	bne.w	800bdda <ecp_double_add_mxz+0x4e6>
 800ba18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	da08      	bge.n	800ba30 <ecp_double_add_mxz+0x13c>
 800ba1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba22:	2100      	movs	r1, #0
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f9 feb2 	bl	800578e <mbedtls_mpi_cmp_int>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e5      	bne.n	800b9fc <ecp_double_add_mxz+0x108>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 800ba30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ba34:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ba38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fb fcbf 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800ba42:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ba44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f040 81c9 	bne.w	800bdde <ecp_double_add_mxz+0x4ea>
 800ba4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ba50:	68f9      	ldr	r1, [r7, #12]
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fd fee8 	bl	8009828 <ecp_modp>
 800ba58:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ba5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 81c0 	bne.w	800bde2 <ecp_double_add_mxz+0x4ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 800ba62:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ba66:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800ba6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fa f86b 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800ba74:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ba76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f040 81b4 	bne.w	800bde6 <ecp_double_add_mxz+0x4f2>
 800ba7e:	e00d      	b.n	800ba9c <ecp_double_add_mxz+0x1a8>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	1d1a      	adds	r2, r3, #4
 800ba84:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ba88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fa f812 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800ba92:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ba94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f040 81a7 	bne.w	800bdea <ecp_double_add_mxz+0x4f6>
 800ba9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	da08      	bge.n	800bab4 <ecp_double_add_mxz+0x1c0>
 800baa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800baa6:	2100      	movs	r1, #0
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f9 fe70 	bl	800578e <mbedtls_mpi_cmp_int>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e5      	bne.n	800ba80 <ecp_double_add_mxz+0x18c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 800bab4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800babc:	f103 0218 	add.w	r2, r3, #24
 800bac0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7f9 fff6 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800baca:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bacc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f040 818d 	bne.w	800bdee <ecp_double_add_mxz+0x4fa>
 800bad4:	e00d      	b.n	800baf2 <ecp_double_add_mxz+0x1fe>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	1d1a      	adds	r2, r3, #4
 800bada:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800bade:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7f9 ff83 	bl	80059ee <mbedtls_mpi_sub_abs>
 800bae8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800baea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800baec:	2b00      	cmp	r3, #0
 800baee:	f040 8180 	bne.w	800bdf2 <ecp_double_add_mxz+0x4fe>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	1d1a      	adds	r2, r3, #4
 800baf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bafa:	4611      	mov	r1, r2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7f9 fdab 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	dae6      	bge.n	800bad6 <ecp_double_add_mxz+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 800bb08:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bb0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb10:	f103 0218 	add.w	r2, r3, #24
 800bb14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fa f816 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800bb1e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bb20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f040 8167 	bne.w	800bdf6 <ecp_double_add_mxz+0x502>
 800bb28:	e00d      	b.n	800bb46 <ecp_double_add_mxz+0x252>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bb32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7f9 ffbd 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800bb3c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bb3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f040 815a 	bne.w	800bdfa <ecp_double_add_mxz+0x506>
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	da08      	bge.n	800bb5e <ecp_double_add_mxz+0x26a>
 800bb4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb50:	2100      	movs	r1, #0
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f9 fe1b 	bl	800578e <mbedtls_mpi_cmp_int>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1e5      	bne.n	800bb2a <ecp_double_add_mxz+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 800bb5e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bb62:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bb66:	f107 031c 	add.w	r3, r7, #28
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fb fc28 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800bb70:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bb72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f040 8142 	bne.w	800bdfe <ecp_double_add_mxz+0x50a>
 800bb7a:	f107 031c 	add.w	r3, r7, #28
 800bb7e:	68f9      	ldr	r1, [r7, #12]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fd fe51 	bl	8009828 <ecp_modp>
 800bb86:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bb88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f040 8139 	bne.w	800be02 <ecp_double_add_mxz+0x50e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 800bb90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bb94:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800bb98:	f107 0310 	add.w	r3, r7, #16
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fb fc0f 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800bba2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f040 812d 	bne.w	800be06 <ecp_double_add_mxz+0x512>
 800bbac:	f107 0310 	add.w	r3, r7, #16
 800bbb0:	68f9      	ldr	r1, [r7, #12]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd fe38 	bl	8009828 <ecp_modp>
 800bbb8:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bbba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f040 8124 	bne.w	800be0a <ecp_double_add_mxz+0x516>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f107 0210 	add.w	r2, r7, #16
 800bbc8:	f107 011c 	add.w	r1, r7, #28
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7f9 ff72 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800bbd2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bbd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f040 8119 	bne.w	800be0e <ecp_double_add_mxz+0x51a>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	68f9      	ldr	r1, [r7, #12]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fd fe21 	bl	8009828 <ecp_modp>
 800bbe6:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bbe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f040 8111 	bne.w	800be12 <ecp_double_add_mxz+0x51e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6879      	ldr	r1, [r7, #4]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fb fbe2 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800bbfc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bbfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f040 8108 	bne.w	800be16 <ecp_double_add_mxz+0x522>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68f9      	ldr	r1, [r7, #12]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fd fe0c 	bl	8009828 <ecp_modp>
 800bc10:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bc12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f040 8100 	bne.w	800be1a <ecp_double_add_mxz+0x526>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3318      	adds	r3, #24
 800bc1e:	f107 0210 	add.w	r2, r7, #16
 800bc22:	f107 011c 	add.w	r1, r7, #28
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7f9 ff8f 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800bc2c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bc2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f040 80f4 	bne.w	800be1e <ecp_double_add_mxz+0x52a>
 800bc36:	e00f      	b.n	800bc58 <ecp_double_add_mxz+0x364>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f103 0018 	add.w	r0, r3, #24
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f103 0118 	add.w	r1, r3, #24
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3304      	adds	r3, #4
 800bc48:	461a      	mov	r2, r3
 800bc4a:	f7f9 ff34 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800bc4e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bc50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f040 80e5 	bne.w	800be22 <ecp_double_add_mxz+0x52e>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da08      	bge.n	800bc72 <ecp_double_add_mxz+0x37e>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3318      	adds	r3, #24
 800bc64:	2100      	movs	r1, #0
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7f9 fd91 	bl	800578e <mbedtls_mpi_cmp_int>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1e2      	bne.n	800bc38 <ecp_double_add_mxz+0x344>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f103 0018 	add.w	r0, r3, #24
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f103 0118 	add.w	r1, r3, #24
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	3318      	adds	r3, #24
 800bc82:	461a      	mov	r2, r3
 800bc84:	f7fb fb9c 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800bc88:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bc8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f040 80ca 	bne.w	800be26 <ecp_double_add_mxz+0x532>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	3318      	adds	r3, #24
 800bc96:	68f9      	ldr	r1, [r7, #12]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fd fdc5 	bl	8009828 <ecp_modp>
 800bc9e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 80c1 	bne.w	800be2a <ecp_double_add_mxz+0x536>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f103 0018 	add.w	r0, r3, #24
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3318      	adds	r3, #24
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bcb8:	f7fb fb82 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800bcbc:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bcbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f040 80b4 	bne.w	800be2e <ecp_double_add_mxz+0x53a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3318      	adds	r3, #24
 800bcca:	68f9      	ldr	r1, [r7, #12]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fd fdab 	bl	8009828 <ecp_modp>
 800bcd2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bcd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f040 80ab 	bne.w	800be32 <ecp_double_add_mxz+0x53e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800bce2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fb fb6a 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800bcec:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bcee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f040 80a0 	bne.w	800be36 <ecp_double_add_mxz+0x542>
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	68f9      	ldr	r1, [r7, #12]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fd fd94 	bl	8009828 <ecp_modp>
 800bd00:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bd02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f040 8098 	bne.w	800be3a <ecp_double_add_mxz+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f103 0018 	add.w	r0, r3, #24
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3310      	adds	r3, #16
 800bd14:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bd18:	4619      	mov	r1, r3
 800bd1a:	f7fb fb51 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800bd1e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bd20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f040 808b 	bne.w	800be3e <ecp_double_add_mxz+0x54a>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	3318      	adds	r3, #24
 800bd2c:	68f9      	ldr	r1, [r7, #12]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fd fd7a 	bl	8009828 <ecp_modp>
 800bd34:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bd36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f040 8082 	bne.w	800be42 <ecp_double_add_mxz+0x54e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f103 0018 	add.w	r0, r3, #24
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	f103 0218 	add.w	r2, r3, #24
 800bd4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800bd4e:	4619      	mov	r1, r3
 800bd50:	f7f9 feb1 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800bd54:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bd56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d174      	bne.n	800be46 <ecp_double_add_mxz+0x552>
 800bd5c:	e00e      	b.n	800bd7c <ecp_double_add_mxz+0x488>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	f103 0018 	add.w	r0, r3, #24
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f103 0118 	add.w	r1, r3, #24
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	461a      	mov	r2, r3
 800bd70:	f7f9 fe3d 	bl	80059ee <mbedtls_mpi_sub_abs>
 800bd74:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bd76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d166      	bne.n	800be4a <ecp_double_add_mxz+0x556>
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	f103 0218 	add.w	r2, r3, #24
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3304      	adds	r3, #4
 800bd86:	4619      	mov	r1, r3
 800bd88:	4610      	mov	r0, r2
 800bd8a:	f7f9 fc65 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dae4      	bge.n	800bd5e <ecp_double_add_mxz+0x46a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f103 0018 	add.w	r0, r3, #24
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	f103 0218 	add.w	r2, r3, #24
 800bda0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bda4:	4619      	mov	r1, r3
 800bda6:	f7fb fb0b 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800bdaa:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bdac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d14d      	bne.n	800be4e <ecp_double_add_mxz+0x55a>
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	3318      	adds	r3, #24
 800bdb6:	68f9      	ldr	r1, [r7, #12]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7fd fd35 	bl	8009828 <ecp_modp>
 800bdbe:	67f8      	str	r0, [r7, #124]	; 0x7c
 800bdc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bdc2:	2b00      	cmp	r3, #0

cleanup:
 800bdc4:	e044      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 800bdc6:	bf00      	nop
 800bdc8:	e042      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800bdca:	bf00      	nop
 800bdcc:	e040      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 800bdce:	bf00      	nop
 800bdd0:	e03e      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800bdd2:	bf00      	nop
 800bdd4:	e03c      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 800bdd6:	bf00      	nop
 800bdd8:	e03a      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800bdda:	bf00      	nop
 800bddc:	e038      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 800bdde:	bf00      	nop
 800bde0:	e036      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800bde2:	bf00      	nop
 800bde4:	e034      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 800bde6:	bf00      	nop
 800bde8:	e032      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800bdea:	bf00      	nop
 800bdec:	e030      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 800bdee:	bf00      	nop
 800bdf0:	e02e      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800bdf2:	bf00      	nop
 800bdf4:	e02c      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 800bdf6:	bf00      	nop
 800bdf8:	e02a      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800bdfa:	bf00      	nop
 800bdfc:	e028      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 800bdfe:	bf00      	nop
 800be00:	e026      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be02:	bf00      	nop
 800be04:	e024      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 800be06:	bf00      	nop
 800be08:	e022      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be0a:	bf00      	nop
 800be0c:	e020      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 800be0e:	bf00      	nop
 800be10:	e01e      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be12:	bf00      	nop
 800be14:	e01c      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 800be16:	bf00      	nop
 800be18:	e01a      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be1a:	bf00      	nop
 800be1c:	e018      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 800be1e:	bf00      	nop
 800be20:	e016      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be22:	bf00      	nop
 800be24:	e014      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 800be26:	bf00      	nop
 800be28:	e012      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be2a:	bf00      	nop
 800be2c:	e010      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 800be2e:	bf00      	nop
 800be30:	e00e      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be32:	bf00      	nop
 800be34:	e00c      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 800be36:	bf00      	nop
 800be38:	e00a      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be3a:	bf00      	nop
 800be3c:	e008      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 800be3e:	bf00      	nop
 800be40:	e006      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be42:	bf00      	nop
 800be44:	e004      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 800be46:	bf00      	nop
 800be48:	e002      	b.n	800be50 <ecp_double_add_mxz+0x55c>
 800be4a:	bf00      	nop
 800be4c:	e000      	b.n	800be50 <ecp_double_add_mxz+0x55c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 800be4e:	bf00      	nop
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 800be50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800be54:	4618      	mov	r0, r3
 800be56:	f7f8 fcb0 	bl	80047ba <mbedtls_mpi_free>
 800be5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800be5e:	4618      	mov	r0, r3
 800be60:	f7f8 fcab 	bl	80047ba <mbedtls_mpi_free>
 800be64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f8 fca6 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 800be6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800be72:	4618      	mov	r0, r3
 800be74:	f7f8 fca1 	bl	80047ba <mbedtls_mpi_free>
 800be78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7f8 fc9c 	bl	80047ba <mbedtls_mpi_free>
 800be82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800be86:	4618      	mov	r0, r3
 800be88:	f7f8 fc97 	bl	80047ba <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 800be8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be90:	4618      	mov	r0, r3
 800be92:	f7f8 fc92 	bl	80047ba <mbedtls_mpi_free>
 800be96:	f107 031c 	add.w	r3, r7, #28
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7f8 fc8d 	bl	80047ba <mbedtls_mpi_free>
 800bea0:	f107 0310 	add.w	r3, r7, #16
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7f8 fc88 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800beaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800beac:	4618      	mov	r0, r3
 800beae:	3780      	adds	r7, #128	; 0x80
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <ecp_mul_mxz>:
 */
static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                        int (*f_rng)(void *, unsigned char *, size_t),
                        void *p_rng )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b096      	sub	sp, #88	; 0x58
 800beb8:	af02      	add	r7, sp, #8
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	603b      	str	r3, [r7, #0]
    size_t i;
    unsigned char b;
    mbedtls_ecp_point RP;
    mbedtls_mpi PX;

    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 800bec2:	f107 0320 	add.w	r3, r7, #32
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fd fb44 	bl	8009554 <mbedtls_ecp_point_init>
 800becc:	f107 0314 	add.w	r3, r7, #20
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f8 fc5f 	bl	8004794 <mbedtls_mpi_init>

    /* Save PX and read from P before writing to R, in case P == R */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	f107 0314 	add.w	r3, r7, #20
 800bedc:	4611      	mov	r1, r2
 800bede:	4618      	mov	r0, r3
 800bee0:	f7f8 fd3a 	bl	8004958 <mbedtls_mpi_copy>
 800bee4:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f040 80ad 	bne.w	800c048 <ecp_mul_mxz+0x194>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 800beee:	f107 0320 	add.w	r3, r7, #32
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fd fc18 	bl	800972a <mbedtls_ecp_copy>
 800befa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800befc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f040 80a4 	bne.w	800c04c <ecp_mul_mxz+0x198>

    /* Set R to zero in modified x/z coordinates */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2101      	movs	r1, #1
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7f8 fe88 	bl	8004c1e <mbedtls_mpi_lset>
 800bf0e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bf10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f040 809c 	bne.w	800c050 <ecp_mul_mxz+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	3318      	adds	r3, #24
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7f8 fe7d 	bl	8004c1e <mbedtls_mpi_lset>
 800bf24:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bf26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f040 8093 	bne.w	800c054 <ecp_mul_mxz+0x1a0>
    mbedtls_mpi_free( &R->Y );
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	330c      	adds	r3, #12
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7f8 fc41 	bl	80047ba <mbedtls_mpi_free>

    /* RP.X might be sligtly larger than P, so reduce it */
    MOD_ADD( RP.X );
 800bf38:	e00d      	b.n	800bf56 <ecp_mul_mxz+0xa2>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	1d1a      	adds	r2, r3, #4
 800bf3e:	f107 0120 	add.w	r1, r7, #32
 800bf42:	f107 0320 	add.w	r3, r7, #32
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7f9 fd51 	bl	80059ee <mbedtls_mpi_sub_abs>
 800bf4c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bf4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f040 8081 	bne.w	800c058 <ecp_mul_mxz+0x1a4>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	1d1a      	adds	r2, r3, #4
 800bf5a:	f107 0320 	add.w	r3, r7, #32
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7f9 fb79 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dae6      	bge.n	800bf3a <ecp_mul_mxz+0x86>

    /* Randomize coordinates of the starting point */
    if( f_rng != NULL )
 800bf6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00a      	beq.n	800bf88 <ecp_mul_mxz+0xd4>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 800bf72:	f107 0120 	add.w	r1, r7, #32
 800bf76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fc34 	bl	800b7e8 <ecp_randomize_mxz>
 800bf80:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bf82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d169      	bne.n	800c05c <ecp_mul_mxz+0x1a8>

    /* Loop invariant: R = result so far, RP = R + P */
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7f8 ff42 	bl	8004e12 <mbedtls_mpi_bitlen>
 800bf8e:	64b8      	str	r0, [r7, #72]	; 0x48
    while( i-- > 0 )
 800bf90:	e04d      	b.n	800c02e <ecp_mul_mxz+0x17a>
    {
        b = mbedtls_mpi_get_bit( m, i );
 800bf92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7f8 fe70 	bl	8004c7a <mbedtls_mpi_get_bit>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * which is:
         *  if (b) double_add( RP, R, RP, R )
         *  else   double_add( R, RP, R, RP )
         * but using safe conditional swaps to avoid leaks
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800bfa6:	f107 0120 	add.w	r1, r7, #32
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7f8 fda2 	bl	8004af4 <mbedtls_mpi_safe_cond_swap>
 800bfb0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bfb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d153      	bne.n	800c060 <ecp_mul_mxz+0x1ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	f103 0018 	add.w	r0, r3, #24
 800bfbe:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800bfc2:	f107 0320 	add.w	r3, r7, #32
 800bfc6:	3318      	adds	r3, #24
 800bfc8:	4619      	mov	r1, r3
 800bfca:	f7f8 fd93 	bl	8004af4 <mbedtls_mpi_safe_cond_swap>
 800bfce:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bfd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d146      	bne.n	800c064 <ecp_mul_mxz+0x1b0>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 800bfd6:	f107 0220 	add.w	r2, r7, #32
 800bfda:	f107 0314 	add.w	r3, r7, #20
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	f107 0320 	add.w	r3, r7, #32
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	68b9      	ldr	r1, [r7, #8]
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff fc82 	bl	800b8f4 <ecp_double_add_mxz>
 800bff0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d137      	bne.n	800c068 <ecp_mul_mxz+0x1b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800bffe:	f107 0120 	add.w	r1, r7, #32
 800c002:	4618      	mov	r0, r3
 800c004:	f7f8 fd76 	bl	8004af4 <mbedtls_mpi_safe_cond_swap>
 800c008:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d12d      	bne.n	800c06c <ecp_mul_mxz+0x1b8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f103 0018 	add.w	r0, r3, #24
 800c016:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800c01a:	f107 0320 	add.w	r3, r7, #32
 800c01e:	3318      	adds	r3, #24
 800c020:	4619      	mov	r1, r3
 800c022:	f7f8 fd67 	bl	8004af4 <mbedtls_mpi_safe_cond_swap>
 800c026:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d120      	bne.n	800c070 <ecp_mul_mxz+0x1bc>
    while( i-- > 0 )
 800c02e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c030:	1e5a      	subs	r2, r3, #1
 800c032:	64ba      	str	r2, [r7, #72]	; 0x48
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1ac      	bne.n	800bf92 <ecp_mul_mxz+0xde>
    }

    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
 800c038:	68b9      	ldr	r1, [r7, #8]
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f7ff fb98 	bl	800b770 <ecp_normalize_mxz>
 800c040:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c044:	2b00      	cmp	r3, #0

cleanup:
 800c046:	e014      	b.n	800c072 <ecp_mul_mxz+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 800c048:	bf00      	nop
 800c04a:	e012      	b.n	800c072 <ecp_mul_mxz+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 800c04c:	bf00      	nop
 800c04e:	e010      	b.n	800c072 <ecp_mul_mxz+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 800c050:	bf00      	nop
 800c052:	e00e      	b.n	800c072 <ecp_mul_mxz+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 800c054:	bf00      	nop
 800c056:	e00c      	b.n	800c072 <ecp_mul_mxz+0x1be>
    MOD_ADD( RP.X );
 800c058:	bf00      	nop
 800c05a:	e00a      	b.n	800c072 <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 800c05c:	bf00      	nop
 800c05e:	e008      	b.n	800c072 <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800c060:	bf00      	nop
 800c062:	e006      	b.n	800c072 <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800c064:	bf00      	nop
 800c066:	e004      	b.n	800c072 <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 800c068:	bf00      	nop
 800c06a:	e002      	b.n	800c072 <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800c06c:	bf00      	nop
 800c06e:	e000      	b.n	800c072 <ecp_mul_mxz+0x1be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800c070:	bf00      	nop
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 800c072:	f107 0320 	add.w	r3, r7, #32
 800c076:	4618      	mov	r0, r3
 800c078:	f7fd fad7 	bl	800962a <mbedtls_ecp_point_free>
 800c07c:	f107 0314 	add.w	r3, r7, #20
 800c080:	4618      	mov	r0, r3
 800c082:	f7f8 fb9a 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800c086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3750      	adds	r7, #80	; 0x50
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08a      	sub	sp, #40	; 0x28
 800c094:	af04      	add	r7, sp, #16
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800c09e:	4b25      	ldr	r3, [pc, #148]	; (800c134 <mbedtls_ecp_mul_restartable+0xa4>)
 800c0a0:	617b      	str	r3, [r7, #20]
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f000 fa87 	bl	800c5b8 <mbedtls_ecp_check_privkey>
 800c0aa:	6178      	str	r0, [r7, #20]
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d133      	bne.n	800c11a <mbedtls_ecp_mul_restartable+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	f000 fa4d 	bl	800c554 <mbedtls_ecp_check_pubkey>
 800c0ba:	6178      	str	r0, [r7, #20]
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d12d      	bne.n	800c11e <mbedtls_ecp_mul_restartable+0x8e>
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800c0c2:	4b1c      	ldr	r3, [pc, #112]	; (800c134 <mbedtls_ecp_mul_restartable+0xa4>)
 800c0c4:	617b      	str	r3, [r7, #20]
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7fd fa2d 	bl	8009526 <ecp_get_type>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d10d      	bne.n	800c0ee <mbedtls_ecp_mul_restartable+0x5e>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	9301      	str	r3, [sp, #4]
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f7ff fee7 	bl	800beb4 <ecp_mul_mxz>
 800c0e6:	6178      	str	r0, [r7, #20]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d119      	bne.n	800c122 <mbedtls_ecp_mul_restartable+0x92>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f7fd fa19 	bl	8009526 <ecp_get_type>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d115      	bne.n	800c126 <mbedtls_ecp_mul_restartable+0x96>
        MBEDTLS_MPI_CHK( ecp_mul_comb( grp, R, m, P, f_rng, p_rng, rs_ctx ) );
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	9302      	str	r3, [sp, #8]
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	9301      	str	r3, [sp, #4]
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	68b9      	ldr	r1, [r7, #8]
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f7ff fa71 	bl	800b5f4 <ecp_mul_comb>
 800c112:	6178      	str	r0, [r7, #20]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	2b00      	cmp	r3, #0
#endif

cleanup:
 800c118:	e005      	b.n	800c126 <mbedtls_ecp_mul_restartable+0x96>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800c11a:	bf00      	nop
 800c11c:	e004      	b.n	800c128 <mbedtls_ecp_mul_restartable+0x98>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 800c11e:	bf00      	nop
 800c120:	e002      	b.n	800c128 <mbedtls_ecp_mul_restartable+0x98>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 800c122:	bf00      	nop
 800c124:	e000      	b.n	800c128 <mbedtls_ecp_mul_restartable+0x98>
cleanup:
 800c126:	bf00      	nop
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
 800c128:	697b      	ldr	r3, [r7, #20]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	ffffb080 	.word	0xffffb080

0800c138 <mbedtls_ecp_mul>:
 * Multiplication R = m * P
 */
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b088      	sub	sp, #32
 800c13c:	af04      	add	r7, sp, #16
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
 800c144:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( R   != NULL );
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 800c146:	2300      	movs	r3, #0
 800c148:	9302      	str	r3, [sp, #8]
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f7ff ff99 	bl	800c090 <mbedtls_ecp_mul_restartable>
 800c15e:	4603      	mov	r3, r0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <ecp_check_pubkey_sw>:
/*
 * Check that an affine point is valid as a public key,
 * short weierstrass curves (SEC1 3.2.3.1)
 */
static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2100      	movs	r1, #0
 800c176:	4618      	mov	r0, r3
 800c178:	f7f9 fb09 	bl	800578e <mbedtls_mpi_cmp_int>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	db1e      	blt.n	800c1c0 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	330c      	adds	r3, #12
 800c186:	2100      	movs	r1, #0
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f9 fb00 	bl	800578e <mbedtls_mpi_cmp_int>
 800c18e:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800c190:	2b00      	cmp	r3, #0
 800c192:	db15      	blt.n	800c1c0 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	3304      	adds	r3, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7f9 fa5b 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c1a2:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	da0b      	bge.n	800c1c0 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	f103 020c 	add.w	r2, r3, #12
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	f7f9 fa4f 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c1ba:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	db01      	blt.n	800c1c4 <ecp_check_pubkey_sw+0x5c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800c1c0:	4b82      	ldr	r3, [pc, #520]	; (800c3cc <ecp_check_pubkey_sw+0x264>)
 800c1c2:	e0fe      	b.n	800c3c2 <ecp_check_pubkey_sw+0x25a>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 800c1c4:	f107 0318 	add.w	r3, r7, #24
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f8 fae3 	bl	8004794 <mbedtls_mpi_init>
 800c1ce:	f107 030c 	add.w	r3, r7, #12
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f8 fade 	bl	8004794 <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	f103 010c 	add.w	r1, r3, #12
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	f103 020c 	add.w	r2, r3, #12
 800c1e4:	f107 0318 	add.w	r3, r7, #24
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fb f8e9 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800c1ee:	6278      	str	r0, [r7, #36]	; 0x24
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f040 80c1 	bne.w	800c37a <ecp_check_pubkey_sw+0x212>
 800c1f8:	f107 0318 	add.w	r3, r7, #24
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7fd fb12 	bl	8009828 <ecp_modp>
 800c204:	6278      	str	r0, [r7, #36]	; 0x24
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f040 80b8 	bne.w	800c37e <ecp_check_pubkey_sw+0x216>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	f107 030c 	add.w	r3, r7, #12
 800c216:	4618      	mov	r0, r3
 800c218:	f7fb f8d2 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800c21c:	6278      	str	r0, [r7, #36]	; 0x24
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	f040 80ae 	bne.w	800c382 <ecp_check_pubkey_sw+0x21a>
 800c226:	f107 030c 	add.w	r3, r7, #12
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fd fafb 	bl	8009828 <ecp_modp>
 800c232:	6278      	str	r0, [r7, #36]	; 0x24
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	2b00      	cmp	r3, #0
 800c238:	f040 80a5 	bne.w	800c386 <ecp_check_pubkey_sw+0x21e>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d128      	bne.n	800c296 <ecp_check_pubkey_sw+0x12e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800c244:	f107 010c 	add.w	r1, r7, #12
 800c248:	f107 030c 	add.w	r3, r7, #12
 800c24c:	2203      	movs	r2, #3
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f9 fce9 	bl	8005c26 <mbedtls_mpi_sub_int>
 800c254:	6278      	str	r0, [r7, #36]	; 0x24
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f040 8096 	bne.w	800c38a <ecp_check_pubkey_sw+0x222>
 800c25e:	e00d      	b.n	800c27c <ecp_check_pubkey_sw+0x114>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	1d1a      	adds	r2, r3, #4
 800c264:	f107 010c 	add.w	r1, r7, #12
 800c268:	f107 030c 	add.w	r3, r7, #12
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7f9 fc22 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800c272:	6278      	str	r0, [r7, #36]	; 0x24
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	2b00      	cmp	r3, #0
 800c278:	f040 8089 	bne.w	800c38e <ecp_check_pubkey_sw+0x226>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	da30      	bge.n	800c2e4 <ecp_check_pubkey_sw+0x17c>
 800c282:	f107 030c 	add.w	r3, r7, #12
 800c286:	2100      	movs	r1, #0
 800c288:	4618      	mov	r0, r3
 800c28a:	f7f9 fa80 	bl	800578e <mbedtls_mpi_cmp_int>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e5      	bne.n	800c260 <ecp_check_pubkey_sw+0xf8>
 800c294:	e026      	b.n	800c2e4 <ecp_check_pubkey_sw+0x17c>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f103 0210 	add.w	r2, r3, #16
 800c29c:	f107 010c 	add.w	r1, r7, #12
 800c2a0:	f107 030c 	add.w	r3, r7, #12
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7f9 fc06 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800c2aa:	6278      	str	r0, [r7, #36]	; 0x24
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d16f      	bne.n	800c392 <ecp_check_pubkey_sw+0x22a>
 800c2b2:	e00c      	b.n	800c2ce <ecp_check_pubkey_sw+0x166>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	1d1a      	adds	r2, r3, #4
 800c2b8:	f107 010c 	add.w	r1, r7, #12
 800c2bc:	f107 030c 	add.w	r3, r7, #12
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7f9 fb94 	bl	80059ee <mbedtls_mpi_sub_abs>
 800c2c6:	6278      	str	r0, [r7, #36]	; 0x24
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d163      	bne.n	800c396 <ecp_check_pubkey_sw+0x22e>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	1d1a      	adds	r2, r3, #4
 800c2d2:	f107 030c 	add.w	r3, r7, #12
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7f9 f9bd 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dae7      	bge.n	800c2b4 <ecp_check_pubkey_sw+0x14c>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	f107 010c 	add.w	r1, r7, #12
 800c2ea:	f107 030c 	add.w	r3, r7, #12
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fb f866 	bl	80073c0 <mbedtls_mpi_mul_mpi>
 800c2f4:	6278      	str	r0, [r7, #36]	; 0x24
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d14e      	bne.n	800c39a <ecp_check_pubkey_sw+0x232>
 800c2fc:	f107 030c 	add.w	r3, r7, #12
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	4618      	mov	r0, r3
 800c304:	f7fd fa90 	bl	8009828 <ecp_modp>
 800c308:	6278      	str	r0, [r7, #36]	; 0x24
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d146      	bne.n	800c39e <ecp_check_pubkey_sw+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f103 021c 	add.w	r2, r3, #28
 800c316:	f107 010c 	add.w	r1, r7, #12
 800c31a:	f107 030c 	add.w	r3, r7, #12
 800c31e:	4618      	mov	r0, r3
 800c320:	f7f9 fbc9 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800c324:	6278      	str	r0, [r7, #36]	; 0x24
 800c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d13a      	bne.n	800c3a2 <ecp_check_pubkey_sw+0x23a>
 800c32c:	e00c      	b.n	800c348 <ecp_check_pubkey_sw+0x1e0>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	1d1a      	adds	r2, r3, #4
 800c332:	f107 010c 	add.w	r1, r7, #12
 800c336:	f107 030c 	add.w	r3, r7, #12
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7f9 fb57 	bl	80059ee <mbedtls_mpi_sub_abs>
 800c340:	6278      	str	r0, [r7, #36]	; 0x24
 800c342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c344:	2b00      	cmp	r3, #0
 800c346:	d12e      	bne.n	800c3a6 <ecp_check_pubkey_sw+0x23e>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	1d1a      	adds	r2, r3, #4
 800c34c:	f107 030c 	add.w	r3, r7, #12
 800c350:	4611      	mov	r1, r2
 800c352:	4618      	mov	r0, r3
 800c354:	f7f9 f980 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	dae7      	bge.n	800c32e <ecp_check_pubkey_sw+0x1c6>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 800c35e:	f107 020c 	add.w	r2, r7, #12
 800c362:	f107 0318 	add.w	r3, r7, #24
 800c366:	4611      	mov	r1, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	f7f9 f975 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d01a      	beq.n	800c3aa <ecp_check_pubkey_sw+0x242>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 800c374:	4b15      	ldr	r3, [pc, #84]	; (800c3cc <ecp_check_pubkey_sw+0x264>)
 800c376:	627b      	str	r3, [r7, #36]	; 0x24
 800c378:	e018      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 800c37a:	bf00      	nop
 800c37c:	e016      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
 800c37e:	bf00      	nop
 800c380:	e014      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 800c382:	bf00      	nop
 800c384:	e012      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
 800c386:	bf00      	nop
 800c388:	e010      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800c38a:	bf00      	nop
 800c38c:	e00e      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
 800c38e:	bf00      	nop
 800c390:	e00c      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 800c392:	bf00      	nop
 800c394:	e00a      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
 800c396:	bf00      	nop
 800c398:	e008      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 800c39a:	bf00      	nop
 800c39c:	e006      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
 800c39e:	bf00      	nop
 800c3a0:	e004      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 800c3a2:	bf00      	nop
 800c3a4:	e002      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>
 800c3a6:	bf00      	nop
 800c3a8:	e000      	b.n	800c3ac <ecp_check_pubkey_sw+0x244>

cleanup:
 800c3aa:	bf00      	nop

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 800c3ac:	f107 0318 	add.w	r3, r7, #24
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7f8 fa02 	bl	80047ba <mbedtls_mpi_free>
 800c3b6:	f107 030c 	add.w	r3, r7, #12
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7f8 f9fd 	bl	80047ba <mbedtls_mpi_free>

    return( ret );
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3728      	adds	r7, #40	; 0x28
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	ffffb380 	.word	0xffffb380

0800c3d0 <mbedtls_ecp_mul_shortcuts>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08a      	sub	sp, #40	; 0x28
 800c3d4:	af04      	add	r7, sp, #16
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	603b      	str	r3, [r7, #0]
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 800c3de:	2101      	movs	r1, #1
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7f9 f9d4 	bl	800578e <mbedtls_mpi_cmp_int>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d107      	bne.n	800c3fc <mbedtls_ecp_mul_shortcuts+0x2c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	68b8      	ldr	r0, [r7, #8]
 800c3f0:	f7fd f99b 	bl	800972a <mbedtls_ecp_copy>
 800c3f4:	6178      	str	r0, [r7, #20]
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	e037      	b.n	800c46c <mbedtls_ecp_mul_shortcuts+0x9c>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 800c3fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7f9 f9c4 	bl	800578e <mbedtls_mpi_cmp_int>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d11e      	bne.n	800c44a <mbedtls_ecp_mul_shortcuts+0x7a>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	68b8      	ldr	r0, [r7, #8]
 800c410:	f7fd f98b 	bl	800972a <mbedtls_ecp_copy>
 800c414:	6178      	str	r0, [r7, #20]
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d126      	bne.n	800c46a <mbedtls_ecp_mul_shortcuts+0x9a>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	330c      	adds	r3, #12
 800c420:	2100      	movs	r1, #0
 800c422:	4618      	mov	r0, r3
 800c424:	f7f9 f9b3 	bl	800578e <mbedtls_mpi_cmp_int>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d01e      	beq.n	800c46c <mbedtls_ecp_mul_shortcuts+0x9c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	f103 000c 	add.w	r0, r3, #12
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	1d19      	adds	r1, r3, #4
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	330c      	adds	r3, #12
 800c43c:	461a      	mov	r2, r3
 800c43e:	f7f9 fb84 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800c442:	6178      	str	r0, [r7, #20]
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b00      	cmp	r3, #0
 800c448:	e010      	b.n	800c46c <mbedtls_ecp_mul_shortcuts+0x9c>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	9302      	str	r3, [sp, #8]
 800c44e:	2300      	movs	r3, #0
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	2300      	movs	r3, #0
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	68b9      	ldr	r1, [r7, #8]
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7ff fe17 	bl	800c090 <mbedtls_ecp_mul_restartable>
 800c462:	6178      	str	r0, [r7, #20]
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2b00      	cmp	r3, #0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
 800c468:	e000      	b.n	800c46c <mbedtls_ecp_mul_shortcuts+0x9c>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800c46a:	bf00      	nop
    return( ret );
 800c46c:	697b      	ldr	r3, [r7, #20]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3718      	adds	r7, #24
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
	...

0800c478 <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b092      	sub	sp, #72	; 0x48
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_ecp_point mP;
    mbedtls_ecp_point *pmP = &mP;
 800c486:	f107 0310 	add.w	r3, r7, #16
 800c48a:	63bb      	str	r3, [r7, #56]	; 0x38
    mbedtls_ecp_point *pR = R;
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	637b      	str	r3, [r7, #52]	; 0x34
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f7fd f848 	bl	8009526 <ecp_get_type>
 800c496:	4603      	mov	r3, r0
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d001      	beq.n	800c4a0 <mbedtls_ecp_muladd_restartable+0x28>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 800c49c:	4b1f      	ldr	r3, [pc, #124]	; (800c51c <mbedtls_ecp_muladd_restartable+0xa4>)
 800c49e:	e039      	b.n	800c514 <mbedtls_ecp_muladd_restartable+0x9c>

    mbedtls_ecp_point_init( &mP );
 800c4a0:	f107 0310 	add.w	r3, r7, #16
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fd f855 	bl	8009554 <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 800c4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f7ff ff8b 	bl	800c3d0 <mbedtls_ecp_mul_shortcuts>
 800c4ba:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d11d      	bne.n	800c4fe <mbedtls_ecp_muladd_restartable+0x86>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 800c4c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f7ff ff7f 	bl	800c3d0 <mbedtls_ecp_mul_shortcuts>
 800c4d2:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d113      	bne.n	800c502 <mbedtls_ecp_muladd_restartable+0x8a>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 800c4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7fe f8eb 	bl	800a6bc <ecp_add_mixed>
 800c4e6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10b      	bne.n	800c506 <mbedtls_ecp_muladd_restartable+0x8e>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 800c4ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f7fd fa03 	bl	80098fc <ecp_normalize_jac>
 800c4f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fa:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, pR ) );
#endif

cleanup:
 800c4fc:	e004      	b.n	800c508 <mbedtls_ecp_muladd_restartable+0x90>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 800c4fe:	bf00      	nop
 800c500:	e002      	b.n	800c508 <mbedtls_ecp_muladd_restartable+0x90>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 800c502:	bf00      	nop
 800c504:	e000      	b.n	800c508 <mbedtls_ecp_muladd_restartable+0x90>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 800c506:	bf00      	nop
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
 800c508:	f107 0310 	add.w	r3, r7, #16
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fd f88c 	bl	800962a <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
 800c512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c514:	4618      	mov	r0, r3
 800c516:	3740      	adds	r7, #64	; 0x40
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	ffffb180 	.word	0xffffb180

0800c520 <ecp_check_pubkey_mx>:
#if defined(ECP_MONTGOMERY)
/*
 * Check validity of a public key for Montgomery curves with x-only schemes
 */
static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
    /* [Curve25519 p. 5] Just check X is the correct number of bytes */
    /* Allow any public value, if it's too big then we'll just reduce it mod p
     * (RFC 7748 sec. 5 para. 3). */
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7f8 fca4 	bl	8004e7a <mbedtls_mpi_size>
 800c532:	4602      	mov	r2, r0
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c538:	3307      	adds	r3, #7
 800c53a:	08db      	lsrs	r3, r3, #3
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d901      	bls.n	800c544 <ecp_check_pubkey_mx+0x24>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800c540:	4b03      	ldr	r3, [pc, #12]	; (800c550 <ecp_check_pubkey_mx+0x30>)
 800c542:	e000      	b.n	800c546 <ecp_check_pubkey_mx+0x26>

    return( 0 );
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	ffffb380 	.word	0xffffb380

0800c554 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	3318      	adds	r3, #24
 800c562:	2101      	movs	r1, #1
 800c564:	4618      	mov	r0, r3
 800c566:	f7f9 f912 	bl	800578e <mbedtls_mpi_cmp_int>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d001      	beq.n	800c574 <mbedtls_ecp_check_pubkey+0x20>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800c570:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <mbedtls_ecp_check_pubkey+0x5c>)
 800c572:	e018      	b.n	800c5a6 <mbedtls_ecp_check_pubkey+0x52>

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7fc ffd6 	bl	8009526 <ecp_get_type>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d105      	bne.n	800c58c <mbedtls_ecp_check_pubkey+0x38>
        return( ecp_check_pubkey_mx( grp, pt ) );
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff ffcc 	bl	800c520 <ecp_check_pubkey_mx>
 800c588:	4603      	mov	r3, r0
 800c58a:	e00c      	b.n	800c5a6 <mbedtls_ecp_check_pubkey+0x52>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7fc ffca 	bl	8009526 <ecp_get_type>
 800c592:	4603      	mov	r3, r0
 800c594:	2b01      	cmp	r3, #1
 800c596:	d105      	bne.n	800c5a4 <mbedtls_ecp_check_pubkey+0x50>
        return( ecp_check_pubkey_sw( grp, pt ) );
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff fde4 	bl	800c168 <ecp_check_pubkey_sw>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	e000      	b.n	800c5a6 <mbedtls_ecp_check_pubkey+0x52>
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800c5a4:	4b03      	ldr	r3, [pc, #12]	; (800c5b4 <mbedtls_ecp_check_pubkey+0x60>)
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	ffffb380 	.word	0xffffb380
 800c5b4:	ffffb080 	.word	0xffffb080

0800c5b8 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7fc ffaf 	bl	8009526 <ecp_get_type>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	d127      	bne.n	800c61e <mbedtls_ecp_check_privkey+0x66>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	6838      	ldr	r0, [r7, #0]
 800c5d2:	f7f8 fb52 	bl	8004c7a <mbedtls_mpi_get_bit>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10f      	bne.n	800c5fc <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 800c5dc:	2101      	movs	r1, #1
 800c5de:	6838      	ldr	r0, [r7, #0]
 800c5e0:	f7f8 fb4b 	bl	8004c7a <mbedtls_mpi_get_bit>
 800c5e4:	4603      	mov	r3, r0
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d108      	bne.n	800c5fc <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 800c5ea:	6838      	ldr	r0, [r7, #0]
 800c5ec:	f7f8 fc11 	bl	8004e12 <mbedtls_mpi_bitlen>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	1e5a      	subs	r2, r3, #1
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d001      	beq.n	800c600 <mbedtls_ecp_check_privkey+0x48>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800c5fc:	4b17      	ldr	r3, [pc, #92]	; (800c65c <mbedtls_ecp_check_privkey+0xa4>)
 800c5fe:	e029      	b.n	800c654 <mbedtls_ecp_check_privkey+0x9c>

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c604:	2bfe      	cmp	r3, #254	; 0xfe
 800c606:	d108      	bne.n	800c61a <mbedtls_ecp_check_privkey+0x62>
 800c608:	2102      	movs	r1, #2
 800c60a:	6838      	ldr	r0, [r7, #0]
 800c60c:	f7f8 fb35 	bl	8004c7a <mbedtls_mpi_get_bit>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800c616:	4b11      	ldr	r3, [pc, #68]	; (800c65c <mbedtls_ecp_check_privkey+0xa4>)
 800c618:	e01c      	b.n	800c654 <mbedtls_ecp_check_privkey+0x9c>

        return( 0 );
 800c61a:	2300      	movs	r3, #0
 800c61c:	e01a      	b.n	800c654 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7fc ff81 	bl	8009526 <ecp_get_type>
 800c624:	4603      	mov	r3, r0
 800c626:	2b01      	cmp	r3, #1
 800c628:	d113      	bne.n	800c652 <mbedtls_ecp_check_privkey+0x9a>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800c62a:	2101      	movs	r1, #1
 800c62c:	6838      	ldr	r0, [r7, #0]
 800c62e:	f7f9 f8ae 	bl	800578e <mbedtls_mpi_cmp_int>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	db08      	blt.n	800c64a <mbedtls_ecp_check_privkey+0x92>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	334c      	adds	r3, #76	; 0x4c
 800c63c:	4619      	mov	r1, r3
 800c63e:	6838      	ldr	r0, [r7, #0]
 800c640:	f7f9 f80a 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c644:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800c646:	2b00      	cmp	r3, #0
 800c648:	db01      	blt.n	800c64e <mbedtls_ecp_check_privkey+0x96>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800c64a:	4b04      	ldr	r3, [pc, #16]	; (800c65c <mbedtls_ecp_check_privkey+0xa4>)
 800c64c:	e002      	b.n	800c654 <mbedtls_ecp_check_privkey+0x9c>
        else
            return( 0 );
 800c64e:	2300      	movs	r3, #0
 800c650:	e000      	b.n	800c654 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800c652:	4b03      	ldr	r3, [pc, #12]	; (800c660 <mbedtls_ecp_check_privkey+0xa8>)
}
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	ffffb380 	.word	0xffffb380
 800c660:	ffffb080 	.word	0xffffb080

0800c664 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800c672:	4b55      	ldr	r3, [pc, #340]	; (800c7c8 <mbedtls_ecp_gen_privkey+0x164>)
 800c674:	61fb      	str	r3, [r7, #28]

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c67a:	3307      	adds	r3, #7
 800c67c:	08db      	lsrs	r3, r3, #3
 800c67e:	617b      	str	r3, [r7, #20]

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f7fc ff50 	bl	8009526 <ecp_get_type>
 800c686:	4603      	mov	r3, r0
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d151      	bne.n	800c730 <mbedtls_ecp_gen_privkey+0xcc>
    {
        /* [M225] page 5 */
        size_t b;

        do {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	6979      	ldr	r1, [r7, #20]
 800c692:	68b8      	ldr	r0, [r7, #8]
 800c694:	f7fb fc39 	bl	8007f0a <mbedtls_mpi_fill_random>
 800c698:	61f8      	str	r0, [r7, #28]
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d17f      	bne.n	800c7a0 <mbedtls_ecp_gen_privkey+0x13c>
        } while( mbedtls_mpi_bitlen( d ) == 0);
 800c6a0:	68b8      	ldr	r0, [r7, #8]
 800c6a2:	f7f8 fbb6 	bl	8004e12 <mbedtls_mpi_bitlen>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d0ef      	beq.n	800c68c <mbedtls_ecp_gen_privkey+0x28>

        /* Make sure the most significant bit is nbits */
        b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
 800c6ac:	68b8      	ldr	r0, [r7, #8]
 800c6ae:	f7f8 fbb0 	bl	8004e12 <mbedtls_mpi_bitlen>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	613b      	str	r3, [r7, #16]
        if( b > grp->nbits )
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d90c      	bls.n	800c6dc <mbedtls_ecp_gen_privkey+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68b8      	ldr	r0, [r7, #8]
 800c6ce:	f7f8 fea6 	bl	800541e <mbedtls_mpi_shift_r>
 800c6d2:	61f8      	str	r0, [r7, #28]
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00b      	beq.n	800c6f2 <mbedtls_ecp_gen_privkey+0x8e>
 800c6da:	e070      	b.n	800c7be <mbedtls_ecp_gen_privkey+0x15a>
        else
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	68b8      	ldr	r0, [r7, #8]
 800c6e6:	f7f8 fae9 	bl	8004cbc <mbedtls_mpi_set_bit>
 800c6ea:	61f8      	str	r0, [r7, #28]
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d158      	bne.n	800c7a4 <mbedtls_ecp_gen_privkey+0x140>

        /* Make sure the last two bits are unset for Curve448, three bits for
           Curve25519 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	68b8      	ldr	r0, [r7, #8]
 800c6f8:	f7f8 fae0 	bl	8004cbc <mbedtls_mpi_set_bit>
 800c6fc:	61f8      	str	r0, [r7, #28]
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d151      	bne.n	800c7a8 <mbedtls_ecp_gen_privkey+0x144>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 800c704:	2200      	movs	r2, #0
 800c706:	2101      	movs	r1, #1
 800c708:	68b8      	ldr	r0, [r7, #8]
 800c70a:	f7f8 fad7 	bl	8004cbc <mbedtls_mpi_set_bit>
 800c70e:	61f8      	str	r0, [r7, #28]
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d14a      	bne.n	800c7ac <mbedtls_ecp_gen_privkey+0x148>
        if( grp->nbits == 254 )
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c71a:	2bfe      	cmp	r3, #254	; 0xfe
 800c71c:	d108      	bne.n	800c730 <mbedtls_ecp_gen_privkey+0xcc>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
 800c71e:	2200      	movs	r2, #0
 800c720:	2102      	movs	r1, #2
 800c722:	68b8      	ldr	r0, [r7, #8]
 800c724:	f7f8 faca 	bl	8004cbc <mbedtls_mpi_set_bit>
 800c728:	61f8      	str	r0, [r7, #28]
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d13f      	bne.n	800c7b0 <mbedtls_ecp_gen_privkey+0x14c>
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f7fc fef8 	bl	8009526 <ecp_get_type>
 800c736:	4603      	mov	r3, r0
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d13b      	bne.n	800c7b4 <mbedtls_ecp_gen_privkey+0x150>
    {
        /* SEC1 3.2.1: Generate d such that 1 <= n < N */
        int count = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	61bb      	str	r3, [r7, #24]
         * - try until result is in the desired range.
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	6979      	ldr	r1, [r7, #20]
 800c746:	68b8      	ldr	r0, [r7, #8]
 800c748:	f7fb fbdf 	bl	8007f0a <mbedtls_mpi_fill_random>
 800c74c:	61f8      	str	r0, [r7, #28]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d131      	bne.n	800c7b8 <mbedtls_ecp_gen_privkey+0x154>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	00da      	lsls	r2, r3, #3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	4619      	mov	r1, r3
 800c760:	68b8      	ldr	r0, [r7, #8]
 800c762:	f7f8 fe5c 	bl	800541e <mbedtls_mpi_shift_r>
 800c766:	61f8      	str	r0, [r7, #28]
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d126      	bne.n	800c7bc <mbedtls_ecp_gen_privkey+0x158>
             *
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	3301      	adds	r3, #1
 800c772:	61bb      	str	r3, [r7, #24]
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	2b1e      	cmp	r3, #30
 800c778:	dd01      	ble.n	800c77e <mbedtls_ecp_gen_privkey+0x11a>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800c77a:	4b14      	ldr	r3, [pc, #80]	; (800c7cc <mbedtls_ecp_gen_privkey+0x168>)
 800c77c:	e020      	b.n	800c7c0 <mbedtls_ecp_gen_privkey+0x15c>
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800c77e:	2101      	movs	r1, #1
 800c780:	68b8      	ldr	r0, [r7, #8]
 800c782:	f7f9 f804 	bl	800578e <mbedtls_mpi_cmp_int>
 800c786:	4603      	mov	r3, r0
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 800c788:	2b00      	cmp	r3, #0
 800c78a:	dbd9      	blt.n	800c740 <mbedtls_ecp_gen_privkey+0xdc>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	334c      	adds	r3, #76	; 0x4c
 800c790:	4619      	mov	r1, r3
 800c792:	68b8      	ldr	r0, [r7, #8]
 800c794:	f7f8 ff60 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c798:	4603      	mov	r3, r0
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dad0      	bge.n	800c740 <mbedtls_ecp_gen_privkey+0xdc>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
 800c79e:	e009      	b.n	800c7b4 <mbedtls_ecp_gen_privkey+0x150>
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800c7a0:	bf00      	nop
 800c7a2:	e00c      	b.n	800c7be <mbedtls_ecp_gen_privkey+0x15a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
 800c7a4:	bf00      	nop
 800c7a6:	e00a      	b.n	800c7be <mbedtls_ecp_gen_privkey+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 800c7a8:	bf00      	nop
 800c7aa:	e008      	b.n	800c7be <mbedtls_ecp_gen_privkey+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 800c7ac:	bf00      	nop
 800c7ae:	e006      	b.n	800c7be <mbedtls_ecp_gen_privkey+0x15a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
 800c7b0:	bf00      	nop
 800c7b2:	e004      	b.n	800c7be <mbedtls_ecp_gen_privkey+0x15a>
cleanup:
 800c7b4:	bf00      	nop
 800c7b6:	e002      	b.n	800c7be <mbedtls_ecp_gen_privkey+0x15a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 800c7b8:	bf00      	nop
 800c7ba:	e000      	b.n	800c7be <mbedtls_ecp_gen_privkey+0x15a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 800c7bc:	bf00      	nop
    return( ret );
 800c7be:	69fb      	ldr	r3, [r7, #28]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3720      	adds	r7, #32
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	ffffb080 	.word	0xffffb080
 800c7cc:	ffffb300 	.word	0xffffb300

0800c7d0 <mbedtls_ecp_gen_keypair_base>:
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b088      	sub	sp, #32
 800c7d4:	af02      	add	r7, sp, #8
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
 800c7dc:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( G     != NULL );
    ECP_VALIDATE_RET( Q     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	6a3a      	ldr	r2, [r7, #32]
 800c7e2:	6879      	ldr	r1, [r7, #4]
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7ff ff3d 	bl	800c664 <mbedtls_ecp_gen_privkey>
 800c7ea:	6178      	str	r0, [r7, #20]
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10d      	bne.n	800c80e <mbedtls_ecp_gen_keypair_base+0x3e>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	9301      	str	r3, [sp, #4]
 800c7f6:	6a3b      	ldr	r3, [r7, #32]
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f7ff fc99 	bl	800c138 <mbedtls_ecp_mul>
 800c806:	6178      	str	r0, [r7, #20]
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	2b00      	cmp	r3, #0

cleanup:
 800c80c:	e000      	b.n	800c810 <mbedtls_ecp_gen_keypair_base+0x40>
    MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 800c80e:	bf00      	nop
    return( ret );
 800c810:	697b      	ldr	r3, [r7, #20]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3718      	adds	r7, #24
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <mbedtls_ecp_gen_keypair>:
 */
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
                             mbedtls_mpi *d, mbedtls_ecp_point *Q,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b086      	sub	sp, #24
 800c81e:	af02      	add	r7, sp, #8
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
 800c826:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( Q     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff ffc8 	bl	800c7d0 <mbedtls_ecp_gen_keypair_base>
 800c840:	4603      	mov	r3, r0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <mbedtls_ecp_gen_key>:
/*
 * Generate a keypair, prettier wrapper
 */
int mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b088      	sub	sp, #32
 800c84e:	af02      	add	r7, sp, #8
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	603b      	str	r3, [r7, #0]
 800c856:	4603      	mov	r3, r0
 800c858:	73fb      	strb	r3, [r7, #15]
    int ret;
    ECP_VALIDATE_RET( key   != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	7bfa      	ldrb	r2, [r7, #15]
 800c85e:	4611      	mov	r1, r2
 800c860:	4618      	mov	r0, r3
 800c862:	f000 f9ef 	bl	800cc44 <mbedtls_ecp_group_load>
 800c866:	6178      	str	r0, [r7, #20]
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <mbedtls_ecp_gen_key+0x28>
        return( ret );
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	e00c      	b.n	800c88c <mbedtls_ecp_gen_key+0x42>

    return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );
 800c872:	68b8      	ldr	r0, [r7, #8]
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f7ff ffc8 	bl	800c81a <mbedtls_ecp_gen_keypair>
 800c88a:	4603      	mov	r3, r0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3718      	adds	r7, #24
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 800c894:	b590      	push	{r4, r7, lr}
 800c896:	b0af      	sub	sp, #188	; 0xbc
 800c898:	af02      	add	r7, sp, #8
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d029      	beq.n	800c8fa <mbedtls_ecp_check_pub_priv+0x66>
        pub->grp.id != prv->grp.id ||
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	781a      	ldrb	r2, [r3, #0]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d123      	bne.n	800c8fa <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	3388      	adds	r3, #136	; 0x88
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4610      	mov	r0, r2
 800c8c0:	f7f8 feca 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c8c4:	4603      	mov	r3, r0
        pub->grp.id != prv->grp.id ||
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d117      	bne.n	800c8fa <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	3394      	adds	r3, #148	; 0x94
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	f7f8 febe 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c8dc:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10b      	bne.n	800c8fa <mbedtls_ecp_check_pub_priv+0x66>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	33a0      	adds	r3, #160	; 0xa0
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	f7f8 feb2 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c8f4:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <mbedtls_ecp_check_pub_priv+0x6a>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800c8fa:	4b32      	ldr	r3, [pc, #200]	; (800c9c4 <mbedtls_ecp_check_pub_priv+0x130>)
 800c8fc:	e05e      	b.n	800c9bc <mbedtls_ecp_check_pub_priv+0x128>
    }

    mbedtls_ecp_point_init( &Q );
 800c8fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c902:	4618      	mov	r0, r3
 800c904:	f7fc fe26 	bl	8009554 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
 800c908:	f107 030c 	add.w	r3, r7, #12
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fc fe37 	bl	8009580 <mbedtls_ecp_group_init>

    /* mbedtls_ecp_mul() needs a non-const group... */
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	f107 030c 	add.w	r3, r7, #12
 800c918:	4611      	mov	r1, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fc ff36 	bl	800978c <mbedtls_ecp_group_copy>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	3328      	adds	r3, #40	; 0x28
 800c92a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800c92e:	f107 000c 	add.w	r0, r7, #12
 800c932:	2400      	movs	r4, #0
 800c934:	9401      	str	r4, [sp, #4]
 800c936:	2400      	movs	r4, #0
 800c938:	9400      	str	r4, [sp, #0]
 800c93a:	f7ff fbfd 	bl	800c138 <mbedtls_ecp_mul>
 800c93e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 800c942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c946:	2b00      	cmp	r3, #0
 800c948:	d129      	bne.n	800c99e <mbedtls_ecp_check_pub_priv+0x10a>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800c950:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c954:	4611      	mov	r1, r2
 800c956:	4618      	mov	r0, r3
 800c958:	f7f8 fe7e 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d119      	bne.n	800c996 <mbedtls_ecp_check_pub_priv+0x102>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800c968:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c96c:	330c      	adds	r3, #12
 800c96e:	4611      	mov	r1, r2
 800c970:	4618      	mov	r0, r3
 800c972:	f7f8 fe71 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c976:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10c      	bne.n	800c996 <mbedtls_ecp_check_pub_priv+0x102>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800c982:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c986:	3318      	adds	r3, #24
 800c988:	4611      	mov	r1, r2
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7f8 fe64 	bl	8005658 <mbedtls_mpi_cmp_mpi>
 800c990:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 800c992:	2b00      	cmp	r3, #0
 800c994:	d005      	beq.n	800c9a2 <mbedtls_ecp_check_pub_priv+0x10e>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800c996:	4b0b      	ldr	r3, [pc, #44]	; (800c9c4 <mbedtls_ecp_check_pub_priv+0x130>)
 800c998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        goto cleanup;
 800c99c:	e002      	b.n	800c9a4 <mbedtls_ecp_check_pub_priv+0x110>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 800c99e:	bf00      	nop
 800c9a0:	e000      	b.n	800c9a4 <mbedtls_ecp_check_pub_priv+0x110>
    }

cleanup:
 800c9a2:	bf00      	nop
    mbedtls_ecp_point_free( &Q );
 800c9a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fc fe3e 	bl	800962a <mbedtls_ecp_point_free>
    mbedtls_ecp_group_free( &grp );
 800c9ae:	f107 030c 	add.w	r3, r7, #12
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fc fe53 	bl	800965e <mbedtls_ecp_group_free>

    return( ret );
 800c9b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	37b4      	adds	r7, #180	; 0xb4
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd90      	pop	{r4, r7, pc}
 800c9c4:	ffffb080 	.word	0xffffb080

0800c9c8 <ecp_mpi_load>:
/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
    X->s = 1;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]
    X->n = len / sizeof( mbedtls_mpi_uint );
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	089a      	lsrs	r2, r3, #2
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	605a      	str	r2, [r3, #4]
    X->p = (mbedtls_mpi_uint *) p;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	609a      	str	r2, [r3, #8]
}
 800c9e8:	bf00      	nop
 800c9ea:	3714      	adds	r7, #20
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <ecp_mpi_set1>:

/*
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	601a      	str	r2, [r3, #0]
    X->n = 1;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	605a      	str	r2, [r3, #4]
    X->p = one;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a04      	ldr	r2, [pc, #16]	; (800ca1c <ecp_mpi_set1+0x28>)
 800ca0c:	609a      	str	r2, [r3, #8]
}
 800ca0e:	bf00      	nop
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	2000000c 	.word	0x2000000c

0800ca20 <ecp_group_load>:
                           const mbedtls_mpi_uint *a,  size_t alen,
                           const mbedtls_mpi_uint *b,  size_t blen,
                           const mbedtls_mpi_uint *gx, size_t gxlen,
                           const mbedtls_mpi_uint *gy, size_t gylen,
                           const mbedtls_mpi_uint *n,  size_t nlen)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	603b      	str	r3, [r7, #0]
    ecp_mpi_load( &grp->P, p, plen );
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3304      	adds	r3, #4
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	68b9      	ldr	r1, [r7, #8]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff ffc6 	bl	800c9c8 <ecp_mpi_load>
    if( a != NULL )
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d006      	beq.n	800ca50 <ecp_group_load+0x30>
        ecp_mpi_load( &grp->A, a, alen );
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3310      	adds	r3, #16
 800ca46:	69ba      	ldr	r2, [r7, #24]
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7ff ffbc 	bl	800c9c8 <ecp_mpi_load>
    ecp_mpi_load( &grp->B, b, blen );
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	331c      	adds	r3, #28
 800ca54:	6a3a      	ldr	r2, [r7, #32]
 800ca56:	69f9      	ldr	r1, [r7, #28]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7ff ffb5 	bl	800c9c8 <ecp_mpi_load>
    ecp_mpi_load( &grp->N, n, nlen );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	334c      	adds	r3, #76	; 0x4c
 800ca62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7ff ffae 	bl	800c9c8 <ecp_mpi_load>

    ecp_mpi_load( &grp->G.X, gx, gxlen );
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3328      	adds	r3, #40	; 0x28
 800ca70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff ffa7 	bl	800c9c8 <ecp_mpi_load>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3334      	adds	r3, #52	; 0x34
 800ca7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff ffa0 	bl	800c9c8 <ecp_mpi_load>
    ecp_mpi_set1( &grp->G.Z );
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	3340      	adds	r3, #64	; 0x40
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7ff ffb1 	bl	800c9f4 <ecp_mpi_set1>

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7f8 f9bb 	bl	8004e12 <mbedtls_mpi_bitlen>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	659a      	str	r2, [r3, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	334c      	adds	r3, #76	; 0x4c
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f8 f9b3 	bl	8004e12 <mbedtls_mpi_bitlen>
 800caac:	4602      	mov	r2, r0
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	65da      	str	r2, [r3, #92]	; 0x5c

    grp->h = 1;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	661a      	str	r2, [r3, #96]	; 0x60

    return( 0 );
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <ecp_use_curve448>:
#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
/*
 * Specialized function for creating the Curve448 group
 */
static int ecp_use_curve448( mbedtls_ecp_group *grp )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b086      	sub	sp, #24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    mbedtls_mpi Ns;
    int ret;

    mbedtls_mpi_init( &Ns );
 800cacc:	f107 0308 	add.w	r3, r7, #8
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7f7 fe5f 	bl	8004794 <mbedtls_mpi_init>

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	3310      	adds	r3, #16
 800cada:	4a58      	ldr	r2, [pc, #352]	; (800cc3c <ecp_use_curve448+0x178>)
 800cadc:	2110      	movs	r1, #16
 800cade:	4618      	mov	r0, r3
 800cae0:	f7f8 fa13 	bl	8004f0a <mbedtls_mpi_read_string>
 800cae4:	6178      	str	r0, [r7, #20]
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f040 8081 	bne.w	800cbf0 <ecp_use_curve448+0x12c>

    /* P = 2^448 - 2^224 - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3304      	adds	r3, #4
 800caf2:	2101      	movs	r1, #1
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7f8 f892 	bl	8004c1e <mbedtls_mpi_lset>
 800cafa:	6178      	str	r0, [r7, #20]
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d178      	bne.n	800cbf4 <ecp_use_curve448+0x130>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	3304      	adds	r3, #4
 800cb06:	21e0      	movs	r1, #224	; 0xe0
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f8 fbe3 	bl	80052d4 <mbedtls_mpi_shift_l>
 800cb0e:	6178      	str	r0, [r7, #20]
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d170      	bne.n	800cbf8 <ecp_use_curve448+0x134>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	1d18      	adds	r0, r3, #4
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	2201      	movs	r2, #1
 800cb20:	4619      	mov	r1, r3
 800cb22:	f7f9 f880 	bl	8005c26 <mbedtls_mpi_sub_int>
 800cb26:	6178      	str	r0, [r7, #20]
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d166      	bne.n	800cbfc <ecp_use_curve448+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3304      	adds	r3, #4
 800cb32:	21e0      	movs	r1, #224	; 0xe0
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7f8 fbcd 	bl	80052d4 <mbedtls_mpi_shift_l>
 800cb3a:	6178      	str	r0, [r7, #20]
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d15e      	bne.n	800cc00 <ecp_use_curve448+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	1d18      	adds	r0, r3, #4
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	3304      	adds	r3, #4
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	f7f9 f86a 	bl	8005c26 <mbedtls_mpi_sub_int>
 800cb52:	6178      	str	r0, [r7, #20]
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d154      	bne.n	800cc04 <ecp_use_curve448+0x140>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f8 f957 	bl	8004e12 <mbedtls_mpi_bitlen>
 800cb64:	4602      	mov	r2, r0
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	659a      	str	r2, [r3, #88]	; 0x58

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3328      	adds	r3, #40	; 0x28
 800cb6e:	2105      	movs	r1, #5
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7f8 f854 	bl	8004c1e <mbedtls_mpi_lset>
 800cb76:	6178      	str	r0, [r7, #20]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d144      	bne.n	800cc08 <ecp_use_curve448+0x144>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3340      	adds	r3, #64	; 0x40
 800cb82:	2101      	movs	r1, #1
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f8 f84a 	bl	8004c1e <mbedtls_mpi_lset>
 800cb8a:	6178      	str	r0, [r7, #20]
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d13c      	bne.n	800cc0c <ecp_use_curve448+0x148>
    mbedtls_mpi_free( &grp->G.Y );
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	3334      	adds	r3, #52	; 0x34
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7f7 fe0f 	bl	80047ba <mbedtls_mpi_free>

    /* N = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	334c      	adds	r3, #76	; 0x4c
 800cba0:	2201      	movs	r2, #1
 800cba2:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f8 f888 	bl	8004cbc <mbedtls_mpi_set_bit>
 800cbac:	6178      	str	r0, [r7, #20]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d12d      	bne.n	800cc10 <ecp_use_curve448+0x14c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 800cbb4:	f107 0308 	add.w	r3, r7, #8
 800cbb8:	4a21      	ldr	r2, [pc, #132]	; (800cc40 <ecp_use_curve448+0x17c>)
 800cbba:	2110      	movs	r1, #16
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7f8 f9a4 	bl	8004f0a <mbedtls_mpi_read_string>
 800cbc2:	6178      	str	r0, [r7, #20]
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d124      	bne.n	800cc14 <ecp_use_curve448+0x150>
                                              "8335DC163BB124B65129C96FDE933D8D723A70AADC873D6D54A7BB0D" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	334c      	adds	r3, #76	; 0x4c
 800cbd4:	f107 0208 	add.w	r2, r7, #8
 800cbd8:	4619      	mov	r1, r3
 800cbda:	f7f8 ffb6 	bl	8005b4a <mbedtls_mpi_sub_mpi>
 800cbde:	6178      	str	r0, [r7, #20]
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d118      	bne.n	800cc18 <ecp_use_curve448+0x154>

    /* Actually, the required msb for private keys */
    grp->nbits = 447;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f240 12bf 	movw	r2, #447	; 0x1bf
 800cbec:	65da      	str	r2, [r3, #92]	; 0x5c
 800cbee:	e014      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 800cbf0:	bf00      	nop
 800cbf2:	e012      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 800cbf4:	bf00      	nop
 800cbf6:	e010      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800cbf8:	bf00      	nop
 800cbfa:	e00e      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800cbfc:	bf00      	nop
 800cbfe:	e00c      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 800cc00:	bf00      	nop
 800cc02:	e00a      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 800cc04:	bf00      	nop
 800cc06:	e008      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 800cc08:	bf00      	nop
 800cc0a:	e006      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 800cc0c:	bf00      	nop
 800cc0e:	e004      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 800cc10:	bf00      	nop
 800cc12:	e002      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 800cc14:	bf00      	nop
 800cc16:	e000      	b.n	800cc1a <ecp_use_curve448+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 800cc18:	bf00      	nop

cleanup:
    mbedtls_mpi_free( &Ns );
 800cc1a:	f107 0308 	add.w	r3, r7, #8
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7f7 fdcb 	bl	80047ba <mbedtls_mpi_free>
    if( ret != 0 )
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d002      	beq.n	800cc30 <ecp_use_curve448+0x16c>
        mbedtls_ecp_group_free( grp );
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7fc fd17 	bl	800965e <mbedtls_ecp_group_free>

    return( ret );
 800cc30:	697b      	ldr	r3, [r7, #20]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	08012894 	.word	0x08012894
 800cc40:	0801289c 	.word	0x0801289c

0800cc44 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08c      	sub	sp, #48	; 0x30
 800cc48:	af0a      	add	r7, sp, #40	; 0x28
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	70fb      	strb	r3, [r7, #3]
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7fc fd04 	bl	800965e <mbedtls_ecp_group_free>

    grp->id = id;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	78fa      	ldrb	r2, [r7, #3]
 800cc5a:	701a      	strb	r2, [r3, #0]

    switch( id )
 800cc5c:	78fb      	ldrb	r3, [r7, #3]
 800cc5e:	2b0d      	cmp	r3, #13
 800cc60:	d040      	beq.n	800cce4 <mbedtls_ecp_group_load+0xa0>
 800cc62:	2b0d      	cmp	r3, #13
 800cc64:	dc46      	bgt.n	800ccf4 <mbedtls_ecp_group_load+0xb0>
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d002      	beq.n	800cc70 <mbedtls_ecp_group_load+0x2c>
 800cc6a:	2b04      	cmp	r3, #4
 800cc6c:	d01d      	beq.n	800ccaa <mbedtls_ecp_group_load+0x66>
 800cc6e:	e041      	b.n	800ccf4 <mbedtls_ecp_group_load+0xb0>
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a24      	ldr	r2, [pc, #144]	; (800cd04 <mbedtls_ecp_group_load+0xc0>)
 800cc74:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp256r1 ) );
 800cc76:	2320      	movs	r3, #32
 800cc78:	9308      	str	r3, [sp, #32]
 800cc7a:	4b23      	ldr	r3, [pc, #140]	; (800cd08 <mbedtls_ecp_group_load+0xc4>)
 800cc7c:	9307      	str	r3, [sp, #28]
 800cc7e:	2320      	movs	r3, #32
 800cc80:	9306      	str	r3, [sp, #24]
 800cc82:	4b22      	ldr	r3, [pc, #136]	; (800cd0c <mbedtls_ecp_group_load+0xc8>)
 800cc84:	9305      	str	r3, [sp, #20]
 800cc86:	2320      	movs	r3, #32
 800cc88:	9304      	str	r3, [sp, #16]
 800cc8a:	4b21      	ldr	r3, [pc, #132]	; (800cd10 <mbedtls_ecp_group_load+0xcc>)
 800cc8c:	9303      	str	r3, [sp, #12]
 800cc8e:	2320      	movs	r3, #32
 800cc90:	9302      	str	r3, [sp, #8]
 800cc92:	4b20      	ldr	r3, [pc, #128]	; (800cd14 <mbedtls_ecp_group_load+0xd0>)
 800cc94:	9301      	str	r3, [sp, #4]
 800cc96:	2300      	movs	r3, #0
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	491e      	ldr	r1, [pc, #120]	; (800cd18 <mbedtls_ecp_group_load+0xd4>)
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7ff febd 	bl	800ca20 <ecp_group_load>
 800cca6:	4603      	mov	r3, r0
 800cca8:	e028      	b.n	800ccfc <mbedtls_ecp_group_load+0xb8>
#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP384R1:
            NIST_MODP( p384 );
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a1b      	ldr	r2, [pc, #108]	; (800cd1c <mbedtls_ecp_group_load+0xd8>)
 800ccae:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp384r1 ) );
 800ccb0:	2330      	movs	r3, #48	; 0x30
 800ccb2:	9308      	str	r3, [sp, #32]
 800ccb4:	4b1a      	ldr	r3, [pc, #104]	; (800cd20 <mbedtls_ecp_group_load+0xdc>)
 800ccb6:	9307      	str	r3, [sp, #28]
 800ccb8:	2330      	movs	r3, #48	; 0x30
 800ccba:	9306      	str	r3, [sp, #24]
 800ccbc:	4b19      	ldr	r3, [pc, #100]	; (800cd24 <mbedtls_ecp_group_load+0xe0>)
 800ccbe:	9305      	str	r3, [sp, #20]
 800ccc0:	2330      	movs	r3, #48	; 0x30
 800ccc2:	9304      	str	r3, [sp, #16]
 800ccc4:	4b18      	ldr	r3, [pc, #96]	; (800cd28 <mbedtls_ecp_group_load+0xe4>)
 800ccc6:	9303      	str	r3, [sp, #12]
 800ccc8:	2330      	movs	r3, #48	; 0x30
 800ccca:	9302      	str	r3, [sp, #8]
 800cccc:	4b17      	ldr	r3, [pc, #92]	; (800cd2c <mbedtls_ecp_group_load+0xe8>)
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	9300      	str	r3, [sp, #0]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	2230      	movs	r2, #48	; 0x30
 800ccd8:	4915      	ldr	r1, [pc, #84]	; (800cd30 <mbedtls_ecp_group_load+0xec>)
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff fea0 	bl	800ca20 <ecp_group_load>
 800cce0:	4603      	mov	r3, r0
 800cce2:	e00b      	b.n	800ccfc <mbedtls_ecp_group_load+0xb8>
            return( ecp_use_curve25519( grp ) );
#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
        case MBEDTLS_ECP_DP_CURVE448:
            grp->modp = ecp_mod_p448;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a13      	ldr	r2, [pc, #76]	; (800cd34 <mbedtls_ecp_group_load+0xf0>)
 800cce8:	665a      	str	r2, [r3, #100]	; 0x64
            return( ecp_use_curve448( grp ) );
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff feea 	bl	800cac4 <ecp_use_curve448>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	e003      	b.n	800ccfc <mbedtls_ecp_group_load+0xb8>
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7fc fcb2 	bl	800965e <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <mbedtls_ecp_group_load+0xf4>)
    }
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	0800ce1d 	.word	0x0800ce1d
 800cd08:	08014bb4 	.word	0x08014bb4
 800cd0c:	08014b94 	.word	0x08014b94
 800cd10:	08014b74 	.word	0x08014b74
 800cd14:	08014b54 	.word	0x08014b54
 800cd18:	08014b34 	.word	0x08014b34
 800cd1c:	0800d657 	.word	0x0800d657
 800cd20:	08014c94 	.word	0x08014c94
 800cd24:	08014c64 	.word	0x08014c64
 800cd28:	08014c34 	.word	0x08014c34
 800cd2c:	08014c04 	.word	0x08014c04
 800cd30:	08014bd4 	.word	0x08014bd4
 800cd34:	0800e10d 	.word	0x0800e10d
 800cd38:	ffffb180 	.word	0xffffb180

0800cd3c <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
    *dst += src;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	441a      	add	r2, r3
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	601a      	str	r2, [r3, #0]
    *carry += ( *dst < src );
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f993 3000 	ldrsb.w	r3, [r3]
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	6812      	ldr	r2, [r2, #0]
 800cd60:	68b9      	ldr	r1, [r7, #8]
 800cd62:	4291      	cmp	r1, r2
 800cd64:	bf8c      	ite	hi
 800cd66:	2201      	movhi	r2, #1
 800cd68:	2200      	movls	r2, #0
 800cd6a:	b2d2      	uxtb	r2, r2
 800cd6c:	4413      	add	r3, r2
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	b25a      	sxtb	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	701a      	strb	r2, [r3, #0]
}
 800cd76:	bf00      	nop
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
 800cd82:	b480      	push	{r7}
 800cd84:	b085      	sub	sp, #20
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	60f8      	str	r0, [r7, #12]
 800cd8a:	60b9      	str	r1, [r7, #8]
 800cd8c:	607a      	str	r2, [r7, #4]
    *carry -= ( *dst < src );
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f993 3000 	ldrsb.w	r3, [r3]
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	6812      	ldr	r2, [r2, #0]
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	4291      	cmp	r1, r2
 800cd9e:	bf8c      	ite	hi
 800cda0:	2201      	movhi	r2, #1
 800cda2:	2200      	movls	r2, #0
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	1a9b      	subs	r3, r3, r2
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	b25a      	sxtb	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	701a      	strb	r2, [r3, #0]
    *dst -= src;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	1ad2      	subs	r2, r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	601a      	str	r2, [r3, #0]
}
 800cdbc:	bf00      	nop
 800cdbe:	3714      	adds	r7, #20
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <fix_negative>:
/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	607a      	str	r2, [r7, #4]
 800cdd2:	603b      	str	r3, [r7, #0]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	72fb      	strb	r3, [r7, #11]
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 800cdd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cddc:	4259      	negs	r1, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	689a      	ldr	r2, [r3, #8]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cdea:	3b01      	subs	r3, #1
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4413      	add	r3, r2
 800cdf0:	460a      	mov	r2, r1
 800cdf2:	601a      	str	r2, [r3, #0]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f7f8 fdf8 	bl	80059ee <mbedtls_mpi_sub_abs>
 800cdfe:	6178      	str	r0, [r7, #20]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d104      	bne.n	800ce10 <fix_negative+0x48>
    N->s = -1;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0c:	601a      	str	r2, [r3, #0]
 800ce0e:	e000      	b.n	800ce12 <fix_negative+0x4a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 800ce10:	bf00      	nop

cleanup:

    return( ret );
 800ce12:	697b      	ldr	r3, [r7, #20]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3718      	adds	r7, #24
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b094      	sub	sp, #80	; 0x50
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
    INIT( 256 );
 800ce24:	2300      	movs	r3, #0
 800ce26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce32:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce34:	2301      	movs	r3, #1
 800ce36:	633b      	str	r3, [r7, #48]	; 0x30
 800ce38:	2309      	movs	r3, #9
 800ce3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce3c:	f107 030c 	add.w	r3, r7, #12
 800ce40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce44:	009a      	lsls	r2, r3, #2
 800ce46:	f107 030c 	add.w	r3, r7, #12
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f004 fd0f 	bl	8011870 <memset>
 800ce52:	2110      	movs	r1, #16
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7f7 fcd6 	bl	8004806 <mbedtls_mpi_grow>
 800ce5a:	6478      	str	r0, [r7, #68]	; 0x44
 800ce5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f040 83f1 	bne.w	800d646 <ecp_mod_p256+0x82a>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	689a      	ldr	r2, [r3, #8]
 800ce68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	63fb      	str	r3, [r7, #60]	; 0x3c

    ADD(  8 ); ADD(  9 );
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	3320      	adds	r3, #32
 800ce78:	6819      	ldr	r1, [r3, #0]
 800ce7a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800ce7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7ff ff5a 	bl	800cd3c <add32>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	3324      	adds	r3, #36	; 0x24
 800ce8e:	6819      	ldr	r1, [r3, #0]
 800ce90:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800ce94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff ff4f 	bl	800cd3c <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	332c      	adds	r3, #44	; 0x2c
 800cea4:	6819      	ldr	r1, [r3, #0]
 800cea6:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800ceaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff ff67 	bl	800cd82 <sub32>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	3330      	adds	r3, #48	; 0x30
 800ceba:	6819      	ldr	r1, [r3, #0]
 800cebc:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff ff5c 	bl	800cd82 <sub32>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	3334      	adds	r3, #52	; 0x34
 800ced0:	6819      	ldr	r1, [r3, #0]
 800ced2:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800ced6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff ff51 	bl	800cd82 <sub32>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	3338      	adds	r3, #56	; 0x38
 800cee6:	6819      	ldr	r1, [r3, #0]
 800cee8:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800ceec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff ff46 	bl	800cd82 <sub32>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	689a      	ldr	r2, [r3, #8]
 800cefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf06:	3301      	adds	r3, #1
 800cf08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	689a      	ldr	r2, [r3, #8]
 800cf0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	4413      	add	r3, r2
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf18:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800cf1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf20:	2300      	movs	r3, #0
 800cf22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf26:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	da0b      	bge.n	800cf46 <ecp_mod_p256+0x12a>
 800cf2e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800cf32:	425b      	negs	r3, r3
 800cf34:	4619      	mov	r1, r3
 800cf36:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cf3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff ff1f 	bl	800cd82 <sub32>
 800cf44:	e008      	b.n	800cf58 <ecp_mod_p256+0x13c>
 800cf46:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800cf4a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cf4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff fef2 	bl	800cd3c <add32>

    ADD(  9 ); ADD( 10 );
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	3324      	adds	r3, #36	; 0x24
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cf64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7ff fee7 	bl	800cd3c <add32>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	3328      	adds	r3, #40	; 0x28
 800cf74:	6819      	ldr	r1, [r3, #0]
 800cf76:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cf7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7ff fedc 	bl	800cd3c <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	3330      	adds	r3, #48	; 0x30
 800cf8a:	6819      	ldr	r1, [r3, #0]
 800cf8c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cf90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff fef4 	bl	800cd82 <sub32>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	3334      	adds	r3, #52	; 0x34
 800cfa0:	6819      	ldr	r1, [r3, #0]
 800cfa2:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cfa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff fee9 	bl	800cd82 <sub32>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	3338      	adds	r3, #56	; 0x38
 800cfb6:	6819      	ldr	r1, [r3, #0]
 800cfb8:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cfbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7ff fede 	bl	800cd82 <sub32>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	333c      	adds	r3, #60	; 0x3c
 800cfcc:	6819      	ldr	r1, [r3, #0]
 800cfce:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800cfd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7ff fed3 	bl	800cd82 <sub32>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	689a      	ldr	r2, [r3, #8]
 800cfe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfe8:	601a      	str	r2, [r3, #0]
 800cfea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfec:	3301      	adds	r3, #1
 800cfee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	689a      	ldr	r2, [r3, #8]
 800cff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cffe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d006:	2300      	movs	r3, #0
 800d008:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d00c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d010:	2b00      	cmp	r3, #0
 800d012:	da0b      	bge.n	800d02c <ecp_mod_p256+0x210>
 800d014:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d018:	425b      	negs	r3, r3
 800d01a:	4619      	mov	r1, r3
 800d01c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d020:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d024:	4618      	mov	r0, r3
 800d026:	f7ff feac 	bl	800cd82 <sub32>
 800d02a:	e008      	b.n	800d03e <ecp_mod_p256+0x222>
 800d02c:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d030:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d034:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d038:	4618      	mov	r0, r3
 800d03a:	f7ff fe7f 	bl	800cd3c <add32>

    ADD( 10 ); ADD( 11 );
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	3328      	adds	r3, #40	; 0x28
 800d044:	6819      	ldr	r1, [r3, #0]
 800d046:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d04a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fe74 	bl	800cd3c <add32>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	332c      	adds	r3, #44	; 0x2c
 800d05a:	6819      	ldr	r1, [r3, #0]
 800d05c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d064:	4618      	mov	r0, r3
 800d066:	f7ff fe69 	bl	800cd3c <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	3334      	adds	r3, #52	; 0x34
 800d070:	6819      	ldr	r1, [r3, #0]
 800d072:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d076:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7ff fe81 	bl	800cd82 <sub32>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	3338      	adds	r3, #56	; 0x38
 800d086:	6819      	ldr	r1, [r3, #0]
 800d088:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d08c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d090:	4618      	mov	r0, r3
 800d092:	f7ff fe76 	bl	800cd82 <sub32>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	333c      	adds	r3, #60	; 0x3c
 800d09c:	6819      	ldr	r1, [r3, #0]
 800d09e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d0a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff fe6b 	bl	800cd82 <sub32>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	689a      	ldr	r2, [r3, #8]
 800d0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0b8:	601a      	str	r2, [r3, #0]
 800d0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0bc:	3301      	adds	r3, #1
 800d0be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4413      	add	r3, r2
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d0dc:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	da0b      	bge.n	800d0fc <ecp_mod_p256+0x2e0>
 800d0e4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d0e8:	425b      	negs	r3, r3
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d0f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7ff fe44 	bl	800cd82 <sub32>
 800d0fa:	e008      	b.n	800d10e <ecp_mod_p256+0x2f2>
 800d0fc:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d100:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d104:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff fe17 	bl	800cd3c <add32>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	332c      	adds	r3, #44	; 0x2c
 800d114:	6819      	ldr	r1, [r3, #0]
 800d116:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d11a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff fe0c 	bl	800cd3c <add32>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	332c      	adds	r3, #44	; 0x2c
 800d12a:	6819      	ldr	r1, [r3, #0]
 800d12c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d130:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff fe01 	bl	800cd3c <add32>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	3330      	adds	r3, #48	; 0x30
 800d140:	6819      	ldr	r1, [r3, #0]
 800d142:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d146:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7ff fdf6 	bl	800cd3c <add32>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	3330      	adds	r3, #48	; 0x30
 800d156:	6819      	ldr	r1, [r3, #0]
 800d158:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d15c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff fdeb 	bl	800cd3c <add32>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	3334      	adds	r3, #52	; 0x34
 800d16c:	6819      	ldr	r1, [r3, #0]
 800d16e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d176:	4618      	mov	r0, r3
 800d178:	f7ff fde0 	bl	800cd3c <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	333c      	adds	r3, #60	; 0x3c
 800d182:	6819      	ldr	r1, [r3, #0]
 800d184:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d188:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7ff fdf8 	bl	800cd82 <sub32>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	3320      	adds	r3, #32
 800d198:	6819      	ldr	r1, [r3, #0]
 800d19a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d19e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff fded 	bl	800cd82 <sub32>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	3324      	adds	r3, #36	; 0x24
 800d1ae:	6819      	ldr	r1, [r3, #0]
 800d1b0:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d1b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7ff fde2 	bl	800cd82 <sub32>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	689a      	ldr	r2, [r3, #8]
 800d1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	689a      	ldr	r2, [r3, #8]
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d1e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d1ee:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	da0b      	bge.n	800d20e <ecp_mod_p256+0x3f2>
 800d1f6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d1fa:	425b      	negs	r3, r3
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d202:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff fdbb 	bl	800cd82 <sub32>
 800d20c:	e008      	b.n	800d220 <ecp_mod_p256+0x404>
 800d20e:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d212:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d216:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7ff fd8e 	bl	800cd3c <add32>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	3330      	adds	r3, #48	; 0x30
 800d226:	6819      	ldr	r1, [r3, #0]
 800d228:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d22c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d230:	4618      	mov	r0, r3
 800d232:	f7ff fd83 	bl	800cd3c <add32>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	3330      	adds	r3, #48	; 0x30
 800d23c:	6819      	ldr	r1, [r3, #0]
 800d23e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d242:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d246:	4618      	mov	r0, r3
 800d248:	f7ff fd78 	bl	800cd3c <add32>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	3334      	adds	r3, #52	; 0x34
 800d252:	6819      	ldr	r1, [r3, #0]
 800d254:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d258:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff fd6d 	bl	800cd3c <add32>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	3334      	adds	r3, #52	; 0x34
 800d268:	6819      	ldr	r1, [r3, #0]
 800d26a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d26e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff fd62 	bl	800cd3c <add32>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	3338      	adds	r3, #56	; 0x38
 800d27e:	6819      	ldr	r1, [r3, #0]
 800d280:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d284:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d288:	4618      	mov	r0, r3
 800d28a:	f7ff fd57 	bl	800cd3c <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	3324      	adds	r3, #36	; 0x24
 800d294:	6819      	ldr	r1, [r3, #0]
 800d296:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d29a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff fd6f 	bl	800cd82 <sub32>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	3328      	adds	r3, #40	; 0x28
 800d2aa:	6819      	ldr	r1, [r3, #0]
 800d2ac:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d2b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fd64 	bl	800cd82 <sub32>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689a      	ldr	r2, [r3, #8]
 800d2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2c6:	601a      	str	r2, [r3, #0]
 800d2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	689a      	ldr	r2, [r3, #8]
 800d2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	4413      	add	r3, r2
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d2e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d2ea:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	da0b      	bge.n	800d30a <ecp_mod_p256+0x4ee>
 800d2f2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d2f6:	425b      	negs	r3, r3
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d2fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff fd3d 	bl	800cd82 <sub32>
 800d308:	e008      	b.n	800d31c <ecp_mod_p256+0x500>
 800d30a:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d30e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d312:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff fd10 	bl	800cd3c <add32>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	3334      	adds	r3, #52	; 0x34
 800d322:	6819      	ldr	r1, [r3, #0]
 800d324:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d328:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff fd05 	bl	800cd3c <add32>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	3334      	adds	r3, #52	; 0x34
 800d338:	6819      	ldr	r1, [r3, #0]
 800d33a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d33e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff fcfa 	bl	800cd3c <add32>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	3338      	adds	r3, #56	; 0x38
 800d34e:	6819      	ldr	r1, [r3, #0]
 800d350:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff fcef 	bl	800cd3c <add32>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	3338      	adds	r3, #56	; 0x38
 800d364:	6819      	ldr	r1, [r3, #0]
 800d366:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d36a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d36e:	4618      	mov	r0, r3
 800d370:	f7ff fce4 	bl	800cd3c <add32>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	333c      	adds	r3, #60	; 0x3c
 800d37a:	6819      	ldr	r1, [r3, #0]
 800d37c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d380:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d384:	4618      	mov	r0, r3
 800d386:	f7ff fcd9 	bl	800cd3c <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	3328      	adds	r3, #40	; 0x28
 800d390:	6819      	ldr	r1, [r3, #0]
 800d392:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d396:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff fcf1 	bl	800cd82 <sub32>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	332c      	adds	r3, #44	; 0x2c
 800d3a6:	6819      	ldr	r1, [r3, #0]
 800d3a8:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d3ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff fce6 	bl	800cd82 <sub32>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689a      	ldr	r2, [r3, #8]
 800d3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689a      	ldr	r2, [r3, #8]
 800d3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4413      	add	r3, r2
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d3dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d3e6:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	da0b      	bge.n	800d406 <ecp_mod_p256+0x5ea>
 800d3ee:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d3f2:	425b      	negs	r3, r3
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d3fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fcbf 	bl	800cd82 <sub32>
 800d404:	e008      	b.n	800d418 <ecp_mod_p256+0x5fc>
 800d406:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d40a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d40e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d412:	4618      	mov	r0, r3
 800d414:	f7ff fc92 	bl	800cd3c <add32>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	3338      	adds	r3, #56	; 0x38
 800d41e:	6819      	ldr	r1, [r3, #0]
 800d420:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d424:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff fc87 	bl	800cd3c <add32>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	3338      	adds	r3, #56	; 0x38
 800d434:	6819      	ldr	r1, [r3, #0]
 800d436:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d43a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d43e:	4618      	mov	r0, r3
 800d440:	f7ff fc7c 	bl	800cd3c <add32>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	333c      	adds	r3, #60	; 0x3c
 800d44a:	6819      	ldr	r1, [r3, #0]
 800d44c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d450:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff fc71 	bl	800cd3c <add32>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	333c      	adds	r3, #60	; 0x3c
 800d460:	6819      	ldr	r1, [r3, #0]
 800d462:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d466:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7ff fc66 	bl	800cd3c <add32>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	3338      	adds	r3, #56	; 0x38
 800d476:	6819      	ldr	r1, [r3, #0]
 800d478:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d47c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d480:	4618      	mov	r0, r3
 800d482:	f7ff fc5b 	bl	800cd3c <add32>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	3334      	adds	r3, #52	; 0x34
 800d48c:	6819      	ldr	r1, [r3, #0]
 800d48e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d492:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff fc50 	bl	800cd3c <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	3320      	adds	r3, #32
 800d4a2:	6819      	ldr	r1, [r3, #0]
 800d4a4:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d4a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7ff fc68 	bl	800cd82 <sub32>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	3324      	adds	r3, #36	; 0x24
 800d4b8:	6819      	ldr	r1, [r3, #0]
 800d4ba:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d4be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7ff fc5d 	bl	800cd82 <sub32>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	689a      	ldr	r2, [r3, #8]
 800d4cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4d8:	3301      	adds	r3, #1
 800d4da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	689a      	ldr	r2, [r3, #8]
 800d4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	4413      	add	r3, r2
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d4f8:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	da0b      	bge.n	800d518 <ecp_mod_p256+0x6fc>
 800d500:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800d504:	425b      	negs	r3, r3
 800d506:	4619      	mov	r1, r3
 800d508:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d50c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d510:	4618      	mov	r0, r3
 800d512:	f7ff fc36 	bl	800cd82 <sub32>
 800d516:	e008      	b.n	800d52a <ecp_mod_p256+0x70e>
 800d518:	f997 1043 	ldrsb.w	r1, [r7, #67]	; 0x43
 800d51c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d520:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d524:	4618      	mov	r0, r3
 800d526:	f7ff fc09 	bl	800cd3c <add32>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	333c      	adds	r3, #60	; 0x3c
 800d530:	6819      	ldr	r1, [r3, #0]
 800d532:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7ff fbfe 	bl	800cd3c <add32>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	333c      	adds	r3, #60	; 0x3c
 800d546:	6819      	ldr	r1, [r3, #0]
 800d548:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d54c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d550:	4618      	mov	r0, r3
 800d552:	f7ff fbf3 	bl	800cd3c <add32>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	333c      	adds	r3, #60	; 0x3c
 800d55c:	6819      	ldr	r1, [r3, #0]
 800d55e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d562:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d566:	4618      	mov	r0, r3
 800d568:	f7ff fbe8 	bl	800cd3c <add32>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	3320      	adds	r3, #32
 800d572:	6819      	ldr	r1, [r3, #0]
 800d574:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff fbdd 	bl	800cd3c <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	3328      	adds	r3, #40	; 0x28
 800d588:	6819      	ldr	r1, [r3, #0]
 800d58a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d58e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff fbf5 	bl	800cd82 <sub32>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	332c      	adds	r3, #44	; 0x2c
 800d59e:	6819      	ldr	r1, [r3, #0]
 800d5a0:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d5a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff fbea 	bl	800cd82 <sub32>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	3330      	adds	r3, #48	; 0x30
 800d5b4:	6819      	ldr	r1, [r3, #0]
 800d5b6:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d5ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7ff fbdf 	bl	800cd82 <sub32>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	3334      	adds	r3, #52	; 0x34
 800d5ca:	6819      	ldr	r1, [r3, #0]
 800d5cc:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d5d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7ff fbd4 	bl	800cd82 <sub32>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4413      	add	r3, r2
 800d5e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5e6:	601a      	str	r2, [r3, #0]
 800d5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5ee:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 800d5f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	689a      	ldr	r2, [r3, #8]
 800d5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4413      	add	r3, r2
 800d604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d606:	601a      	str	r2, [r3, #0]
 800d608:	2300      	movs	r3, #0
 800d60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d60c:	e006      	b.n	800d61c <ecp_mod_p256+0x800>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	689a      	ldr	r2, [r3, #8]
 800d612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	4413      	add	r3, r2
 800d618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d61e:	3301      	adds	r3, #1
 800d620:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d628:	429a      	cmp	r2, r3
 800d62a:	d3f0      	bcc.n	800d60e <ecp_mod_p256+0x7f2>
 800d62c:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 800d630:	2b00      	cmp	r3, #0
 800d632:	da0a      	bge.n	800d64a <ecp_mod_p256+0x82e>
 800d634:	f997 1042 	ldrsb.w	r1, [r7, #66]	; 0x42
 800d638:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7ff fbc2 	bl	800cdc8 <fix_negative>
 800d644:	e002      	b.n	800d64c <ecp_mod_p256+0x830>
    INIT( 256 );
 800d646:	bf00      	nop
 800d648:	e000      	b.n	800d64c <ecp_mod_p256+0x830>

cleanup:
 800d64a:	bf00      	nop
    return( ret );
 800d64c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3750      	adds	r7, #80	; 0x50
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b098      	sub	sp, #96	; 0x60
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
    INIT( 384 );
 800d65e:	2300      	movs	r3, #0
 800d660:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800d664:	2300      	movs	r3, #0
 800d666:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d668:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800d66c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d66e:	2301      	movs	r3, #1
 800d670:	643b      	str	r3, [r7, #64]	; 0x40
 800d672:	230d      	movs	r3, #13
 800d674:	647b      	str	r3, [r7, #68]	; 0x44
 800d676:	f107 030c 	add.w	r3, r7, #12
 800d67a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d67e:	009a      	lsls	r2, r3, #2
 800d680:	f107 030c 	add.w	r3, r7, #12
 800d684:	2100      	movs	r1, #0
 800d686:	4618      	mov	r0, r3
 800d688:	f004 f8f2 	bl	8011870 <memset>
 800d68c:	2118      	movs	r1, #24
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7f7 f8b9 	bl	8004806 <mbedtls_mpi_grow>
 800d694:	6578      	str	r0, [r7, #84]	; 0x54
 800d696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f040 852e 	bne.w	800e0fa <ecp_mod_p384+0xaa4>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	689a      	ldr	r2, [r3, #8]
 800d6a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	64fb      	str	r3, [r7, #76]	; 0x4c

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	3330      	adds	r3, #48	; 0x30
 800d6b2:	6819      	ldr	r1, [r3, #0]
 800d6b4:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d6b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fb3d 	bl	800cd3c <add32>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	3354      	adds	r3, #84	; 0x54
 800d6c8:	6819      	ldr	r1, [r3, #0]
 800d6ca:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d6ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fb32 	bl	800cd3c <add32>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	3350      	adds	r3, #80	; 0x50
 800d6de:	6819      	ldr	r1, [r3, #0]
 800d6e0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d6e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7ff fb27 	bl	800cd3c <add32>
    SUB( 23 );                                              NEXT; // A0
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	335c      	adds	r3, #92	; 0x5c
 800d6f4:	6819      	ldr	r1, [r3, #0]
 800d6f6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d6fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff fb3f 	bl	800cd82 <sub32>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	689a      	ldr	r2, [r3, #8]
 800d708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	4413      	add	r3, r2
 800d70e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d710:	601a      	str	r2, [r3, #0]
 800d712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d714:	3301      	adds	r3, #1
 800d716:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	689a      	ldr	r2, [r3, #8]
 800d71c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	4413      	add	r3, r2
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d726:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800d72a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800d72e:	2300      	movs	r3, #0
 800d730:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800d734:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d738:	2b00      	cmp	r3, #0
 800d73a:	da0b      	bge.n	800d754 <ecp_mod_p384+0xfe>
 800d73c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d740:	425b      	negs	r3, r3
 800d742:	4619      	mov	r1, r3
 800d744:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff fb18 	bl	800cd82 <sub32>
 800d752:	e008      	b.n	800d766 <ecp_mod_p384+0x110>
 800d754:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800d758:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d75c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff faeb 	bl	800cd3c <add32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	3334      	adds	r3, #52	; 0x34
 800d76c:	6819      	ldr	r1, [r3, #0]
 800d76e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d772:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff fae0 	bl	800cd3c <add32>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	3358      	adds	r3, #88	; 0x58
 800d782:	6819      	ldr	r1, [r3, #0]
 800d784:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7ff fad5 	bl	800cd3c <add32>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	335c      	adds	r3, #92	; 0x5c
 800d798:	6819      	ldr	r1, [r3, #0]
 800d79a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d79e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7ff faca 	bl	800cd3c <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	3330      	adds	r3, #48	; 0x30
 800d7ae:	6819      	ldr	r1, [r3, #0]
 800d7b0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d7b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff fae2 	bl	800cd82 <sub32>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	3350      	adds	r3, #80	; 0x50
 800d7c4:	6819      	ldr	r1, [r3, #0]
 800d7c6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d7ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7ff fad7 	bl	800cd82 <sub32>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	689a      	ldr	r2, [r3, #8]
 800d7d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4413      	add	r3, r2
 800d7de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7e0:	601a      	str	r2, [r3, #0]
 800d7e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	689a      	ldr	r2, [r3, #8]
 800d7ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7f6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800d7fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800d7fe:	2300      	movs	r3, #0
 800d800:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800d804:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d808:	2b00      	cmp	r3, #0
 800d80a:	da0b      	bge.n	800d824 <ecp_mod_p384+0x1ce>
 800d80c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d810:	425b      	negs	r3, r3
 800d812:	4619      	mov	r1, r3
 800d814:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d818:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7ff fab0 	bl	800cd82 <sub32>
 800d822:	e008      	b.n	800d836 <ecp_mod_p384+0x1e0>
 800d824:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800d828:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d82c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff fa83 	bl	800cd3c <add32>

    ADD( 14 ); ADD( 23 );
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	3338      	adds	r3, #56	; 0x38
 800d83c:	6819      	ldr	r1, [r3, #0]
 800d83e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d842:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff fa78 	bl	800cd3c <add32>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	335c      	adds	r3, #92	; 0x5c
 800d852:	6819      	ldr	r1, [r3, #0]
 800d854:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d858:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7ff fa6d 	bl	800cd3c <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	3334      	adds	r3, #52	; 0x34
 800d868:	6819      	ldr	r1, [r3, #0]
 800d86a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d86e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d872:	4618      	mov	r0, r3
 800d874:	f7ff fa85 	bl	800cd82 <sub32>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	3354      	adds	r3, #84	; 0x54
 800d87e:	6819      	ldr	r1, [r3, #0]
 800d880:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d884:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d888:	4618      	mov	r0, r3
 800d88a:	f7ff fa7a 	bl	800cd82 <sub32>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	689a      	ldr	r2, [r3, #8]
 800d892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d89e:	3301      	adds	r3, #1
 800d8a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	689a      	ldr	r2, [r3, #8]
 800d8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4413      	add	r3, r2
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8b0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800d8b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800d8be:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	da0b      	bge.n	800d8de <ecp_mod_p384+0x288>
 800d8c6:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d8ca:	425b      	negs	r3, r3
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d8d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fa53 	bl	800cd82 <sub32>
 800d8dc:	e008      	b.n	800d8f0 <ecp_mod_p384+0x29a>
 800d8de:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800d8e2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d8e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fa26 	bl	800cd3c <add32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	333c      	adds	r3, #60	; 0x3c
 800d8f6:	6819      	ldr	r1, [r3, #0]
 800d8f8:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d8fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff fa1b 	bl	800cd3c <add32>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	3330      	adds	r3, #48	; 0x30
 800d90c:	6819      	ldr	r1, [r3, #0]
 800d90e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d912:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d916:	4618      	mov	r0, r3
 800d918:	f7ff fa10 	bl	800cd3c <add32>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	3350      	adds	r3, #80	; 0x50
 800d922:	6819      	ldr	r1, [r3, #0]
 800d924:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d928:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7ff fa05 	bl	800cd3c <add32>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	3354      	adds	r3, #84	; 0x54
 800d938:	6819      	ldr	r1, [r3, #0]
 800d93a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d93e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d942:	4618      	mov	r0, r3
 800d944:	f7ff f9fa 	bl	800cd3c <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	3338      	adds	r3, #56	; 0x38
 800d94e:	6819      	ldr	r1, [r3, #0]
 800d950:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d954:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff fa12 	bl	800cd82 <sub32>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	3358      	adds	r3, #88	; 0x58
 800d964:	6819      	ldr	r1, [r3, #0]
 800d966:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d96a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d96e:	4618      	mov	r0, r3
 800d970:	f7ff fa07 	bl	800cd82 <sub32>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	335c      	adds	r3, #92	; 0x5c
 800d97a:	6819      	ldr	r1, [r3, #0]
 800d97c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d980:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff f9fc 	bl	800cd82 <sub32>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	689a      	ldr	r2, [r3, #8]
 800d98e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4413      	add	r3, r2
 800d994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d996:	601a      	str	r2, [r3, #0]
 800d998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d99a:	3301      	adds	r3, #1
 800d99c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	689a      	ldr	r2, [r3, #8]
 800d9a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	4413      	add	r3, r2
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9ac:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800d9b0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800d9ba:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	da0b      	bge.n	800d9da <ecp_mod_p384+0x384>
 800d9c2:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800d9c6:	425b      	negs	r3, r3
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d9ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff f9d5 	bl	800cd82 <sub32>
 800d9d8:	e008      	b.n	800d9ec <ecp_mod_p384+0x396>
 800d9da:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800d9de:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d9e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7ff f9a8 	bl	800cd3c <add32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	3354      	adds	r3, #84	; 0x54
 800d9f2:	6819      	ldr	r1, [r3, #0]
 800d9f4:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800d9f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7ff f99d 	bl	800cd3c <add32>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	3354      	adds	r3, #84	; 0x54
 800da08:	6819      	ldr	r1, [r3, #0]
 800da0a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800da0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff f992 	bl	800cd3c <add32>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	3340      	adds	r3, #64	; 0x40
 800da1e:	6819      	ldr	r1, [r3, #0]
 800da20:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800da24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff f987 	bl	800cd3c <add32>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	3334      	adds	r3, #52	; 0x34
 800da34:	6819      	ldr	r1, [r3, #0]
 800da36:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800da3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da3e:	4618      	mov	r0, r3
 800da40:	f7ff f97c 	bl	800cd3c <add32>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	3330      	adds	r3, #48	; 0x30
 800da4a:	6819      	ldr	r1, [r3, #0]
 800da4c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800da50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da54:	4618      	mov	r0, r3
 800da56:	f7ff f971 	bl	800cd3c <add32>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	3350      	adds	r3, #80	; 0x50
 800da60:	6819      	ldr	r1, [r3, #0]
 800da62:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800da66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7ff f966 	bl	800cd3c <add32>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	3358      	adds	r3, #88	; 0x58
 800da76:	6819      	ldr	r1, [r3, #0]
 800da78:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800da7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff f95b 	bl	800cd3c <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	333c      	adds	r3, #60	; 0x3c
 800da8c:	6819      	ldr	r1, [r3, #0]
 800da8e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800da92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da96:	4618      	mov	r0, r3
 800da98:	f7ff f973 	bl	800cd82 <sub32>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	335c      	adds	r3, #92	; 0x5c
 800daa2:	6819      	ldr	r1, [r3, #0]
 800daa4:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800daa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800daac:	4618      	mov	r0, r3
 800daae:	f7ff f968 	bl	800cd82 <sub32>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	335c      	adds	r3, #92	; 0x5c
 800dab8:	6819      	ldr	r1, [r3, #0]
 800daba:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dabe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff f95d 	bl	800cd82 <sub32>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	689a      	ldr	r2, [r3, #8]
 800dacc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dad8:	3301      	adds	r3, #1
 800dada:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	689a      	ldr	r2, [r3, #8]
 800dae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daea:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800daee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800daf2:	2300      	movs	r3, #0
 800daf4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800daf8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	da0b      	bge.n	800db18 <ecp_mod_p384+0x4c2>
 800db00:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800db04:	425b      	negs	r3, r3
 800db06:	4619      	mov	r1, r3
 800db08:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800db0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff f936 	bl	800cd82 <sub32>
 800db16:	e008      	b.n	800db2a <ecp_mod_p384+0x4d4>
 800db18:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800db1c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800db20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff f909 	bl	800cd3c <add32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	3358      	adds	r3, #88	; 0x58
 800db30:	6819      	ldr	r1, [r3, #0]
 800db32:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800db36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7ff f8fe 	bl	800cd3c <add32>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	3358      	adds	r3, #88	; 0x58
 800db46:	6819      	ldr	r1, [r3, #0]
 800db48:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800db4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db50:	4618      	mov	r0, r3
 800db52:	f7ff f8f3 	bl	800cd3c <add32>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	3344      	adds	r3, #68	; 0x44
 800db5c:	6819      	ldr	r1, [r3, #0]
 800db5e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800db62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff f8e8 	bl	800cd3c <add32>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	3338      	adds	r3, #56	; 0x38
 800db72:	6819      	ldr	r1, [r3, #0]
 800db74:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800db78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff f8dd 	bl	800cd3c <add32>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	3334      	adds	r3, #52	; 0x34
 800db88:	6819      	ldr	r1, [r3, #0]
 800db8a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800db8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db92:	4618      	mov	r0, r3
 800db94:	f7ff f8d2 	bl	800cd3c <add32>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	3354      	adds	r3, #84	; 0x54
 800db9e:	6819      	ldr	r1, [r3, #0]
 800dba0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dba4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7ff f8c7 	bl	800cd3c <add32>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	335c      	adds	r3, #92	; 0x5c
 800dbb4:	6819      	ldr	r1, [r3, #0]
 800dbb6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dbba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7ff f8bc 	bl	800cd3c <add32>
    SUB( 16 );                                              NEXT; // A5
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	689b      	ldr	r3, [r3, #8]
 800dbc8:	3340      	adds	r3, #64	; 0x40
 800dbca:	6819      	ldr	r1, [r3, #0]
 800dbcc:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dbd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff f8d4 	bl	800cd82 <sub32>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	689a      	ldr	r2, [r3, #8]
 800dbde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbea:	3301      	adds	r3, #1
 800dbec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	689a      	ldr	r2, [r3, #8]
 800dbf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbfc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800dc00:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800dc04:	2300      	movs	r3, #0
 800dc06:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800dc0a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	da0b      	bge.n	800dc2a <ecp_mod_p384+0x5d4>
 800dc12:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dc16:	425b      	negs	r3, r3
 800dc18:	4619      	mov	r1, r3
 800dc1a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7ff f8ad 	bl	800cd82 <sub32>
 800dc28:	e008      	b.n	800dc3c <ecp_mod_p384+0x5e6>
 800dc2a:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800dc2e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff f880 	bl	800cd3c <add32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	335c      	adds	r3, #92	; 0x5c
 800dc42:	6819      	ldr	r1, [r3, #0]
 800dc44:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff f875 	bl	800cd3c <add32>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	335c      	adds	r3, #92	; 0x5c
 800dc58:	6819      	ldr	r1, [r3, #0]
 800dc5a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff f86a 	bl	800cd3c <add32>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	3348      	adds	r3, #72	; 0x48
 800dc6e:	6819      	ldr	r1, [r3, #0]
 800dc70:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7ff f85f 	bl	800cd3c <add32>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	333c      	adds	r3, #60	; 0x3c
 800dc84:	6819      	ldr	r1, [r3, #0]
 800dc86:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dc8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff f854 	bl	800cd3c <add32>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	3338      	adds	r3, #56	; 0x38
 800dc9a:	6819      	ldr	r1, [r3, #0]
 800dc9c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dca0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff f849 	bl	800cd3c <add32>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	3358      	adds	r3, #88	; 0x58
 800dcb0:	6819      	ldr	r1, [r3, #0]
 800dcb2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dcb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7ff f83e 	bl	800cd3c <add32>
    SUB( 17 );                                              NEXT; // A6
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	3344      	adds	r3, #68	; 0x44
 800dcc6:	6819      	ldr	r1, [r3, #0]
 800dcc8:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dccc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff f856 	bl	800cd82 <sub32>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689a      	ldr	r2, [r3, #8]
 800dcda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4413      	add	r3, r2
 800dce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dce6:	3301      	adds	r3, #1
 800dce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	689a      	ldr	r2, [r3, #8]
 800dcee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcf8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800dcfc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800dd00:	2300      	movs	r3, #0
 800dd02:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800dd06:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	da0b      	bge.n	800dd26 <ecp_mod_p384+0x6d0>
 800dd0e:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dd12:	425b      	negs	r3, r3
 800dd14:	4619      	mov	r1, r3
 800dd16:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7ff f82f 	bl	800cd82 <sub32>
 800dd24:	e008      	b.n	800dd38 <ecp_mod_p384+0x6e2>
 800dd26:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800dd2a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff f802 	bl	800cd3c <add32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	334c      	adds	r3, #76	; 0x4c
 800dd3e:	6819      	ldr	r1, [r3, #0]
 800dd40:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe fff7 	bl	800cd3c <add32>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	3340      	adds	r3, #64	; 0x40
 800dd54:	6819      	ldr	r1, [r3, #0]
 800dd56:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fe ffec 	bl	800cd3c <add32>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	333c      	adds	r3, #60	; 0x3c
 800dd6a:	6819      	ldr	r1, [r3, #0]
 800dd6c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fe ffe1 	bl	800cd3c <add32>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	335c      	adds	r3, #92	; 0x5c
 800dd80:	6819      	ldr	r1, [r3, #0]
 800dd82:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fe ffd6 	bl	800cd3c <add32>
    SUB( 18 );                                              NEXT; // A7
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	3348      	adds	r3, #72	; 0x48
 800dd96:	6819      	ldr	r1, [r3, #0]
 800dd98:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dd9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe ffee 	bl	800cd82 <sub32>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	689a      	ldr	r2, [r3, #8]
 800ddaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	689a      	ldr	r2, [r3, #8]
 800ddbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddc8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800ddcc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800ddd6:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	da0b      	bge.n	800ddf6 <ecp_mod_p384+0x7a0>
 800ddde:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800dde2:	425b      	negs	r3, r3
 800dde4:	4619      	mov	r1, r3
 800dde6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800ddea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe ffc7 	bl	800cd82 <sub32>
 800ddf4:	e008      	b.n	800de08 <ecp_mod_p384+0x7b2>
 800ddf6:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800ddfa:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800ddfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de02:	4618      	mov	r0, r3
 800de04:	f7fe ff9a 	bl	800cd3c <add32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	3350      	adds	r3, #80	; 0x50
 800de0e:	6819      	ldr	r1, [r3, #0]
 800de10:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fe ff8f 	bl	800cd3c <add32>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	689b      	ldr	r3, [r3, #8]
 800de22:	3344      	adds	r3, #68	; 0x44
 800de24:	6819      	ldr	r1, [r3, #0]
 800de26:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe ff84 	bl	800cd3c <add32>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	3340      	adds	r3, #64	; 0x40
 800de3a:	6819      	ldr	r1, [r3, #0]
 800de3c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe ff79 	bl	800cd3c <add32>
    SUB( 19 );                                              NEXT; // A8
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	334c      	adds	r3, #76	; 0x4c
 800de50:	6819      	ldr	r1, [r3, #0]
 800de52:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800de56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe ff91 	bl	800cd82 <sub32>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	689a      	ldr	r2, [r3, #8]
 800de64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de6c:	601a      	str	r2, [r3, #0]
 800de6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de70:	3301      	adds	r3, #1
 800de72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	689a      	ldr	r2, [r3, #8]
 800de78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	4413      	add	r3, r2
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de82:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800de86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800de8a:	2300      	movs	r3, #0
 800de8c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800de90:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800de94:	2b00      	cmp	r3, #0
 800de96:	da0b      	bge.n	800deb0 <ecp_mod_p384+0x85a>
 800de98:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800de9c:	425b      	negs	r3, r3
 800de9e:	4619      	mov	r1, r3
 800dea0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dea4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fe ff6a 	bl	800cd82 <sub32>
 800deae:	e008      	b.n	800dec2 <ecp_mod_p384+0x86c>
 800deb0:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800deb4:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800deb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800debc:	4618      	mov	r0, r3
 800debe:	f7fe ff3d 	bl	800cd3c <add32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	3354      	adds	r3, #84	; 0x54
 800dec8:	6819      	ldr	r1, [r3, #0]
 800deca:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dece:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe ff32 	bl	800cd3c <add32>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	3348      	adds	r3, #72	; 0x48
 800dede:	6819      	ldr	r1, [r3, #0]
 800dee0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dee4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dee8:	4618      	mov	r0, r3
 800deea:	f7fe ff27 	bl	800cd3c <add32>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	3344      	adds	r3, #68	; 0x44
 800def4:	6819      	ldr	r1, [r3, #0]
 800def6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800defa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe ff1c 	bl	800cd3c <add32>
    SUB( 20 );                                              NEXT; // A9
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	3350      	adds	r3, #80	; 0x50
 800df0a:	6819      	ldr	r1, [r3, #0]
 800df0c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df14:	4618      	mov	r0, r3
 800df16:	f7fe ff34 	bl	800cd82 <sub32>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	689a      	ldr	r2, [r3, #8]
 800df1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df26:	601a      	str	r2, [r3, #0]
 800df28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df2a:	3301      	adds	r3, #1
 800df2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	689a      	ldr	r2, [r3, #8]
 800df32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	4413      	add	r3, r2
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df3c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800df40:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800df44:	2300      	movs	r3, #0
 800df46:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800df4a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800df4e:	2b00      	cmp	r3, #0
 800df50:	da0b      	bge.n	800df6a <ecp_mod_p384+0x914>
 800df52:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800df56:	425b      	negs	r3, r3
 800df58:	4619      	mov	r1, r3
 800df5a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df62:	4618      	mov	r0, r3
 800df64:	f7fe ff0d 	bl	800cd82 <sub32>
 800df68:	e008      	b.n	800df7c <ecp_mod_p384+0x926>
 800df6a:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800df6e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe fee0 	bl	800cd3c <add32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	3358      	adds	r3, #88	; 0x58
 800df82:	6819      	ldr	r1, [r3, #0]
 800df84:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe fed5 	bl	800cd3c <add32>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	334c      	adds	r3, #76	; 0x4c
 800df98:	6819      	ldr	r1, [r3, #0]
 800df9a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800df9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe feca 	bl	800cd3c <add32>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	3348      	adds	r3, #72	; 0x48
 800dfae:	6819      	ldr	r1, [r3, #0]
 800dfb0:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dfb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fe febf 	bl	800cd3c <add32>
    SUB( 21 );                                              NEXT; // A10
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	3354      	adds	r3, #84	; 0x54
 800dfc4:	6819      	ldr	r1, [r3, #0]
 800dfc6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800dfca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fe fed7 	bl	800cd82 <sub32>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	689a      	ldr	r2, [r3, #8]
 800dfd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4413      	add	r3, r2
 800dfde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dfe0:	601a      	str	r2, [r3, #0]
 800dfe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689a      	ldr	r2, [r3, #8]
 800dfec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dff6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800dffa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800dffe:	2300      	movs	r3, #0
 800e000:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800e004:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e008:	2b00      	cmp	r3, #0
 800e00a:	da0b      	bge.n	800e024 <ecp_mod_p384+0x9ce>
 800e00c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800e010:	425b      	negs	r3, r3
 800e012:	4619      	mov	r1, r3
 800e014:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e018:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fe feb0 	bl	800cd82 <sub32>
 800e022:	e008      	b.n	800e036 <ecp_mod_p384+0x9e0>
 800e024:	f997 1053 	ldrsb.w	r1, [r7, #83]	; 0x53
 800e028:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e02c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe fe83 	bl	800cd3c <add32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	335c      	adds	r3, #92	; 0x5c
 800e03c:	6819      	ldr	r1, [r3, #0]
 800e03e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e042:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe fe78 	bl	800cd3c <add32>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	3350      	adds	r3, #80	; 0x50
 800e052:	6819      	ldr	r1, [r3, #0]
 800e054:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe fe6d 	bl	800cd3c <add32>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	334c      	adds	r3, #76	; 0x4c
 800e068:	6819      	ldr	r1, [r3, #0]
 800e06a:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e06e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe fe62 	bl	800cd3c <add32>
    SUB( 22 );                                              LAST; // A11
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	3358      	adds	r3, #88	; 0x58
 800e07e:	6819      	ldr	r1, [r3, #0]
 800e080:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e084:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fe fe7a 	bl	800cd82 <sub32>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	689a      	ldr	r2, [r3, #8]
 800e092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e09e:	3301      	adds	r3, #1
 800e0a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0a2:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800e0a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e0aa:	b25b      	sxtb	r3, r3
 800e0ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	689a      	ldr	r2, [r3, #8]
 800e0b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	4413      	add	r3, r2
 800e0b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0ba:	601a      	str	r2, [r3, #0]
 800e0bc:	2300      	movs	r3, #0
 800e0be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0c0:	e006      	b.n	800e0d0 <ecp_mod_p384+0xa7a>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	689a      	ldr	r2, [r3, #8]
 800e0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d3f0      	bcc.n	800e0c2 <ecp_mod_p384+0xa6c>
 800e0e0:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	da0a      	bge.n	800e0fe <ecp_mod_p384+0xaa8>
 800e0e8:	f997 1052 	ldrsb.w	r1, [r7, #82]	; 0x52
 800e0ec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e0f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7fe fe68 	bl	800cdc8 <fix_negative>
 800e0f8:	e002      	b.n	800e100 <ecp_mod_p384+0xaaa>
    INIT( 384 );
 800e0fa:	bf00      	nop
 800e0fc:	e000      	b.n	800e100 <ecp_mod_p384+0xaaa>

cleanup:
 800e0fe:	bf00      	nop
    return( ret );
 800e100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800e102:	4618      	mov	r0, r3
 800e104:	3760      	adds	r7, #96	; 0x60
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
	...

0800e10c <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 800e10c:	b5b0      	push	{r4, r5, r7, lr}
 800e10e:	b0a8      	sub	sp, #160	; 0xa0
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	2b0e      	cmp	r3, #14
 800e11a:	d801      	bhi.n	800e120 <ecp_mod_p448+0x14>
        return( 0 );
 800e11c:	2300      	movs	r3, #0
 800e11e:	e0c7      	b.n	800e2b0 <ecp_mod_p448+0x1a4>

    /* M = A1 */
    M.s = 1;
 800e120:	2301      	movs	r3, #1
 800e122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    M.n = N->n - ( P448_WIDTH );
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	3b0e      	subs	r3, #14
 800e12c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if( M.n > P448_WIDTH )
 800e130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e134:	2b0e      	cmp	r3, #14
 800e136:	d901      	bls.n	800e13c <ecp_mod_p448+0x30>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e138:	4b5f      	ldr	r3, [pc, #380]	; (800e2b8 <ecp_mod_p448+0x1ac>)
 800e13a:	e0b9      	b.n	800e2b0 <ecp_mod_p448+0x1a4>
    M.p = Mp;
 800e13c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e140:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    memset( Mp, 0, sizeof( Mp ) );
 800e144:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e148:	223c      	movs	r2, #60	; 0x3c
 800e14a:	2100      	movs	r1, #0
 800e14c:	4618      	mov	r0, r3
 800e14e:	f003 fb8f 	bl	8011870 <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e15a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e15e:	009a      	lsls	r2, r3, #2
 800e160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e164:	4618      	mov	r0, r3
 800e166:	f003 fb75 	bl	8011854 <memcpy>

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
 800e16a:	230e      	movs	r3, #14
 800e16c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e170:	e00c      	b.n	800e18c <ecp_mod_p448+0x80>
        N->p[i] = 0;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	689a      	ldr	r2, [r3, #8]
 800e176:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	4413      	add	r3, r2
 800e17e:	2200      	movs	r2, #0
 800e180:	601a      	str	r2, [r3, #0]
    for( i = P448_WIDTH; i < N->n; i++ )
 800e182:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e186:	3301      	adds	r3, #1
 800e188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e194:	429a      	cmp	r2, r3
 800e196:	d3ec      	bcc.n	800e172 <ecp_mod_p448+0x66>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 800e198:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e19c:	461a      	mov	r2, r3
 800e19e:	6879      	ldr	r1, [r7, #4]
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7f7 fc88 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800e1a6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e1aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d173      	bne.n	800e29a <ecp_mod_p448+0x18e>

    /* Q = B1, N += B1 */
    Q = M;
 800e1b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e1b6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800e1ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800e1bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Q.p = Qp;
 800e1c0:	f107 030c 	add.w	r3, r7, #12
 800e1c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    memcpy( Qp, Mp, sizeof( Qp ) );
 800e1c8:	f107 040c 	add.w	r4, r7, #12
 800e1cc:	f107 0544 	add.w	r5, r7, #68	; 0x44
 800e1d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e1e0:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 800e1e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e1e8:	21e0      	movs	r1, #224	; 0xe0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7f7 f917 	bl	800541e <mbedtls_mpi_shift_r>
 800e1f0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e1f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d150      	bne.n	800e29e <ecp_mod_p448+0x192>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 800e1fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e200:	461a      	mov	r2, r3
 800e202:	6879      	ldr	r1, [r7, #4]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f7f7 fc56 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800e20a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e20e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e212:	2b00      	cmp	r3, #0
 800e214:	d145      	bne.n	800e2a2 <ecp_mod_p448+0x196>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 800e216:	2307      	movs	r3, #7
 800e218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e21c:	e00c      	b.n	800e238 <ecp_mod_p448+0x12c>
        Mp[i] = 0;
 800e21e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	33a0      	adds	r3, #160	; 0xa0
 800e226:	443b      	add	r3, r7
 800e228:	2200      	movs	r2, #0
 800e22a:	f843 2c5c 	str.w	r2, [r3, #-92]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 800e22e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e232:	3301      	adds	r3, #1
 800e234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e238:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e23c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e240:	429a      	cmp	r2, r3
 800e242:	d3ec      	bcc.n	800e21e <ecp_mod_p448+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 800e244:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e248:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800e24c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e250:	4618      	mov	r0, r3
 800e252:	f7f7 fc30 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800e256:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e25a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d121      	bne.n	800e2a6 <ecp_mod_p448+0x19a>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 800e262:	230f      	movs	r3, #15
 800e264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 800e268:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e26c:	21e0      	movs	r1, #224	; 0xe0
 800e26e:	4618      	mov	r0, r3
 800e270:	f7f7 f830 	bl	80052d4 <mbedtls_mpi_shift_l>
 800e274:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d114      	bne.n	800e2aa <ecp_mod_p448+0x19e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 800e280:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e284:	461a      	mov	r2, r3
 800e286:	6879      	ldr	r1, [r7, #4]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7f7 fc14 	bl	8005ab6 <mbedtls_mpi_add_mpi>
 800e28e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800e292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e296:	2b00      	cmp	r3, #0

cleanup:
 800e298:	e008      	b.n	800e2ac <ecp_mod_p448+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 800e29a:	bf00      	nop
 800e29c:	e006      	b.n	800e2ac <ecp_mod_p448+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 800e29e:	bf00      	nop
 800e2a0:	e004      	b.n	800e2ac <ecp_mod_p448+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 800e2a2:	bf00      	nop
 800e2a4:	e002      	b.n	800e2ac <ecp_mod_p448+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 800e2a6:	bf00      	nop
 800e2a8:	e000      	b.n	800e2ac <ecp_mod_p448+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 800e2aa:	bf00      	nop
    return( ret );
 800e2ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	37a0      	adds	r7, #160	; 0xa0
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bdb0      	pop	{r4, r5, r7, pc}
 800e2b8:	ffffb080 	.word	0xffffb080

0800e2bc <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	33e4      	adds	r3, #228	; 0xe4
 800e2d0:	2228      	movs	r2, #40	; 0x28
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f003 facb 	bl	8011870 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3308      	adds	r3, #8
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f000 fb91 	bl	800ea0c <mbedtls_sha512_init>
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 800e2ea:	bf00      	nop
 800e2ec:	3708      	adds	r7, #8
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b098      	sub	sp, #96	; 0x60
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	60f8      	str	r0, [r7, #12]
 800e2fa:	607a      	str	r2, [r7, #4]
 800e2fc:	603b      	str	r3, [r7, #0]
 800e2fe:	460b      	mov	r3, r1
 800e300:	72fb      	strb	r3, [r7, #11]
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	65fb      	str	r3, [r7, #92]	; 0x5c
    const unsigned char *p = data;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	65bb      	str	r3, [r7, #88]	; 0x58
    int ret = 0;
 800e30a:	2300      	movs	r3, #0
 800e30c:	657b      	str	r3, [r7, #84]	; 0x54

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 800e30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e310:	2b40      	cmp	r3, #64	; 0x40
 800e312:	d90f      	bls.n	800e334 <entropy_update+0x42>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 800e314:	f107 0210 	add.w	r2, r7, #16
 800e318:	2300      	movs	r3, #0
 800e31a:	6839      	ldr	r1, [r7, #0]
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f003 fa1f 	bl	8011760 <mbedtls_sha512_ret>
 800e322:	6578      	str	r0, [r7, #84]	; 0x54
 800e324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e326:	2b00      	cmp	r3, #0
 800e328:	d131      	bne.n	800e38e <entropy_update+0x9c>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 800e32a:	f107 0310 	add.w	r3, r7, #16
 800e32e:	65bb      	str	r3, [r7, #88]	; 0x58
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 800e330:	2340      	movs	r3, #64	; 0x40
 800e332:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    header[0] = source_id;
 800e334:	7afb      	ldrb	r3, [r7, #11]
 800e336:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    header[1] = use_len & 0xFF;
 800e33a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d109      	bne.n	800e35e <entropy_update+0x6c>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	3308      	adds	r3, #8
 800e34e:	2100      	movs	r1, #0
 800e350:	4618      	mov	r0, r3
 800e352:	f000 fb79 	bl	800ea48 <mbedtls_sha512_starts_ret>
 800e356:	6578      	str	r0, [r7, #84]	; 0x54
    if( ctx->accumulator_started == 0 &&
 800e358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d119      	bne.n	800e392 <entropy_update+0xa0>
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2201      	movs	r2, #1
 800e362:	601a      	str	r2, [r3, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	3308      	adds	r3, #8
 800e368:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e36c:	2202      	movs	r2, #2
 800e36e:	4618      	mov	r0, r3
 800e370:	f002 fcec 	bl	8010d4c <mbedtls_sha512_update_ret>
 800e374:	6578      	str	r0, [r7, #84]	; 0x54
 800e376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d10c      	bne.n	800e396 <entropy_update+0xa4>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3308      	adds	r3, #8
 800e380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e384:	4618      	mov	r0, r3
 800e386:	f002 fce1 	bl	8010d4c <mbedtls_sha512_update_ret>
 800e38a:	6578      	str	r0, [r7, #84]	; 0x54
 800e38c:	e004      	b.n	800e398 <entropy_update+0xa6>
            goto cleanup;
 800e38e:	bf00      	nop
 800e390:	e002      	b.n	800e398 <entropy_update+0xa6>
        goto cleanup;
 800e392:	bf00      	nop
 800e394:	e000      	b.n	800e398 <entropy_update+0xa6>
        goto cleanup;
 800e396:	bf00      	nop
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800e398:	f107 0310 	add.w	r3, r7, #16
 800e39c:	2140      	movs	r1, #64	; 0x40
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f000 fb22 	bl	800e9e8 <mbedtls_platform_zeroize>

    return( ret );
 800e3a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3760      	adds	r7, #96	; 0x60
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 800e3ae:	b590      	push	{r4, r7, lr}
 800e3b0:	b0a7      	sub	sp, #156	; 0x9c
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
    int ret, i, have_one_strong = 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <entropy_gather_internal+0x1e>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 800e3c6:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800e3ca:	e07f      	b.n	800e4cc <entropy_gather_internal+0x11e>

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e3d2:	e060      	b.n	800e496 <entropy_gather_internal+0xe8>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e3da:	4613      	mov	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	440b      	add	r3, r1
 800e3e4:	33f4      	adds	r3, #244	; 0xf4
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d102      	bne.n	800e3f2 <entropy_gather_internal+0x44>
            have_one_strong = 1;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        olen = 0;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60bb      	str	r3, [r7, #8]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	4413      	add	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	440b      	add	r3, r1
 800e406:	33e4      	adds	r3, #228	; 0xe4
 800e408:	681c      	ldr	r4, [r3, #0]
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e410:	4613      	mov	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	440b      	add	r3, r1
 800e41a:	33e8      	adds	r3, #232	; 0xe8
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	f107 0308 	add.w	r3, r7, #8
 800e422:	f107 010c 	add.w	r1, r7, #12
 800e426:	2280      	movs	r2, #128	; 0x80
 800e428:	47a0      	blx	r4
 800e42a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800e42e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e432:	2b00      	cmp	r3, #0
 800e434:	d13f      	bne.n	800e4b6 <entropy_gather_internal+0x108>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d027      	beq.n	800e48c <entropy_gather_internal+0xde>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 800e43c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e440:	b2d9      	uxtb	r1, r3
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	f107 020c 	add.w	r2, r7, #12
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7ff ff52 	bl	800e2f2 <entropy_update>
 800e44e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800e452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <entropy_gather_internal+0xb2>
                                        buf, olen ) ) != 0 )
                return( ret );
 800e45a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e45e:	e035      	b.n	800e4cc <entropy_gather_internal+0x11e>
            ctx->source[i].size += olen;
 800e460:	6879      	ldr	r1, [r7, #4]
 800e462:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e466:	4613      	mov	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	440b      	add	r3, r1
 800e470:	33ec      	adds	r3, #236	; 0xec
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	18d1      	adds	r1, r2, r3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e47e:	4613      	mov	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4403      	add	r3, r0
 800e488:	33ec      	adds	r3, #236	; 0xec
 800e48a:	6019      	str	r1, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800e48c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e490:	3301      	adds	r3, #1
 800e492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e49c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	db97      	blt.n	800e3d4 <entropy_gather_internal+0x26>
        }
    }

    if( have_one_strong == 0 )
 800e4a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d106      	bne.n	800e4ba <entropy_gather_internal+0x10c>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 800e4ac:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 800e4b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4b4:	e002      	b.n	800e4bc <entropy_gather_internal+0x10e>
            goto cleanup;
 800e4b6:	bf00      	nop
 800e4b8:	e000      	b.n	800e4bc <entropy_gather_internal+0x10e>

cleanup:
 800e4ba:	bf00      	nop
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800e4bc:	f107 030c 	add.w	r3, r7, #12
 800e4c0:	2180      	movs	r1, #128	; 0x80
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 fa90 	bl	800e9e8 <mbedtls_platform_zeroize>

    return( ret );
 800e4c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	379c      	adds	r7, #156	; 0x9c
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd90      	pop	{r4, r7, pc}

0800e4d4 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b09a      	sub	sp, #104	; 0x68
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
    int ret, count = 0, i, done;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	663b      	str	r3, [r7, #96]	; 0x60
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b40      	cmp	r3, #64	; 0x40
 800e4ec:	d902      	bls.n	800e4f4 <mbedtls_entropy_func+0x20>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 800e4ee:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800e4f2:	e0a7      	b.n	800e644 <mbedtls_entropy_func+0x170>
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 800e4f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4f6:	1c5a      	adds	r2, r3, #1
 800e4f8:	663a      	str	r2, [r7, #96]	; 0x60
 800e4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4fe:	dd03      	ble.n	800e508 <mbedtls_entropy_func+0x34>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800e500:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800e504:	667b      	str	r3, [r7, #100]	; 0x64
            goto exit;
 800e506:	e096      	b.n	800e636 <mbedtls_entropy_func+0x162>
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 800e508:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e50a:	f7ff ff50 	bl	800e3ae <entropy_gather_internal>
 800e50e:	6678      	str	r0, [r7, #100]	; 0x64
 800e510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e512:	2b00      	cmp	r3, #0
 800e514:	f040 8086 	bne.w	800e624 <mbedtls_entropy_func+0x150>
            goto exit;

        done = 1;
 800e518:	2301      	movs	r3, #1
 800e51a:	65bb      	str	r3, [r7, #88]	; 0x58
        for( i = 0; i < ctx->source_count; i++ )
 800e51c:	2300      	movs	r3, #0
 800e51e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e520:	e018      	b.n	800e554 <mbedtls_entropy_func+0x80>
            if( ctx->source[i].size < ctx->source[i].threshold )
 800e522:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e526:	4613      	mov	r3, r2
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	4413      	add	r3, r2
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	440b      	add	r3, r1
 800e530:	33ec      	adds	r3, #236	; 0xec
 800e532:	6819      	ldr	r1, [r3, #0]
 800e534:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e536:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e538:	4613      	mov	r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	4413      	add	r3, r2
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4403      	add	r3, r0
 800e542:	33f0      	adds	r3, #240	; 0xf0
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4299      	cmp	r1, r3
 800e548:	d201      	bcs.n	800e54e <mbedtls_entropy_func+0x7a>
                done = 0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	65bb      	str	r3, [r7, #88]	; 0x58
        for( i = 0; i < ctx->source_count; i++ )
 800e54e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e550:	3301      	adds	r3, #1
 800e552:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e55a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e55c:	429a      	cmp	r2, r3
 800e55e:	dbe0      	blt.n	800e522 <mbedtls_entropy_func+0x4e>
    }
    while( ! done );
 800e560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e562:	2b00      	cmp	r3, #0
 800e564:	d0c6      	beq.n	800e4f4 <mbedtls_entropy_func+0x20>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 800e566:	f107 0314 	add.w	r3, r7, #20
 800e56a:	2240      	movs	r2, #64	; 0x40
 800e56c:	2100      	movs	r1, #0
 800e56e:	4618      	mov	r0, r3
 800e570:	f003 f97e 	bl	8011870 <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 800e574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e576:	3308      	adds	r3, #8
 800e578:	f107 0214 	add.w	r2, r7, #20
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f002 fc6f 	bl	8010e62 <mbedtls_sha512_finish_ret>
 800e584:	6678      	str	r0, [r7, #100]	; 0x64
 800e586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d14d      	bne.n	800e628 <mbedtls_entropy_func+0x154>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 800e58c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e58e:	3308      	adds	r3, #8
 800e590:	4618      	mov	r0, r3
 800e592:	f000 fa48 	bl	800ea26 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 800e596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e598:	3308      	adds	r3, #8
 800e59a:	4618      	mov	r0, r3
 800e59c:	f000 fa36 	bl	800ea0c <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800e5a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5a2:	3308      	adds	r3, #8
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f000 fa4e 	bl	800ea48 <mbedtls_sha512_starts_ret>
 800e5ac:	6678      	str	r0, [r7, #100]	; 0x64
 800e5ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d13b      	bne.n	800e62c <mbedtls_entropy_func+0x158>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 800e5b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b6:	3308      	adds	r3, #8
 800e5b8:	f107 0114 	add.w	r1, r7, #20
 800e5bc:	2240      	movs	r2, #64	; 0x40
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f002 fbc4 	bl	8010d4c <mbedtls_sha512_update_ret>
 800e5c4:	6678      	str	r0, [r7, #100]	; 0x64
 800e5c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d131      	bne.n	800e630 <mbedtls_entropy_func+0x15c>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 800e5cc:	f107 0214 	add.w	r2, r7, #20
 800e5d0:	f107 0014 	add.w	r0, r7, #20
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	2140      	movs	r1, #64	; 0x40
 800e5d8:	f003 f8c2 	bl	8011760 <mbedtls_sha512_ret>
 800e5dc:	6678      	str	r0, [r7, #100]	; 0x64
 800e5de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d127      	bne.n	800e634 <mbedtls_entropy_func+0x160>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5e8:	e00c      	b.n	800e604 <mbedtls_entropy_func+0x130>
        ctx->source[i].size = 0;
 800e5ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4413      	add	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	440b      	add	r3, r1
 800e5f8:	33ec      	adds	r3, #236	; 0xec
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800e5fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e600:	3301      	adds	r3, #1
 800e602:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e60a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e60c:	429a      	cmp	r2, r3
 800e60e:	dbec      	blt.n	800e5ea <mbedtls_entropy_func+0x116>

    memcpy( output, buf, len );
 800e610:	f107 0314 	add.w	r3, r7, #20
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	4619      	mov	r1, r3
 800e618:	68b8      	ldr	r0, [r7, #8]
 800e61a:	f003 f91b 	bl	8011854 <memcpy>

    ret = 0;
 800e61e:	2300      	movs	r3, #0
 800e620:	667b      	str	r3, [r7, #100]	; 0x64
 800e622:	e008      	b.n	800e636 <mbedtls_entropy_func+0x162>
            goto exit;
 800e624:	bf00      	nop
 800e626:	e006      	b.n	800e636 <mbedtls_entropy_func+0x162>
        goto exit;
 800e628:	bf00      	nop
 800e62a:	e004      	b.n	800e636 <mbedtls_entropy_func+0x162>
        goto exit;
 800e62c:	bf00      	nop
 800e62e:	e002      	b.n	800e636 <mbedtls_entropy_func+0x162>
        goto exit;
 800e630:	bf00      	nop
 800e632:	e000      	b.n	800e636 <mbedtls_entropy_func+0x162>
        goto exit;
 800e634:	bf00      	nop

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800e636:	f107 0314 	add.w	r3, r7, #20
 800e63a:	2140      	movs	r1, #64	; 0x40
 800e63c:	4618      	mov	r0, r3
 800e63e:	f000 f9d3 	bl	800e9e8 <mbedtls_platform_zeroize>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800e642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800e644:	4618      	mov	r0, r3
 800e646:	3768      	adds	r7, #104	; 0x68
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <mbedtls_pk_init>:

/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	601a      	str	r2, [r3, #0]
    ctx->pk_ctx = NULL;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2200      	movs	r2, #0
 800e65e:	605a      	str	r2, [r3, #4]
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00f      	beq.n	800e69a <mbedtls_pk_free+0x2e>
        return;

    if ( ctx->pk_info != NULL )
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d006      	beq.n	800e690 <mbedtls_pk_free+0x24>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	6852      	ldr	r2, [r2, #4]
 800e68c:	4610      	mov	r0, r2
 800e68e:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 800e690:	2108      	movs	r1, #8
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 f9a8 	bl	800e9e8 <mbedtls_platform_zeroize>
 800e698:	e000      	b.n	800e69c <mbedtls_pk_free+0x30>
        return;
 800e69a:	bf00      	nop
}
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
	...

0800e6a4 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	71fb      	strb	r3, [r7, #7]
    switch( pk_type ) {
 800e6ae:	79fb      	ldrb	r3, [r7, #7]
 800e6b0:	2b04      	cmp	r3, #4
 800e6b2:	d00a      	beq.n	800e6ca <mbedtls_pk_info_from_type+0x26>
 800e6b4:	2b04      	cmp	r3, #4
 800e6b6:	dc0a      	bgt.n	800e6ce <mbedtls_pk_info_from_type+0x2a>
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	d002      	beq.n	800e6c2 <mbedtls_pk_info_from_type+0x1e>
 800e6bc:	2b03      	cmp	r3, #3
 800e6be:	d002      	beq.n	800e6c6 <mbedtls_pk_info_from_type+0x22>
 800e6c0:	e005      	b.n	800e6ce <mbedtls_pk_info_from_type+0x2a>
        case MBEDTLS_PK_RSA:
            return( &mbedtls_rsa_info );
#endif
#if defined(MBEDTLS_ECP_C)
        case MBEDTLS_PK_ECKEY:
            return( &mbedtls_eckey_info );
 800e6c2:	4b06      	ldr	r3, [pc, #24]	; (800e6dc <mbedtls_pk_info_from_type+0x38>)
 800e6c4:	e004      	b.n	800e6d0 <mbedtls_pk_info_from_type+0x2c>
        case MBEDTLS_PK_ECKEY_DH:
            return( &mbedtls_eckeydh_info );
 800e6c6:	4b06      	ldr	r3, [pc, #24]	; (800e6e0 <mbedtls_pk_info_from_type+0x3c>)
 800e6c8:	e002      	b.n	800e6d0 <mbedtls_pk_info_from_type+0x2c>
#endif
#if defined(MBEDTLS_ECDSA_C)
        case MBEDTLS_PK_ECDSA:
            return( &mbedtls_ecdsa_info );
 800e6ca:	4b06      	ldr	r3, [pc, #24]	; (800e6e4 <mbedtls_pk_info_from_type+0x40>)
 800e6cc:	e000      	b.n	800e6d0 <mbedtls_pk_info_from_type+0x2c>
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
 800e6ce:	2300      	movs	r3, #0
    }
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	08014cc4 	.word	0x08014cc4
 800e6e0:	08014cf4 	.word	0x08014cf4
 800e6e4:	08014d24 	.word	0x08014d24

0800e6e8 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d003      	beq.n	800e700 <mbedtls_pk_setup+0x18>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 800e700:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <mbedtls_pk_setup+0x44>)
 800e702:	e00f      	b.n	800e724 <mbedtls_pk_setup+0x3c>

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e708:	4798      	blx	r3
 800e70a:	4602      	mov	r2, r0
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	605a      	str	r2, [r3, #4]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d101      	bne.n	800e71c <mbedtls_pk_setup+0x34>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 800e718:	4b05      	ldr	r3, [pc, #20]	; (800e730 <mbedtls_pk_setup+0x48>)
 800e71a:	e003      	b.n	800e724 <mbedtls_pk_setup+0x3c>

    ctx->pk_info = info;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	601a      	str	r2, [r3, #0]

    return( 0 );
 800e722:	2300      	movs	r3, #0
}
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	ffffc180 	.word	0xffffc180
 800e730:	ffffc080 	.word	0xffffc080

0800e734 <eckey_can_do>:
#if defined(MBEDTLS_ECP_C)
/*
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	4603      	mov	r3, r0
 800e73c:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	2b02      	cmp	r3, #2
 800e742:	d005      	beq.n	800e750 <eckey_can_do+0x1c>
    return( type == MBEDTLS_PK_ECKEY ||
 800e744:	79fb      	ldrb	r3, [r7, #7]
 800e746:	2b03      	cmp	r3, #3
 800e748:	d002      	beq.n	800e750 <eckey_can_do+0x1c>
            type == MBEDTLS_PK_ECKEY_DH ||
 800e74a:	79fb      	ldrb	r3, [r7, #7]
 800e74c:	2b04      	cmp	r3, #4
 800e74e:	d101      	bne.n	800e754 <eckey_can_do+0x20>
 800e750:	2301      	movs	r3, #1
 800e752:	e000      	b.n	800e756 <eckey_can_do+0x22>
 800e754:	2300      	movs	r3, #0
            type == MBEDTLS_PK_ECDSA );
}
 800e756:	4618      	mov	r0, r3
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
 800e762:	b480      	push	{r7}
 800e764:	b083      	sub	sp, #12
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e76e:	4618      	mov	r0, r3
 800e770:	370c      	adds	r7, #12
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <eckey_verify_wrap>:
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b0b2      	sub	sp, #200	; 0xc8
 800e77e:	af02      	add	r7, sp, #8
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	603b      	str	r3, [r7, #0]
 800e786:	460b      	mov	r3, r1
 800e788:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 800e78a:	f107 0310 	add.w	r3, r7, #16
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fa feaf 	bl	80094f2 <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 800e794:	f107 0310 	add.w	r3, r7, #16
 800e798:	68f9      	ldr	r1, [r7, #12]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7fa fe78 	bl	8009490 <mbedtls_ecdsa_from_keypair>
 800e7a0:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800e7a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10e      	bne.n	800e7ca <eckey_verify_wrap+0x50>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 800e7ac:	7af9      	ldrb	r1, [r7, #11]
 800e7ae:	f107 0010 	add.w	r0, r7, #16
 800e7b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e7b6:	9301      	str	r3, [sp, #4]
 800e7b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e7bc:	9300      	str	r3, [sp, #0]
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	f000 f8b5 	bl	800e930 <ecdsa_verify_wrap>
 800e7c6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

    mbedtls_ecdsa_free( &ecdsa );
 800e7ca:	f107 0310 	add.w	r3, r7, #16
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7fa fe9a 	bl	8009508 <mbedtls_ecdsa_free>

    return( ret );
 800e7d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	37c0      	adds	r7, #192	; 0xc0
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <eckey_sign_wrap>:

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b0b4      	sub	sp, #208	; 0xd0
 800e7e4:	af04      	add	r7, sp, #16
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	607a      	str	r2, [r7, #4]
 800e7ea:	603b      	str	r3, [r7, #0]
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	72fb      	strb	r3, [r7, #11]
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 800e7f0:	f107 0310 	add.w	r3, r7, #16
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fa fe7c 	bl	80094f2 <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 800e7fa:	f107 0310 	add.w	r3, r7, #16
 800e7fe:	68f9      	ldr	r1, [r7, #12]
 800e800:	4618      	mov	r0, r3
 800e802:	f7fa fe45 	bl	8009490 <mbedtls_ecdsa_from_keypair>
 800e806:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800e80a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d114      	bne.n	800e83c <eckey_sign_wrap+0x5c>
        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,
 800e812:	7af9      	ldrb	r1, [r7, #11]
 800e814:	f107 0010 	add.w	r0, r7, #16
 800e818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e81c:	9303      	str	r3, [sp, #12]
 800e81e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e822:	9302      	str	r3, [sp, #8]
 800e824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	f000 f89a 	bl	800e96c <ecdsa_sign_wrap>
 800e838:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
                               f_rng, p_rng );

    mbedtls_ecdsa_free( &ecdsa );
 800e83c:	f107 0310 	add.w	r3, r7, #16
 800e840:	4618      	mov	r0, r3
 800e842:	f7fa fe61 	bl	8009508 <mbedtls_ecdsa_free>

    return( ret );
 800e846:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	37c0      	adds	r7, #192	; 0xc0
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <eckey_check_pair>:
}
#endif /* MBEDTLS_ECP_RESTARTABLE */
#endif /* MBEDTLS_ECDSA_C */

static int eckey_check_pair( const void *pub, const void *prv )
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b082      	sub	sp, #8
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	6039      	str	r1, [r7, #0]
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 800e85c:	6839      	ldr	r1, [r7, #0]
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7fe f818 	bl	800c894 <mbedtls_ecp_check_pub_priv>
 800e864:	4603      	mov	r3, r0
                                (const mbedtls_ecp_keypair *) prv ) );
}
 800e866:	4618      	mov	r0, r3
 800e868:	3708      	adds	r7, #8
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <eckey_alloc_wrap>:

static void *eckey_alloc_wrap( void )
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b082      	sub	sp, #8
 800e872:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 800e874:	21ac      	movs	r1, #172	; 0xac
 800e876:	2001      	movs	r0, #1
 800e878:	f002 ffb2 	bl	80117e0 <calloc>
 800e87c:	4603      	mov	r3, r0
 800e87e:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d002      	beq.n	800e88c <eckey_alloc_wrap+0x1e>
        mbedtls_ecp_keypair_init( ctx );
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7fa feb9 	bl	80095fe <mbedtls_ecp_keypair_init>

    return( ctx );
 800e88c:	687b      	ldr	r3, [r7, #4]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <eckey_free_wrap>:

static void eckey_free_wrap( void *ctx )
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b082      	sub	sp, #8
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7fa ff29 	bl	80096f6 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f002 ffcd 	bl	8011844 <free>
}
 800e8aa:	bf00      	nop
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <eckey_debug>:

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
    items->type = MBEDTLS_PK_DEBUG_ECP;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	2202      	movs	r2, #2
 800e8c2:	701a      	strb	r2, [r3, #0]
    items->name = "eckey.Q";
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	4a06      	ldr	r2, [pc, #24]	; (800e8e0 <eckey_debug+0x2c>)
 800e8c8:	605a      	str	r2, [r3, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	609a      	str	r2, [r3, #8]
}
 800e8d4:	bf00      	nop
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	080128d8 	.word	0x080128d8

0800e8e4 <eckeydh_can_do>:

/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECKEY ||
 800e8ee:	79fb      	ldrb	r3, [r7, #7]
 800e8f0:	2b02      	cmp	r3, #2
 800e8f2:	d002      	beq.n	800e8fa <eckeydh_can_do+0x16>
 800e8f4:	79fb      	ldrb	r3, [r7, #7]
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	d101      	bne.n	800e8fe <eckeydh_can_do+0x1a>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e000      	b.n	800e900 <eckeydh_can_do+0x1c>
 800e8fe:	2300      	movs	r3, #0
            type == MBEDTLS_PK_ECKEY_DH );
}
 800e900:	4618      	mov	r0, r3
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <ecdsa_can_do>:
};
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	71fb      	strb	r3, [r7, #7]
    return( type == MBEDTLS_PK_ECDSA );
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	2b04      	cmp	r3, #4
 800e91a:	bf0c      	ite	eq
 800e91c:	2301      	moveq	r3, #1
 800e91e:	2300      	movne	r3, #0
 800e920:	b2db      	uxtb	r3, r3
}
 800e922:	4618      	mov	r0, r3
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
	...

0800e930 <ecdsa_verify_wrap>:

static int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b088      	sub	sp, #32
 800e934:	af02      	add	r7, sp, #8
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	607a      	str	r2, [r7, #4]
 800e93a:	603b      	str	r3, [r7, #0]
 800e93c:	460b      	mov	r3, r1
 800e93e:	72fb      	strb	r3, [r7, #11]
    int ret;
    ((void) md_alg);

    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	6a3b      	ldr	r3, [r7, #32]
 800e946:	683a      	ldr	r2, [r7, #0]
 800e948:	6879      	ldr	r1, [r7, #4]
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f7fa fd09 	bl	8009362 <mbedtls_ecdsa_read_signature>
 800e950:	6178      	str	r0, [r7, #20]
                                hash, hash_len, sig, sig_len );

    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	f513 4f98 	cmn.w	r3, #19456	; 0x4c00
 800e958:	d101      	bne.n	800e95e <ecdsa_verify_wrap+0x2e>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 800e95a:	4b03      	ldr	r3, [pc, #12]	; (800e968 <ecdsa_verify_wrap+0x38>)
 800e95c:	e000      	b.n	800e960 <ecdsa_verify_wrap+0x30>

    return( ret );
 800e95e:	697b      	ldr	r3, [r7, #20]
}
 800e960:	4618      	mov	r0, r3
 800e962:	3718      	adds	r7, #24
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	ffffc700 	.word	0xffffc700

0800e96c <ecdsa_sign_wrap>:

static int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b088      	sub	sp, #32
 800e970:	af04      	add	r7, sp, #16
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	607a      	str	r2, [r7, #4]
 800e976:	603b      	str	r3, [r7, #0]
 800e978:	460b      	mov	r3, r1
 800e97a:	72fb      	strb	r3, [r7, #11]
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 800e97c:	7af9      	ldrb	r1, [r7, #11]
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	9303      	str	r3, [sp, #12]
 800e982:	6a3b      	ldr	r3, [r7, #32]
 800e984:	9302      	str	r3, [sp, #8]
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f7fa fcc8 	bl	8009328 <mbedtls_ecdsa_write_signature>
 800e998:	4603      	mov	r3, r0
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <ecdsa_alloc_wrap>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 800e9a8:	21ac      	movs	r1, #172	; 0xac
 800e9aa:	2001      	movs	r0, #1
 800e9ac:	f002 ff18 	bl	80117e0 <calloc>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d002      	beq.n	800e9c0 <ecdsa_alloc_wrap+0x1e>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7fa fd99 	bl	80094f2 <mbedtls_ecdsa_init>

    return( ctx );
 800e9c0:	687b      	ldr	r3, [r7, #4]
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}

0800e9ca <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 800e9ca:	b580      	push	{r7, lr}
 800e9cc:	b082      	sub	sp, #8
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7fa fd98 	bl	8009508 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f002 ff33 	bl	8011844 <free>
}
 800e9de:	bf00      	nop
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
	...

0800e9e8 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 800e9f2:	4b05      	ldr	r3, [pc, #20]	; (800ea08 <mbedtls_platform_zeroize+0x20>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	4798      	blx	r3
}
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	20000010 	.word	0x20000010

0800ea0c <mbedtls_sha512_init>:
    (b)[(i) + 7] = (unsigned char) ( (n)       );       \
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 800ea14:	22d8      	movs	r2, #216	; 0xd8
 800ea16:	2100      	movs	r1, #0
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f002 ff29 	bl	8011870 <memset>
}
 800ea1e:	bf00      	nop
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <mbedtls_sha512_free>:

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b082      	sub	sp, #8
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d004      	beq.n	800ea3e <mbedtls_sha512_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 800ea34:	21d8      	movs	r1, #216	; 0xd8
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff ffd6 	bl	800e9e8 <mbedtls_platform_zeroize>
 800ea3c:	e000      	b.n	800ea40 <mbedtls_sha512_free+0x1a>
        return;
 800ea3e:	bf00      	nop
}
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
	...

0800ea48 <mbedtls_sha512_starts_ret>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 800ea52:	6879      	ldr	r1, [r7, #4]
 800ea54:	f04f 0200 	mov.w	r2, #0
 800ea58:	f04f 0300 	mov.w	r3, #0
 800ea5c:	e9c1 2300 	strd	r2, r3, [r1]
    ctx->total[1] = 0;
 800ea60:	6879      	ldr	r1, [r7, #4]
 800ea62:	f04f 0200 	mov.w	r2, #0
 800ea66:	f04f 0300 	mov.w	r3, #0
 800ea6a:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if( is384 == 0 )
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d130      	bne.n	800ead6 <mbedtls_sha512_starts_ret+0x8e>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 800ea74:	6879      	ldr	r1, [r7, #4]
 800ea76:	a336      	add	r3, pc, #216	; (adr r3, 800eb50 <mbedtls_sha512_starts_ret+0x108>)
 800ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 800ea80:	6879      	ldr	r1, [r7, #4]
 800ea82:	a335      	add	r3, pc, #212	; (adr r3, 800eb58 <mbedtls_sha512_starts_ret+0x110>)
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 800ea8c:	6879      	ldr	r1, [r7, #4]
 800ea8e:	a334      	add	r3, pc, #208	; (adr r3, 800eb60 <mbedtls_sha512_starts_ret+0x118>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	a333      	add	r3, pc, #204	; (adr r3, 800eb68 <mbedtls_sha512_starts_ret+0x120>)
 800ea9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 800eaa4:	6879      	ldr	r1, [r7, #4]
 800eaa6:	a332      	add	r3, pc, #200	; (adr r3, 800eb70 <mbedtls_sha512_starts_ret+0x128>)
 800eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 800eab0:	6879      	ldr	r1, [r7, #4]
 800eab2:	a331      	add	r3, pc, #196	; (adr r3, 800eb78 <mbedtls_sha512_starts_ret+0x130>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 800eabc:	6879      	ldr	r1, [r7, #4]
 800eabe:	a330      	add	r3, pc, #192	; (adr r3, 800eb80 <mbedtls_sha512_starts_ret+0x138>)
 800eac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 800eac8:	6879      	ldr	r1, [r7, #4]
 800eaca:	a32f      	add	r3, pc, #188	; (adr r3, 800eb88 <mbedtls_sha512_starts_ret+0x140>)
 800eacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 800ead4:	e02f      	b.n	800eb36 <mbedtls_sha512_starts_ret+0xee>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 800ead6:	6879      	ldr	r1, [r7, #4]
 800ead8:	a32d      	add	r3, pc, #180	; (adr r3, 800eb90 <mbedtls_sha512_starts_ret+0x148>)
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 800eae2:	6879      	ldr	r1, [r7, #4]
 800eae4:	a32c      	add	r3, pc, #176	; (adr r3, 800eb98 <mbedtls_sha512_starts_ret+0x150>)
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 800eaee:	6879      	ldr	r1, [r7, #4]
 800eaf0:	a32b      	add	r3, pc, #172	; (adr r3, 800eba0 <mbedtls_sha512_starts_ret+0x158>)
 800eaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf6:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 800eafa:	6879      	ldr	r1, [r7, #4]
 800eafc:	a32a      	add	r3, pc, #168	; (adr r3, 800eba8 <mbedtls_sha512_starts_ret+0x160>)
 800eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb02:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 800eb06:	6879      	ldr	r1, [r7, #4]
 800eb08:	a329      	add	r3, pc, #164	; (adr r3, 800ebb0 <mbedtls_sha512_starts_ret+0x168>)
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 800eb12:	6879      	ldr	r1, [r7, #4]
 800eb14:	a328      	add	r3, pc, #160	; (adr r3, 800ebb8 <mbedtls_sha512_starts_ret+0x170>)
 800eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 800eb1e:	6879      	ldr	r1, [r7, #4]
 800eb20:	a327      	add	r3, pc, #156	; (adr r3, 800ebc0 <mbedtls_sha512_starts_ret+0x178>)
 800eb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb26:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 800eb2a:	6879      	ldr	r1, [r7, #4]
 800eb2c:	a326      	add	r3, pc, #152	; (adr r3, 800ebc8 <mbedtls_sha512_starts_ret+0x180>)
 800eb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb32:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    }

    ctx->is384 = is384;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    return( 0 );
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	370c      	adds	r7, #12
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr
 800eb4c:	f3af 8000 	nop.w
 800eb50:	f3bcc908 	.word	0xf3bcc908
 800eb54:	6a09e667 	.word	0x6a09e667
 800eb58:	84caa73b 	.word	0x84caa73b
 800eb5c:	bb67ae85 	.word	0xbb67ae85
 800eb60:	fe94f82b 	.word	0xfe94f82b
 800eb64:	3c6ef372 	.word	0x3c6ef372
 800eb68:	5f1d36f1 	.word	0x5f1d36f1
 800eb6c:	a54ff53a 	.word	0xa54ff53a
 800eb70:	ade682d1 	.word	0xade682d1
 800eb74:	510e527f 	.word	0x510e527f
 800eb78:	2b3e6c1f 	.word	0x2b3e6c1f
 800eb7c:	9b05688c 	.word	0x9b05688c
 800eb80:	fb41bd6b 	.word	0xfb41bd6b
 800eb84:	1f83d9ab 	.word	0x1f83d9ab
 800eb88:	137e2179 	.word	0x137e2179
 800eb8c:	5be0cd19 	.word	0x5be0cd19
 800eb90:	c1059ed8 	.word	0xc1059ed8
 800eb94:	cbbb9d5d 	.word	0xcbbb9d5d
 800eb98:	367cd507 	.word	0x367cd507
 800eb9c:	629a292a 	.word	0x629a292a
 800eba0:	3070dd17 	.word	0x3070dd17
 800eba4:	9159015a 	.word	0x9159015a
 800eba8:	f70e5939 	.word	0xf70e5939
 800ebac:	152fecd8 	.word	0x152fecd8
 800ebb0:	ffc00b31 	.word	0xffc00b31
 800ebb4:	67332667 	.word	0x67332667
 800ebb8:	68581511 	.word	0x68581511
 800ebbc:	8eb44a87 	.word	0x8eb44a87
 800ebc0:	64f98fa7 	.word	0x64f98fa7
 800ebc4:	db0c2e0d 	.word	0xdb0c2e0d
 800ebc8:	befa4fa4 	.word	0xbefa4fa4
 800ebcc:	47b5481d 	.word	0x47b5481d

0800ebd0 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 800ebd0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ebd4:	f5ad 6d1e 	sub.w	sp, sp, #2528	; 0x9e0
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ebde:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800ebe2:	6018      	str	r0, [r3, #0]
 800ebe4:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ebe8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ebec:	6019      	str	r1, [r3, #0]
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 800ebee:	2300      	movs	r3, #0
 800ebf0:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 800ebf4:	e11f      	b.n	800ee36 <mbedtls_internal_sha512_process+0x266>
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 800ebf6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ebfa:	00db      	lsls	r3, r3, #3
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ec02:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4413      	add	r3, r2
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 800ec14:	f8c7 26d4 	str.w	r2, [r7, #1748]	; 0x6d4
 800ec18:	f04f 0000 	mov.w	r0, #0
 800ec1c:	f04f 0100 	mov.w	r1, #0
 800ec20:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 800ec24:	0619      	lsls	r1, r3, #24
 800ec26:	2000      	movs	r0, #0
 800ec28:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ec2c:	00db      	lsls	r3, r3, #3
 800ec2e:	1c5a      	adds	r2, r3, #1
 800ec30:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ec34:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2200      	movs	r2, #0
 800ec42:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 800ec46:	f8c7 26cc 	str.w	r2, [r7, #1740]	; 0x6cc
 800ec4a:	f04f 0200 	mov.w	r2, #0
 800ec4e:	f04f 0300 	mov.w	r3, #0
 800ec52:	f8d7 66c8 	ldr.w	r6, [r7, #1736]	; 0x6c8
 800ec56:	0433      	lsls	r3, r6, #16
 800ec58:	2200      	movs	r2, #0
 800ec5a:	ea40 0602 	orr.w	r6, r0, r2
 800ec5e:	f8c7 66e8 	str.w	r6, [r7, #1768]	; 0x6e8
 800ec62:	430b      	orrs	r3, r1
 800ec64:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 800ec68:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ec6c:	00db      	lsls	r3, r3, #3
 800ec6e:	1c9a      	adds	r2, r3, #2
 800ec70:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ec74:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	2200      	movs	r2, #0
 800ec82:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
 800ec86:	f8c7 26c4 	str.w	r2, [r7, #1732]	; 0x6c4
 800ec8a:	f04f 0200 	mov.w	r2, #0
 800ec8e:	f04f 0300 	mov.w	r3, #0
 800ec92:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 800ec96:	020b      	lsls	r3, r1, #8
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 800ec9e:	4311      	orrs	r1, r2
 800eca0:	f8c7 16e0 	str.w	r1, [r7, #1760]	; 0x6e0
 800eca4:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 800eca8:	430b      	orrs	r3, r1
 800ecaa:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 800ecae:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ecb2:	00db      	lsls	r3, r3, #3
 800ecb4:	1cda      	adds	r2, r3, #3
 800ecb6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ecba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
 800eccc:	f8c7 26bc 	str.w	r2, [r7, #1724]	; 0x6bc
 800ecd0:	f04f 0200 	mov.w	r2, #0
 800ecd4:	f04f 0300 	mov.w	r3, #0
 800ecd8:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 800ecdc:	000b      	movs	r3, r1
 800ecde:	2200      	movs	r2, #0
 800ece0:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 800ece4:	4311      	orrs	r1, r2
 800ece6:	f8c7 16d8 	str.w	r1, [r7, #1752]	; 0x6d8
 800ecea:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 800ecee:	430b      	orrs	r3, r1
 800ecf0:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 800ecf4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ecf8:	00db      	lsls	r3, r3, #3
 800ecfa:	1d1a      	adds	r2, r3, #4
 800ecfc:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ed00:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4413      	add	r3, r2
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
 800ed12:	f8c7 26b4 	str.w	r2, [r7, #1716]	; 0x6b4
 800ed16:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800ed1a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ed1e:	460b      	mov	r3, r1
 800ed20:	0a1b      	lsrs	r3, r3, #8
 800ed22:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 800ed26:	460b      	mov	r3, r1
 800ed28:	061b      	lsls	r3, r3, #24
 800ed2a:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
 800ed2e:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	; 0x6d8
 800ed32:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
 800ed36:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ed3a:	4602      	mov	r2, r0
 800ed3c:	ea43 0a02 	orr.w	sl, r3, r2
 800ed40:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	; 0x6dc
 800ed44:	460a      	mov	r2, r1
 800ed46:	ea43 0b02 	orr.w	fp, r3, r2
 800ed4a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	1d5a      	adds	r2, r3, #5
 800ed52:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ed56:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	2200      	movs	r2, #0
 800ed64:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
 800ed68:	f8c7 26fc 	str.w	r2, [r7, #1788]	; 0x6fc
 800ed6c:	f04f 0200 	mov.w	r2, #0
 800ed70:	f04f 0300 	mov.w	r3, #0
 800ed74:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 800ed78:	040b      	lsls	r3, r1, #16
 800ed7a:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 800ed7e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800ed82:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 800ed86:	040a      	lsls	r2, r1, #16
 800ed88:	ea4a 0802 	orr.w	r8, sl, r2
 800ed8c:	ea4b 0903 	orr.w	r9, fp, r3
 800ed90:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ed94:	00db      	lsls	r3, r3, #3
 800ed96:	1d9a      	adds	r2, r3, #6
 800ed98:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ed9c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4413      	add	r3, r2
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2200      	movs	r2, #0
 800edaa:	f8c7 36f0 	str.w	r3, [r7, #1776]	; 0x6f0
 800edae:	f8c7 26f4 	str.w	r2, [r7, #1780]	; 0x6f4
 800edb2:	f04f 0200 	mov.w	r2, #0
 800edb6:	f04f 0300 	mov.w	r3, #0
 800edba:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 800edbe:	020b      	lsls	r3, r1, #8
 800edc0:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 800edc4:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800edc8:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 800edcc:	020a      	lsls	r2, r1, #8
 800edce:	ea48 0402 	orr.w	r4, r8, r2
 800edd2:	ea49 0503 	orr.w	r5, r9, r3
 800edd6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800edda:	00db      	lsls	r3, r3, #3
 800eddc:	1dda      	adds	r2, r3, #7
 800edde:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ede2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4413      	add	r3, r2
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	b2db      	uxtb	r3, r3
 800edee:	2200      	movs	r2, #0
 800edf0:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
 800edf4:	f8c7 26a4 	str.w	r2, [r7, #1700]	; 0x6a4
 800edf8:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800edfc:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ee00:	460b      	mov	r3, r1
 800ee02:	4323      	orrs	r3, r4
 800ee04:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
 800ee08:	4613      	mov	r3, r2
 800ee0a:	432b      	orrs	r3, r5
 800ee0c:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 800ee10:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ee14:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800ee18:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ee1c:	00db      	lsls	r3, r3, #3
 800ee1e:	4413      	add	r3, r2
 800ee20:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800ee24:	e9d2 1200 	ldrd	r1, r2, [r2]
 800ee28:	e9c3 1200 	strd	r1, r2, [r3]
    for( i = 0; i < 16; i++ )
 800ee2c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ee30:	3301      	adds	r3, #1
 800ee32:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 800ee36:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ee3a:	2b0f      	cmp	r3, #15
 800ee3c:	f77f aedb 	ble.w	800ebf6 <mbedtls_internal_sha512_process+0x26>
    }

    for( ; i < 80; i++ )
 800ee40:	e10e      	b.n	800f060 <mbedtls_internal_sha512_process+0x490>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800ee42:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ee46:	1e99      	subs	r1, r3, #2
 800ee48:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ee4c:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800ee50:	00cb      	lsls	r3, r1, #3
 800ee52:	4413      	add	r3, r2
 800ee54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee58:	0358      	lsls	r0, r3, #13
 800ee5a:	0cd1      	lsrs	r1, r2, #19
 800ee5c:	4301      	orrs	r1, r0
 800ee5e:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 800ee62:	0351      	lsls	r1, r2, #13
 800ee64:	0cdb      	lsrs	r3, r3, #19
 800ee66:	430b      	orrs	r3, r1
 800ee68:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 800ee6c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ee70:	1e99      	subs	r1, r3, #2
 800ee72:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ee76:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800ee7a:	00cb      	lsls	r3, r1, #3
 800ee7c:	4413      	add	r3, r2
 800ee7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee82:	0f50      	lsrs	r0, r2, #29
 800ee84:	00d9      	lsls	r1, r3, #3
 800ee86:	4301      	orrs	r1, r0
 800ee88:	f8c7 168c 	str.w	r1, [r7, #1676]	; 0x68c
 800ee8c:	0f59      	lsrs	r1, r3, #29
 800ee8e:	00d3      	lsls	r3, r2, #3
 800ee90:	430b      	orrs	r3, r1
 800ee92:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
 800ee96:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800ee9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ee9e:	4623      	mov	r3, r4
 800eea0:	f507 62d1 	add.w	r2, r7, #1672	; 0x688
 800eea4:	e9d2 0100 	ldrd	r0, r1, [r2]
 800eea8:	4602      	mov	r2, r0
 800eeaa:	4053      	eors	r3, r2
 800eeac:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 800eeb0:	462b      	mov	r3, r5
 800eeb2:	460a      	mov	r2, r1
 800eeb4:	4053      	eors	r3, r2
 800eeb6:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800eeba:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800eebe:	1e99      	subs	r1, r3, #2
 800eec0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800eec4:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800eec8:	00cb      	lsls	r3, r1, #3
 800eeca:	4413      	add	r3, r2
 800eecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed0:	f04f 0000 	mov.w	r0, #0
 800eed4:	f04f 0100 	mov.w	r1, #0
 800eed8:	0990      	lsrs	r0, r2, #6
 800eeda:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800eede:	0999      	lsrs	r1, r3, #6
 800eee0:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800eee4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800eee8:	4623      	mov	r3, r4
 800eeea:	4043      	eors	r3, r0
 800eeec:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 800eef0:	462b      	mov	r3, r5
 800eef2:	404b      	eors	r3, r1
 800eef4:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800eef8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800eefc:	1fd9      	subs	r1, r3, #7
 800eefe:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ef02:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800ef06:	00cb      	lsls	r3, r1, #3
 800ef08:	4413      	add	r3, r2
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 800ef12:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ef16:	4621      	mov	r1, r4
 800ef18:	1889      	adds	r1, r1, r2
 800ef1a:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 800ef1e:	4629      	mov	r1, r5
 800ef20:	eb41 0303 	adc.w	r3, r1, r3
 800ef24:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
               S0(W[i - 15]) + W[i - 16];
 800ef28:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ef2c:	f1a3 010f 	sub.w	r1, r3, #15
 800ef30:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ef34:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800ef38:	00cb      	lsls	r3, r1, #3
 800ef3a:	4413      	add	r3, r2
 800ef3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef40:	07d8      	lsls	r0, r3, #31
 800ef42:	0851      	lsrs	r1, r2, #1
 800ef44:	4301      	orrs	r1, r0
 800ef46:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 800ef4a:	07d1      	lsls	r1, r2, #31
 800ef4c:	085b      	lsrs	r3, r3, #1
 800ef4e:	430b      	orrs	r3, r1
 800ef50:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 800ef54:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800ef58:	f1a3 010f 	sub.w	r1, r3, #15
 800ef5c:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800ef60:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800ef64:	00cb      	lsls	r3, r1, #3
 800ef66:	4413      	add	r3, r2
 800ef68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6c:	0618      	lsls	r0, r3, #24
 800ef6e:	0a11      	lsrs	r1, r2, #8
 800ef70:	4301      	orrs	r1, r0
 800ef72:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 800ef76:	0611      	lsls	r1, r2, #24
 800ef78:	0a1b      	lsrs	r3, r3, #8
 800ef7a:	430b      	orrs	r3, r1
 800ef7c:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 800ef80:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800ef84:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef88:	4623      	mov	r3, r4
 800ef8a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800ef8e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ef92:	4602      	mov	r2, r0
 800ef94:	4053      	eors	r3, r2
 800ef96:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 800ef9a:	462b      	mov	r3, r5
 800ef9c:	460a      	mov	r2, r1
 800ef9e:	4053      	eors	r3, r2
 800efa0:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800efa4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800efa8:	f1a3 010f 	sub.w	r1, r3, #15
 800efac:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800efb0:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800efb4:	00cb      	lsls	r3, r1, #3
 800efb6:	4413      	add	r3, r2
 800efb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbc:	f04f 0000 	mov.w	r0, #0
 800efc0:	f04f 0100 	mov.w	r1, #0
 800efc4:	09d0      	lsrs	r0, r2, #7
 800efc6:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800efca:	09d9      	lsrs	r1, r3, #7
 800efcc:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800efd0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800efd4:	4623      	mov	r3, r4
 800efd6:	4043      	eors	r3, r0
 800efd8:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 800efdc:	462b      	mov	r3, r5
 800efde:	404b      	eors	r3, r1
 800efe0:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800efe4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800efe8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800efec:	4623      	mov	r3, r4
 800efee:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800eff2:	e9d2 0100 	ldrd	r0, r1, [r2]
 800eff6:	4602      	mov	r2, r0
 800eff8:	189b      	adds	r3, r3, r2
 800effa:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 800effe:	462b      	mov	r3, r5
 800f000:	460a      	mov	r2, r1
 800f002:	4153      	adcs	r3, r2
 800f004:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
               S0(W[i - 15]) + W[i - 16];
 800f008:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f00c:	f1a3 0110 	sub.w	r1, r3, #16
 800f010:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f014:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800f018:	00cb      	lsls	r3, r1, #3
 800f01a:	4413      	add	r3, r2
 800f01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f020:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 800f024:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f028:	4621      	mov	r1, r4
 800f02a:	1889      	adds	r1, r1, r2
 800f02c:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 800f030:	4629      	mov	r1, r5
 800f032:	eb41 0303 	adc.w	r3, r1, r3
 800f036:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800f03a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f03e:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800f042:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f046:	00db      	lsls	r3, r3, #3
 800f048:	4413      	add	r3, r2
 800f04a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800f04e:	e9d2 1200 	ldrd	r1, r2, [r2]
 800f052:	e9c3 1200 	strd	r1, r2, [r3]
    for( ; i < 80; i++ )
 800f056:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f05a:	3301      	adds	r3, #1
 800f05c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 800f060:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f064:	2b4f      	cmp	r3, #79	; 0x4f
 800f066:	f77f aeec 	ble.w	800ee42 <mbedtls_internal_sha512_process+0x272>
    }

    A = ctx->state[0];
 800f06a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f06e:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f078:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800f07c:	e9c1 2300 	strd	r2, r3, [r1]
    B = ctx->state[1];
 800f080:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f084:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f08e:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 800f092:	e9c1 2300 	strd	r2, r3, [r1]
    C = ctx->state[2];
 800f096:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f09a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0a4:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800f0a8:	e9c1 2300 	strd	r2, r3, [r1]
    D = ctx->state[3];
 800f0ac:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f0b0:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800f0ba:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 800f0be:	e9c1 2300 	strd	r2, r3, [r1]
    E = ctx->state[4];
 800f0c2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f0c6:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800f0d0:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800f0d4:	e9c1 2300 	strd	r2, r3, [r1]
    F = ctx->state[5];
 800f0d8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f0dc:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f0e6:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800f0ea:	e9c1 2300 	strd	r2, r3, [r1]
    G = ctx->state[6];
 800f0ee:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f0f2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800f0fc:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 800f100:	e9c1 2300 	strd	r2, r3, [r1]
    H = ctx->state[7];
 800f104:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f108:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800f112:	f607 1198 	addw	r1, r7, #2456	; 0x998
 800f116:	e9c1 2300 	strd	r2, r3, [r1]
    i = 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 800f120:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 800f124:	049a      	lsls	r2, r3, #18
 800f126:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 800f12a:	0b9b      	lsrs	r3, r3, #14
 800f12c:	4313      	orrs	r3, r2
 800f12e:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 800f132:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 800f136:	049a      	lsls	r2, r3, #18
 800f138:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 800f13c:	0b9b      	lsrs	r3, r3, #14
 800f13e:	4313      	orrs	r3, r2
 800f140:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 800f144:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 800f148:	039a      	lsls	r2, r3, #14
 800f14a:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 800f14e:	0c9b      	lsrs	r3, r3, #18
 800f150:	4313      	orrs	r3, r2
 800f152:	f8c7 3630 	str.w	r3, [r7, #1584]	; 0x630
 800f156:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 800f15a:	039a      	lsls	r2, r3, #14
 800f15c:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 800f160:	0c9b      	lsrs	r3, r3, #18
 800f162:	4313      	orrs	r3, r2
 800f164:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 800f168:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800f16c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f170:	4623      	mov	r3, r4
 800f172:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800f176:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f17a:	4602      	mov	r2, r0
 800f17c:	4053      	eors	r3, r2
 800f17e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800f182:	462b      	mov	r3, r5
 800f184:	460a      	mov	r2, r1
 800f186:	4053      	eors	r3, r2
 800f188:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800f18c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 800f190:	0a5a      	lsrs	r2, r3, #9
 800f192:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 800f196:	05db      	lsls	r3, r3, #23
 800f198:	4313      	orrs	r3, r2
 800f19a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 800f19e:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 800f1a2:	0a5a      	lsrs	r2, r3, #9
 800f1a4:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 800f1a8:	05db      	lsls	r3, r3, #23
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800f1b0:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800f1b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f1b8:	4623      	mov	r3, r4
 800f1ba:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 800f1be:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	4053      	eors	r3, r2
 800f1c6:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800f1ca:	462b      	mov	r3, r5
 800f1cc:	460a      	mov	r2, r1
 800f1ce:	4053      	eors	r3, r2
 800f1d0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800f1d4:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800f1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1dc:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800f1e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f1e4:	4621      	mov	r1, r4
 800f1e6:	1889      	adds	r1, r1, r2
 800f1e8:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	eb41 0303 	adc.w	r3, r1, r3
 800f1f2:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800f1f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f1fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1fe:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	ea80 0402 	eor.w	r4, r0, r2
 800f20a:	f8c7 4608 	str.w	r4, [r7, #1544]	; 0x608
 800f20e:	404b      	eors	r3, r1
 800f210:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800f214:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800f218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21c:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 800f220:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f224:	4621      	mov	r1, r4
 800f226:	4011      	ands	r1, r2
 800f228:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 800f22c:	4629      	mov	r1, r5
 800f22e:	400b      	ands	r3, r1
 800f230:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800f234:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800f238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23c:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 800f240:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f244:	4621      	mov	r1, r4
 800f246:	4051      	eors	r1, r2
 800f248:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 800f24c:	4629      	mov	r1, r5
 800f24e:	404b      	eors	r3, r1
 800f250:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800f254:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800f258:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f25c:	4623      	mov	r3, r4
 800f25e:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800f262:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f266:	4602      	mov	r2, r0
 800f268:	189b      	adds	r3, r3, r2
 800f26a:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 800f26e:	462b      	mov	r3, r5
 800f270:	460a      	mov	r2, r1
 800f272:	4153      	adcs	r3, r2
 800f274:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800f278:	4afc      	ldr	r2, [pc, #1008]	; (800f66c <mbedtls_internal_sha512_process+0xa9c>)
 800f27a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f27e:	00db      	lsls	r3, r3, #3
 800f280:	4413      	add	r3, r2
 800f282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f286:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 800f28a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f28e:	4621      	mov	r1, r4
 800f290:	1889      	adds	r1, r1, r2
 800f292:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 800f296:	4629      	mov	r1, r5
 800f298:	eb41 0303 	adc.w	r3, r1, r3
 800f29c:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800f2a0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f2a4:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800f2a8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f2ac:	00db      	lsls	r3, r3, #3
 800f2ae:	4413      	add	r3, r2
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 800f2b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f2bc:	4621      	mov	r1, r4
 800f2be:	1889      	adds	r1, r1, r2
 800f2c0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	eb41 0303 	adc.w	r3, r1, r3
 800f2ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f2ce:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800f2d2:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 800f2d6:	e9c2 3400 	strd	r3, r4, [r2]
 800f2da:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800f2de:	011a      	lsls	r2, r3, #4
 800f2e0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800f2e4:	0f1b      	lsrs	r3, r3, #28
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800f2ec:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800f2f0:	011a      	lsls	r2, r3, #4
 800f2f2:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800f2f6:	0f1b      	lsrs	r3, r3, #28
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 800f2fe:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800f302:	089a      	lsrs	r2, r3, #2
 800f304:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800f308:	079b      	lsls	r3, r3, #30
 800f30a:	4313      	orrs	r3, r2
 800f30c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800f310:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800f314:	089a      	lsrs	r2, r3, #2
 800f316:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800f31a:	079b      	lsls	r3, r3, #30
 800f31c:	4313      	orrs	r3, r2
 800f31e:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 800f322:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800f326:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f32a:	4623      	mov	r3, r4
 800f32c:	f507 62bb 	add.w	r2, r7, #1496	; 0x5d8
 800f330:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f334:	4602      	mov	r2, r0
 800f336:	4053      	eors	r3, r2
 800f338:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 800f33c:	462b      	mov	r3, r5
 800f33e:	460a      	mov	r2, r1
 800f340:	4053      	eors	r3, r2
 800f342:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800f346:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800f34a:	09da      	lsrs	r2, r3, #7
 800f34c:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800f350:	065b      	lsls	r3, r3, #25
 800f352:	4313      	orrs	r3, r2
 800f354:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800f358:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800f35c:	09da      	lsrs	r2, r3, #7
 800f35e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800f362:	065b      	lsls	r3, r3, #25
 800f364:	4313      	orrs	r3, r2
 800f366:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 800f36a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800f36e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f372:	4623      	mov	r3, r4
 800f374:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800f378:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f37c:	4602      	mov	r2, r0
 800f37e:	4053      	eors	r3, r2
 800f380:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800f384:	462b      	mov	r3, r5
 800f386:	460a      	mov	r2, r1
 800f388:	4053      	eors	r3, r2
 800f38a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800f38e:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800f392:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f396:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39e:	ea00 0402 	and.w	r4, r0, r2
 800f3a2:	f8c7 45b8 	str.w	r4, [r7, #1464]	; 0x5b8
 800f3a6:	400b      	ands	r3, r1
 800f3a8:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800f3ac:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800f3b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3b4:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800f3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3bc:	ea40 0402 	orr.w	r4, r0, r2
 800f3c0:	f8c7 45b0 	str.w	r4, [r7, #1456]	; 0x5b0
 800f3c4:	430b      	orrs	r3, r1
 800f3c6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800f3ca:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800f3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d2:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800f3d6:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4011      	ands	r1, r2
 800f3de:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	400b      	ands	r3, r1
 800f3e6:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800f3ea:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800f3ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f3f2:	4623      	mov	r3, r4
 800f3f4:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 800f3f8:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	4313      	orrs	r3, r2
 800f400:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800f404:	462b      	mov	r3, r5
 800f406:	460a      	mov	r2, r1
 800f408:	4313      	orrs	r3, r2
 800f40a:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800f40e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800f412:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f416:	4623      	mov	r3, r4
 800f418:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 800f41c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f420:	4602      	mov	r2, r0
 800f422:	189b      	adds	r3, r3, r2
 800f424:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f428:	462b      	mov	r3, r5
 800f42a:	460a      	mov	r2, r1
 800f42c:	4153      	adcs	r3, r2
 800f42e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f432:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800f436:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800f43a:	e9c2 3400 	strd	r3, r4, [r2]
 800f43e:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800f442:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f446:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44e:	1884      	adds	r4, r0, r2
 800f450:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800f454:	eb41 0303 	adc.w	r3, r1, r3
 800f458:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f45c:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f460:	f607 12b8 	addw	r2, r7, #2488	; 0x9b8
 800f464:	e9c2 3400 	strd	r3, r4, [r2]
 800f468:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f46c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f470:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800f474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f478:	1884      	adds	r4, r0, r2
 800f47a:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800f47e:	eb41 0303 	adc.w	r3, r1, r3
 800f482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f486:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f48a:	f607 1298 	addw	r2, r7, #2456	; 0x998
 800f48e:	e9c2 3400 	strd	r3, r4, [r2]
 800f492:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f496:	3301      	adds	r3, #1
 800f498:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 800f49c:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 800f4a0:	049a      	lsls	r2, r3, #18
 800f4a2:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 800f4a6:	0b9b      	lsrs	r3, r3, #14
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800f4ae:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 800f4b2:	049a      	lsls	r2, r3, #18
 800f4b4:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 800f4b8:	0b9b      	lsrs	r3, r3, #14
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800f4c0:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 800f4c4:	039a      	lsls	r2, r3, #14
 800f4c6:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 800f4ca:	0c9b      	lsrs	r3, r3, #18
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800f4d2:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 800f4d6:	039a      	lsls	r2, r3, #14
 800f4d8:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 800f4dc:	0c9b      	lsrs	r3, r3, #18
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800f4e4:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800f4e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f4ec:	4623      	mov	r3, r4
 800f4ee:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800f4f2:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	4053      	eors	r3, r2
 800f4fa:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 800f4fe:	462b      	mov	r3, r5
 800f500:	460a      	mov	r2, r1
 800f502:	4053      	eors	r3, r2
 800f504:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800f508:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 800f50c:	0a5a      	lsrs	r2, r3, #9
 800f50e:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 800f512:	05db      	lsls	r3, r3, #23
 800f514:	4313      	orrs	r3, r2
 800f516:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800f51a:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 800f51e:	0a5a      	lsrs	r2, r3, #9
 800f520:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 800f524:	05db      	lsls	r3, r3, #23
 800f526:	4313      	orrs	r3, r2
 800f528:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 800f52c:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800f530:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f534:	4623      	mov	r3, r4
 800f536:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800f53a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f53e:	4602      	mov	r2, r0
 800f540:	4053      	eors	r3, r2
 800f542:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 800f546:	462b      	mov	r3, r5
 800f548:	460a      	mov	r2, r1
 800f54a:	4053      	eors	r3, r2
 800f54c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800f550:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800f554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f558:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 800f55c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f560:	4621      	mov	r1, r4
 800f562:	1889      	adds	r1, r1, r2
 800f564:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 800f568:	4629      	mov	r1, r5
 800f56a:	eb41 0303 	adc.w	r3, r1, r3
 800f56e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800f572:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800f576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f57a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f582:	ea80 0402 	eor.w	r4, r0, r2
 800f586:	f8c7 4568 	str.w	r4, [r7, #1384]	; 0x568
 800f58a:	404b      	eors	r3, r1
 800f58c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800f590:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 800f59c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	4011      	ands	r1, r2
 800f5a4:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	400b      	ands	r3, r1
 800f5ac:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800f5b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 800f5bc:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f5c0:	4621      	mov	r1, r4
 800f5c2:	4051      	eors	r1, r2
 800f5c4:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	404b      	eors	r3, r1
 800f5cc:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800f5d0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800f5d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f5d8:	4623      	mov	r3, r4
 800f5da:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800f5de:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	189b      	adds	r3, r3, r2
 800f5e6:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800f5ea:	462b      	mov	r3, r5
 800f5ec:	460a      	mov	r2, r1
 800f5ee:	4153      	adcs	r3, r2
 800f5f0:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800f5f4:	4a1d      	ldr	r2, [pc, #116]	; (800f66c <mbedtls_internal_sha512_process+0xa9c>)
 800f5f6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f5fa:	00db      	lsls	r3, r3, #3
 800f5fc:	4413      	add	r3, r2
 800f5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f602:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 800f606:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f60a:	4621      	mov	r1, r4
 800f60c:	1889      	adds	r1, r1, r2
 800f60e:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 800f612:	4629      	mov	r1, r5
 800f614:	eb41 0303 	adc.w	r3, r1, r3
 800f618:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800f61c:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f620:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800f624:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f628:	00db      	lsls	r3, r3, #3
 800f62a:	4413      	add	r3, r2
 800f62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f630:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 800f634:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f638:	4621      	mov	r1, r4
 800f63a:	1889      	adds	r1, r1, r2
 800f63c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800f640:	4629      	mov	r1, r5
 800f642:	eb41 0303 	adc.w	r3, r1, r3
 800f646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f64a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f64e:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 800f652:	e9c2 3400 	strd	r3, r4, [r2]
 800f656:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 800f65a:	011a      	lsls	r2, r3, #4
 800f65c:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800f660:	0f1b      	lsrs	r3, r3, #28
 800f662:	4313      	orrs	r3, r2
 800f664:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800f668:	e002      	b.n	800f670 <mbedtls_internal_sha512_process+0xaa0>
 800f66a:	bf00      	nop
 800f66c:	08014d58 	.word	0x08014d58
 800f670:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800f674:	011a      	lsls	r2, r3, #4
 800f676:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 800f67a:	0f1b      	lsrs	r3, r3, #28
 800f67c:	4313      	orrs	r3, r2
 800f67e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800f682:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800f686:	089a      	lsrs	r2, r3, #2
 800f688:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 800f68c:	079b      	lsls	r3, r3, #30
 800f68e:	4313      	orrs	r3, r2
 800f690:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800f694:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 800f698:	089a      	lsrs	r2, r3, #2
 800f69a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800f69e:	079b      	lsls	r3, r3, #30
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800f6a6:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800f6aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f6ae:	4623      	mov	r3, r4
 800f6b0:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800f6b4:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	4053      	eors	r3, r2
 800f6bc:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 800f6c0:	462b      	mov	r3, r5
 800f6c2:	460a      	mov	r2, r1
 800f6c4:	4053      	eors	r3, r2
 800f6c6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800f6ca:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800f6ce:	09da      	lsrs	r2, r3, #7
 800f6d0:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 800f6d4:	065b      	lsls	r3, r3, #25
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800f6dc:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 800f6e0:	09da      	lsrs	r2, r3, #7
 800f6e2:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800f6e6:	065b      	lsls	r3, r3, #25
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 800f6ee:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800f6f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f6f6:	4623      	mov	r3, r4
 800f6f8:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 800f6fc:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f700:	4602      	mov	r2, r0
 800f702:	4053      	eors	r3, r2
 800f704:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800f708:	462b      	mov	r3, r5
 800f70a:	460a      	mov	r2, r1
 800f70c:	4053      	eors	r3, r2
 800f70e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800f712:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800f716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f71a:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800f71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f722:	ea00 0402 	and.w	r4, r0, r2
 800f726:	f8c7 4518 	str.w	r4, [r7, #1304]	; 0x518
 800f72a:	400b      	ands	r3, r1
 800f72c:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800f730:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800f734:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f738:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800f73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f740:	ea40 0402 	orr.w	r4, r0, r2
 800f744:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
 800f748:	430b      	orrs	r3, r1
 800f74a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800f74e:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 800f75a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f75e:	4621      	mov	r1, r4
 800f760:	4011      	ands	r1, r2
 800f762:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 800f766:	4629      	mov	r1, r5
 800f768:	400b      	ands	r3, r1
 800f76a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800f76e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800f772:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f776:	4623      	mov	r3, r4
 800f778:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 800f77c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f780:	4602      	mov	r2, r0
 800f782:	4313      	orrs	r3, r2
 800f784:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 800f788:	462b      	mov	r3, r5
 800f78a:	460a      	mov	r2, r1
 800f78c:	4313      	orrs	r3, r2
 800f78e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800f792:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f796:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f79a:	4623      	mov	r3, r4
 800f79c:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800f7a0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	189b      	adds	r3, r3, r2
 800f7a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f7ac:	462b      	mov	r3, r5
 800f7ae:	460a      	mov	r2, r1
 800f7b0:	4153      	adcs	r3, r2
 800f7b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f7b6:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f7ba:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800f7be:	e9c2 3400 	strd	r3, r4, [r2]
 800f7c2:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800f7c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7ca:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d2:	1884      	adds	r4, r0, r2
 800f7d4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800f7d8:	eb41 0303 	adc.w	r3, r1, r3
 800f7dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f7e0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f7e4:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 800f7e8:	e9c2 3400 	strd	r3, r4, [r2]
 800f7ec:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f7f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7f4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	1884      	adds	r4, r0, r2
 800f7fe:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800f802:	eb41 0303 	adc.w	r3, r1, r3
 800f806:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f80a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800f80e:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 800f812:	e9c2 3400 	strd	r3, r4, [r2]
 800f816:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f81a:	3301      	adds	r3, #1
 800f81c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 800f820:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 800f824:	049a      	lsls	r2, r3, #18
 800f826:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 800f82a:	0b9b      	lsrs	r3, r3, #14
 800f82c:	4313      	orrs	r3, r2
 800f82e:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 800f832:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 800f836:	049a      	lsls	r2, r3, #18
 800f838:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 800f83c:	0b9b      	lsrs	r3, r3, #14
 800f83e:	4313      	orrs	r3, r2
 800f840:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800f844:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 800f848:	039a      	lsls	r2, r3, #14
 800f84a:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 800f84e:	0c9b      	lsrs	r3, r3, #18
 800f850:	4313      	orrs	r3, r2
 800f852:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 800f856:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 800f85a:	039a      	lsls	r2, r3, #14
 800f85c:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 800f860:	0c9b      	lsrs	r3, r3, #18
 800f862:	4313      	orrs	r3, r2
 800f864:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800f868:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f86c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f870:	4623      	mov	r3, r4
 800f872:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800f876:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f87a:	4602      	mov	r2, r0
 800f87c:	4053      	eors	r3, r2
 800f87e:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800f882:	462b      	mov	r3, r5
 800f884:	460a      	mov	r2, r1
 800f886:	4053      	eors	r3, r2
 800f888:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800f88c:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 800f890:	0a5a      	lsrs	r2, r3, #9
 800f892:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 800f896:	05db      	lsls	r3, r3, #23
 800f898:	4313      	orrs	r3, r2
 800f89a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800f89e:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 800f8a2:	0a5a      	lsrs	r2, r3, #9
 800f8a4:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 800f8a8:	05db      	lsls	r3, r3, #23
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 800f8b0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800f8b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f8b8:	4623      	mov	r3, r4
 800f8ba:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800f8be:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	4053      	eors	r3, r2
 800f8c6:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800f8ca:	462b      	mov	r3, r5
 800f8cc:	460a      	mov	r2, r1
 800f8ce:	4053      	eors	r3, r2
 800f8d0:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800f8d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8dc:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 800f8e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f8e4:	4621      	mov	r1, r4
 800f8e6:	1889      	adds	r1, r1, r2
 800f8e8:	f8c7 14d0 	str.w	r1, [r7, #1232]	; 0x4d0
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	eb41 0303 	adc.w	r3, r1, r3
 800f8f2:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800f8f6:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800f8fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8fe:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800f902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f906:	ea80 0402 	eor.w	r4, r0, r2
 800f90a:	f8c7 44c8 	str.w	r4, [r7, #1224]	; 0x4c8
 800f90e:	404b      	eors	r3, r1
 800f910:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800f914:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800f918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91c:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 800f920:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f924:	4621      	mov	r1, r4
 800f926:	4011      	ands	r1, r2
 800f928:	f8c7 14c0 	str.w	r1, [r7, #1216]	; 0x4c0
 800f92c:	4629      	mov	r1, r5
 800f92e:	400b      	ands	r3, r1
 800f930:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800f934:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93c:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 800f940:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f944:	4621      	mov	r1, r4
 800f946:	4051      	eors	r1, r2
 800f948:	f8c7 14b8 	str.w	r1, [r7, #1208]	; 0x4b8
 800f94c:	4629      	mov	r1, r5
 800f94e:	404b      	eors	r3, r1
 800f950:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800f954:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800f958:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f95c:	4623      	mov	r3, r4
 800f95e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800f962:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f966:	4602      	mov	r2, r0
 800f968:	189b      	adds	r3, r3, r2
 800f96a:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 800f96e:	462b      	mov	r3, r5
 800f970:	460a      	mov	r2, r1
 800f972:	4153      	adcs	r3, r2
 800f974:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800f978:	4afc      	ldr	r2, [pc, #1008]	; (800fd6c <mbedtls_internal_sha512_process+0x119c>)
 800f97a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f97e:	00db      	lsls	r3, r3, #3
 800f980:	4413      	add	r3, r2
 800f982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f986:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 800f98a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f98e:	4621      	mov	r1, r4
 800f990:	1889      	adds	r1, r1, r2
 800f992:	f8c7 14a8 	str.w	r1, [r7, #1192]	; 0x4a8
 800f996:	4629      	mov	r1, r5
 800f998:	eb41 0303 	adc.w	r3, r1, r3
 800f99c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800f9a0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f9a4:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800f9a8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800f9ac:	00db      	lsls	r3, r3, #3
 800f9ae:	4413      	add	r3, r2
 800f9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b4:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 800f9b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f9bc:	4621      	mov	r1, r4
 800f9be:	1889      	adds	r1, r1, r2
 800f9c0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	eb41 0303 	adc.w	r3, r1, r3
 800f9ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f9ce:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800f9d2:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 800f9d6:	e9c2 3400 	strd	r3, r4, [r2]
 800f9da:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800f9de:	011a      	lsls	r2, r3, #4
 800f9e0:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 800f9e4:	0f1b      	lsrs	r3, r3, #28
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 800f9ec:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 800f9f0:	011a      	lsls	r2, r3, #4
 800f9f2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800f9f6:	0f1b      	lsrs	r3, r3, #28
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800f9fe:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 800fa02:	089a      	lsrs	r2, r3, #2
 800fa04:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800fa08:	079b      	lsls	r3, r3, #30
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800fa10:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800fa14:	089a      	lsrs	r2, r3, #2
 800fa16:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 800fa1a:	079b      	lsls	r3, r3, #30
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800fa22:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800fa26:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fa2a:	4623      	mov	r3, r4
 800fa2c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800fa30:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fa34:	4602      	mov	r2, r0
 800fa36:	4053      	eors	r3, r2
 800fa38:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800fa3c:	462b      	mov	r3, r5
 800fa3e:	460a      	mov	r2, r1
 800fa40:	4053      	eors	r3, r2
 800fa42:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800fa46:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 800fa4a:	09da      	lsrs	r2, r3, #7
 800fa4c:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800fa50:	065b      	lsls	r3, r3, #25
 800fa52:	4313      	orrs	r3, r2
 800fa54:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800fa58:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800fa5c:	09da      	lsrs	r2, r3, #7
 800fa5e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 800fa62:	065b      	lsls	r3, r3, #25
 800fa64:	4313      	orrs	r3, r2
 800fa66:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800fa6a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800fa6e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fa72:	4623      	mov	r3, r4
 800fa74:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800fa78:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	4053      	eors	r3, r2
 800fa80:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800fa84:	462b      	mov	r3, r5
 800fa86:	460a      	mov	r2, r1
 800fa88:	4053      	eors	r3, r2
 800fa8a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800fa8e:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800fa92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa96:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800fa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9e:	ea00 0402 	and.w	r4, r0, r2
 800faa2:	f8c7 4478 	str.w	r4, [r7, #1144]	; 0x478
 800faa6:	400b      	ands	r3, r1
 800faa8:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800faac:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800fab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fab4:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	ea40 0402 	orr.w	r4, r0, r2
 800fac0:	f8c7 4470 	str.w	r4, [r7, #1136]	; 0x470
 800fac4:	430b      	orrs	r3, r1
 800fac6:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800faca:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800face:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad2:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 800fad6:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fada:	4621      	mov	r1, r4
 800fadc:	4011      	ands	r1, r2
 800fade:	f8c7 1468 	str.w	r1, [r7, #1128]	; 0x468
 800fae2:	4629      	mov	r1, r5
 800fae4:	400b      	ands	r3, r1
 800fae6:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800faea:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800faee:	e9d3 4500 	ldrd	r4, r5, [r3]
 800faf2:	4623      	mov	r3, r4
 800faf4:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800faf8:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fafc:	4602      	mov	r2, r0
 800fafe:	4313      	orrs	r3, r2
 800fb00:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800fb04:	462b      	mov	r3, r5
 800fb06:	460a      	mov	r2, r1
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800fb0e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800fb12:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fb16:	4623      	mov	r3, r4
 800fb18:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800fb1c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fb20:	4602      	mov	r2, r0
 800fb22:	189b      	adds	r3, r3, r2
 800fb24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb28:	462b      	mov	r3, r5
 800fb2a:	460a      	mov	r2, r1
 800fb2c:	4153      	adcs	r3, r2
 800fb2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fb32:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800fb36:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800fb3a:	e9c2 3400 	strd	r3, r4, [r2]
 800fb3e:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800fb42:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb46:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	1884      	adds	r4, r0, r2
 800fb50:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800fb54:	eb41 0303 	adc.w	r3, r1, r3
 800fb58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fb5c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800fb60:	f607 12c8 	addw	r2, r7, #2504	; 0x9c8
 800fb64:	e9c2 3400 	strd	r3, r4, [r2]
 800fb68:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800fb6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb70:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	1884      	adds	r4, r0, r2
 800fb7a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800fb7e:	eb41 0303 	adc.w	r3, r1, r3
 800fb82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fb86:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800fb8a:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800fb8e:	e9c2 3400 	strd	r3, r4, [r2]
 800fb92:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800fb96:	3301      	adds	r3, #1
 800fb98:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 800fb9c:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800fba0:	049a      	lsls	r2, r3, #18
 800fba2:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800fba6:	0b9b      	lsrs	r3, r3, #14
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800fbae:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800fbb2:	049a      	lsls	r2, r3, #18
 800fbb4:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800fbb8:	0b9b      	lsrs	r3, r3, #14
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800fbc0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800fbc4:	039a      	lsls	r2, r3, #14
 800fbc6:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800fbca:	0c9b      	lsrs	r3, r3, #18
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800fbd2:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800fbd6:	039a      	lsls	r2, r3, #14
 800fbd8:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800fbdc:	0c9b      	lsrs	r3, r3, #18
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800fbe4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800fbe8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fbec:	4623      	mov	r3, r4
 800fbee:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800fbf2:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	4053      	eors	r3, r2
 800fbfa:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800fbfe:	462b      	mov	r3, r5
 800fc00:	460a      	mov	r2, r1
 800fc02:	4053      	eors	r3, r2
 800fc04:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800fc08:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800fc0c:	0a5a      	lsrs	r2, r3, #9
 800fc0e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800fc12:	05db      	lsls	r3, r3, #23
 800fc14:	4313      	orrs	r3, r2
 800fc16:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800fc1a:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800fc1e:	0a5a      	lsrs	r2, r3, #9
 800fc20:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800fc24:	05db      	lsls	r3, r3, #23
 800fc26:	4313      	orrs	r3, r2
 800fc28:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800fc2c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800fc30:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fc34:	4623      	mov	r3, r4
 800fc36:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800fc3a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fc3e:	4602      	mov	r2, r0
 800fc40:	4053      	eors	r3, r2
 800fc42:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800fc46:	462b      	mov	r3, r5
 800fc48:	460a      	mov	r2, r1
 800fc4a:	4053      	eors	r3, r2
 800fc4c:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800fc50:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc58:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 800fc5c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fc60:	4621      	mov	r1, r4
 800fc62:	1889      	adds	r1, r1, r2
 800fc64:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 800fc68:	4629      	mov	r1, r5
 800fc6a:	eb41 0303 	adc.w	r3, r1, r3
 800fc6e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800fc72:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800fc76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc7a:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	ea80 0402 	eor.w	r4, r0, r2
 800fc86:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
 800fc8a:	404b      	eors	r3, r1
 800fc8c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800fc90:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc98:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 800fc9c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fca0:	4621      	mov	r1, r4
 800fca2:	4011      	ands	r1, r2
 800fca4:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 800fca8:	4629      	mov	r1, r5
 800fcaa:	400b      	ands	r3, r1
 800fcac:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800fcb0:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800fcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb8:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800fcbc:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	4051      	eors	r1, r2
 800fcc4:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800fcc8:	4629      	mov	r1, r5
 800fcca:	404b      	eors	r3, r1
 800fccc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800fcd0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fcd4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fcd8:	4623      	mov	r3, r4
 800fcda:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800fcde:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fce2:	4602      	mov	r2, r0
 800fce4:	189b      	adds	r3, r3, r2
 800fce6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800fcea:	462b      	mov	r3, r5
 800fcec:	460a      	mov	r2, r1
 800fcee:	4153      	adcs	r3, r2
 800fcf0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800fcf4:	4a1d      	ldr	r2, [pc, #116]	; (800fd6c <mbedtls_internal_sha512_process+0x119c>)
 800fcf6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800fcfa:	00db      	lsls	r3, r3, #3
 800fcfc:	4413      	add	r3, r2
 800fcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd02:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800fd06:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	1889      	adds	r1, r1, r2
 800fd0e:	f8c7 1408 	str.w	r1, [r7, #1032]	; 0x408
 800fd12:	4629      	mov	r1, r5
 800fd14:	eb41 0303 	adc.w	r3, r1, r3
 800fd18:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800fd1c:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800fd20:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 800fd24:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800fd28:	00db      	lsls	r3, r3, #3
 800fd2a:	4413      	add	r3, r2
 800fd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd30:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800fd34:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fd38:	4621      	mov	r1, r4
 800fd3a:	1889      	adds	r1, r1, r2
 800fd3c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800fd40:	4629      	mov	r1, r5
 800fd42:	eb41 0303 	adc.w	r3, r1, r3
 800fd46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fd4a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800fd4e:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 800fd52:	e9c2 3400 	strd	r3, r4, [r2]
 800fd56:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 800fd5a:	011a      	lsls	r2, r3, #4
 800fd5c:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 800fd60:	0f1b      	lsrs	r3, r3, #28
 800fd62:	4313      	orrs	r3, r2
 800fd64:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800fd68:	e002      	b.n	800fd70 <mbedtls_internal_sha512_process+0x11a0>
 800fd6a:	bf00      	nop
 800fd6c:	08014d58 	.word	0x08014d58
 800fd70:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 800fd74:	011a      	lsls	r2, r3, #4
 800fd76:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 800fd7a:	0f1b      	lsrs	r3, r3, #28
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800fd82:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 800fd86:	089a      	lsrs	r2, r3, #2
 800fd88:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 800fd8c:	079b      	lsls	r3, r3, #30
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800fd94:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 800fd98:	089a      	lsrs	r2, r3, #2
 800fd9a:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 800fd9e:	079b      	lsls	r3, r3, #30
 800fda0:	4313      	orrs	r3, r2
 800fda2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 800fda6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800fdaa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fdae:	4623      	mov	r3, r4
 800fdb0:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	4053      	eors	r3, r2
 800fdb8:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800fdbc:	462b      	mov	r3, r5
 800fdbe:	460a      	mov	r2, r1
 800fdc0:	4053      	eors	r3, r2
 800fdc2:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800fdc6:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 800fdca:	09da      	lsrs	r2, r3, #7
 800fdcc:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 800fdd0:	065b      	lsls	r3, r3, #25
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800fdd8:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 800fddc:	09da      	lsrs	r2, r3, #7
 800fdde:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 800fde2:	065b      	lsls	r3, r3, #25
 800fde4:	4313      	orrs	r3, r2
 800fde6:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 800fdea:	e9d7 45fc 	ldrd	r4, r5, [r7, #1008]	; 0x3f0
 800fdee:	4623      	mov	r3, r4
 800fdf0:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	4053      	eors	r3, r2
 800fdf8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800fdfc:	462b      	mov	r3, r5
 800fdfe:	460a      	mov	r2, r1
 800fe00:	4053      	eors	r3, r2
 800fe02:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800fe06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe0e:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800fe12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe16:	ea00 0402 	and.w	r4, r0, r2
 800fe1a:	f8c7 43d8 	str.w	r4, [r7, #984]	; 0x3d8
 800fe1e:	400b      	ands	r3, r1
 800fe20:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800fe24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe28:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe2c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800fe30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe34:	ea40 0402 	orr.w	r4, r0, r2
 800fe38:	f8c7 43d0 	str.w	r4, [r7, #976]	; 0x3d0
 800fe3c:	430b      	orrs	r3, r1
 800fe3e:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800fe42:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800fe46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4a:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 800fe4e:	4621      	mov	r1, r4
 800fe50:	4011      	ands	r1, r2
 800fe52:	f8c7 13c8 	str.w	r1, [r7, #968]	; 0x3c8
 800fe56:	4629      	mov	r1, r5
 800fe58:	400b      	ands	r3, r1
 800fe5a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800fe5e:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 800fe62:	4623      	mov	r3, r4
 800fe64:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800fe68:	4602      	mov	r2, r0
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800fe70:	462b      	mov	r3, r5
 800fe72:	460a      	mov	r2, r1
 800fe74:	4313      	orrs	r3, r2
 800fe76:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800fe7a:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	; 0x3e0
 800fe7e:	4623      	mov	r3, r4
 800fe80:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	; 0x3c0
 800fe84:	4602      	mov	r2, r0
 800fe86:	189b      	adds	r3, r3, r2
 800fe88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe8c:	462b      	mov	r3, r5
 800fe8e:	460a      	mov	r2, r1
 800fe90:	4153      	adcs	r3, r2
 800fe92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe96:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800fe9a:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800fe9e:	e9c2 3400 	strd	r3, r4, [r2]
 800fea2:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800fea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800feaa:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800feae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb2:	1884      	adds	r4, r0, r2
 800feb4:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800feb8:	eb41 0303 	adc.w	r3, r1, r3
 800febc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fec0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800fec4:	f507 621d 	add.w	r2, r7, #2512	; 0x9d0
 800fec8:	e9c2 3400 	strd	r3, r4, [r2]
 800fecc:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800fed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fed4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fedc:	1884      	adds	r4, r0, r2
 800fede:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800fee2:	eb41 0303 	adc.w	r3, r1, r3
 800fee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800feea:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800feee:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 800fef2:	e9c2 3400 	strd	r3, r4, [r2]
 800fef6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 800fefa:	3301      	adds	r3, #1
 800fefc:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 800ff00:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800ff04:	049a      	lsls	r2, r3, #18
 800ff06:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800ff0a:	0b9b      	lsrs	r3, r3, #14
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 800ff12:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800ff16:	049a      	lsls	r2, r3, #18
 800ff18:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800ff1c:	0b9b      	lsrs	r3, r3, #14
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800ff24:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800ff28:	039a      	lsls	r2, r3, #14
 800ff2a:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800ff2e:	0c9b      	lsrs	r3, r3, #18
 800ff30:	4313      	orrs	r3, r2
 800ff32:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 800ff36:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800ff3a:	039a      	lsls	r2, r3, #14
 800ff3c:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800ff40:	0c9b      	lsrs	r3, r3, #18
 800ff42:	4313      	orrs	r3, r2
 800ff44:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800ff48:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 800ff4c:	4623      	mov	r3, r4
 800ff4e:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 800ff52:	4602      	mov	r2, r0
 800ff54:	4053      	eors	r3, r2
 800ff56:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800ff5a:	462b      	mov	r3, r5
 800ff5c:	460a      	mov	r2, r1
 800ff5e:	4053      	eors	r3, r2
 800ff60:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800ff64:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800ff68:	0a5a      	lsrs	r2, r3, #9
 800ff6a:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800ff6e:	05db      	lsls	r3, r3, #23
 800ff70:	4313      	orrs	r3, r2
 800ff72:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800ff76:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800ff7a:	0a5a      	lsrs	r2, r3, #9
 800ff7c:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800ff80:	05db      	lsls	r3, r3, #23
 800ff82:	4313      	orrs	r3, r2
 800ff84:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800ff88:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 800ff8c:	4623      	mov	r3, r4
 800ff8e:	e9d7 01e8 	ldrd	r0, r1, [r7, #928]	; 0x3a0
 800ff92:	4602      	mov	r2, r0
 800ff94:	4053      	eors	r3, r2
 800ff96:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 800ff9a:	462b      	mov	r3, r5
 800ff9c:	460a      	mov	r2, r1
 800ff9e:	4053      	eors	r3, r2
 800ffa0:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800ffa4:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800ffa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffac:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 800ffb0:	4621      	mov	r1, r4
 800ffb2:	1889      	adds	r1, r1, r2
 800ffb4:	f8c7 1390 	str.w	r1, [r7, #912]	; 0x390
 800ffb8:	4629      	mov	r1, r5
 800ffba:	eb41 0303 	adc.w	r3, r1, r3
 800ffbe:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800ffc2:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800ffc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffca:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	ea80 0402 	eor.w	r4, r0, r2
 800ffd6:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 800ffda:	404b      	eors	r3, r1
 800ffdc:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800ffe0:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800ffe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe8:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 800ffec:	4621      	mov	r1, r4
 800ffee:	4011      	ands	r1, r2
 800fff0:	f8c7 1380 	str.w	r1, [r7, #896]	; 0x380
 800fff4:	4629      	mov	r1, r5
 800fff6:	400b      	ands	r3, r1
 800fff8:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800fffc:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8010008:	4621      	mov	r1, r4
 801000a:	4051      	eors	r1, r2
 801000c:	f8c7 1378 	str.w	r1, [r7, #888]	; 0x378
 8010010:	4629      	mov	r1, r5
 8010012:	404b      	eors	r3, r1
 8010014:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8010018:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 801001c:	4623      	mov	r3, r4
 801001e:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	; 0x378
 8010022:	4602      	mov	r2, r0
 8010024:	189b      	adds	r3, r3, r2
 8010026:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 801002a:	462b      	mov	r3, r5
 801002c:	460a      	mov	r2, r1
 801002e:	4153      	adcs	r3, r2
 8010030:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8010034:	4af7      	ldr	r2, [pc, #988]	; (8010414 <mbedtls_internal_sha512_process+0x1844>)
 8010036:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 801003a:	00db      	lsls	r3, r3, #3
 801003c:	4413      	add	r3, r2
 801003e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010042:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 8010046:	4621      	mov	r1, r4
 8010048:	1889      	adds	r1, r1, r2
 801004a:	f8c7 1368 	str.w	r1, [r7, #872]	; 0x368
 801004e:	4629      	mov	r1, r5
 8010050:	eb41 0303 	adc.w	r3, r1, r3
 8010054:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8010058:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801005c:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8010060:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8010064:	00db      	lsls	r3, r3, #3
 8010066:	4413      	add	r3, r2
 8010068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006c:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8010070:	4621      	mov	r1, r4
 8010072:	1889      	adds	r1, r1, r2
 8010074:	67b9      	str	r1, [r7, #120]	; 0x78
 8010076:	4629      	mov	r1, r5
 8010078:	eb41 0303 	adc.w	r3, r1, r3
 801007c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801007e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8010082:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 8010086:	e9c2 3400 	strd	r3, r4, [r2]
 801008a:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 801008e:	011a      	lsls	r2, r3, #4
 8010090:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 8010094:	0f1b      	lsrs	r3, r3, #28
 8010096:	4313      	orrs	r3, r2
 8010098:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 801009c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 80100a0:	011a      	lsls	r2, r3, #4
 80100a2:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 80100a6:	0f1b      	lsrs	r3, r3, #28
 80100a8:	4313      	orrs	r3, r2
 80100aa:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80100ae:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 80100b2:	089a      	lsrs	r2, r3, #2
 80100b4:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 80100b8:	079b      	lsls	r3, r3, #30
 80100ba:	4313      	orrs	r3, r2
 80100bc:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80100c0:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 80100c4:	089a      	lsrs	r2, r3, #2
 80100c6:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 80100ca:	079b      	lsls	r3, r3, #30
 80100cc:	4313      	orrs	r3, r2
 80100ce:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80100d2:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 80100d6:	4623      	mov	r3, r4
 80100d8:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 80100dc:	4602      	mov	r2, r0
 80100de:	4053      	eors	r3, r2
 80100e0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80100e4:	462b      	mov	r3, r5
 80100e6:	460a      	mov	r2, r1
 80100e8:	4053      	eors	r3, r2
 80100ea:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80100ee:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 80100f2:	09da      	lsrs	r2, r3, #7
 80100f4:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 80100f8:	065b      	lsls	r3, r3, #25
 80100fa:	4313      	orrs	r3, r2
 80100fc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8010100:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	; 0x9b4
 8010104:	09da      	lsrs	r2, r3, #7
 8010106:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 801010a:	065b      	lsls	r3, r3, #25
 801010c:	4313      	orrs	r3, r2
 801010e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8010112:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8010116:	4623      	mov	r3, r4
 8010118:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 801011c:	4602      	mov	r2, r0
 801011e:	4053      	eors	r3, r2
 8010120:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8010124:	462b      	mov	r3, r5
 8010126:	460a      	mov	r2, r1
 8010128:	4053      	eors	r3, r2
 801012a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 801012e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010136:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801013a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013e:	ea00 0402 	and.w	r4, r0, r2
 8010142:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8010146:	400b      	ands	r3, r1
 8010148:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 801014c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010154:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	ea40 0402 	orr.w	r4, r0, r2
 8010160:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 8010164:	430b      	orrs	r3, r1
 8010166:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 801016a:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 801016e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010172:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8010176:	4621      	mov	r1, r4
 8010178:	4011      	ands	r1, r2
 801017a:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 801017e:	4629      	mov	r1, r5
 8010180:	400b      	ands	r3, r1
 8010182:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8010186:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 801018a:	4623      	mov	r3, r4
 801018c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8010190:	4602      	mov	r2, r0
 8010192:	4313      	orrs	r3, r2
 8010194:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8010198:	462b      	mov	r3, r5
 801019a:	460a      	mov	r2, r1
 801019c:	4313      	orrs	r3, r2
 801019e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80101a2:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 80101a6:	4623      	mov	r3, r4
 80101a8:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 80101ac:	4602      	mov	r2, r0
 80101ae:	189b      	adds	r3, r3, r2
 80101b0:	673b      	str	r3, [r7, #112]	; 0x70
 80101b2:	462b      	mov	r3, r5
 80101b4:	460a      	mov	r2, r1
 80101b6:	4153      	adcs	r3, r2
 80101b8:	677b      	str	r3, [r7, #116]	; 0x74
 80101ba:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80101be:	f607 1288 	addw	r2, r7, #2440	; 0x988
 80101c2:	e9c2 3400 	strd	r3, r4, [r2]
 80101c6:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80101ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101ce:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80101d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d6:	1884      	adds	r4, r0, r2
 80101d8:	66bc      	str	r4, [r7, #104]	; 0x68
 80101da:	eb41 0303 	adc.w	r3, r1, r3
 80101de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80101e0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80101e4:	f607 1298 	addw	r2, r7, #2456	; 0x998
 80101e8:	e9c2 3400 	strd	r3, r4, [r2]
 80101ec:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80101f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101f4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80101f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fc:	1884      	adds	r4, r0, r2
 80101fe:	663c      	str	r4, [r7, #96]	; 0x60
 8010200:	eb41 0303 	adc.w	r3, r1, r3
 8010204:	667b      	str	r3, [r7, #100]	; 0x64
 8010206:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801020a:	f607 12b8 	addw	r2, r7, #2488	; 0x9b8
 801020e:	e9c2 3400 	strd	r3, r4, [r2]
 8010212:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8010216:	3301      	adds	r3, #1
 8010218:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 801021c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8010220:	049a      	lsls	r2, r3, #18
 8010222:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8010226:	0b9b      	lsrs	r3, r3, #14
 8010228:	4313      	orrs	r3, r2
 801022a:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 801022e:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8010232:	049a      	lsls	r2, r3, #18
 8010234:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8010238:	0b9b      	lsrs	r3, r3, #14
 801023a:	4313      	orrs	r3, r2
 801023c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8010240:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8010244:	039a      	lsls	r2, r3, #14
 8010246:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 801024a:	0c9b      	lsrs	r3, r3, #18
 801024c:	4313      	orrs	r3, r2
 801024e:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8010252:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8010256:	039a      	lsls	r2, r3, #14
 8010258:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 801025c:	0c9b      	lsrs	r3, r3, #18
 801025e:	4313      	orrs	r3, r2
 8010260:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8010264:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 8010268:	4623      	mov	r3, r4
 801026a:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	; 0x310
 801026e:	4602      	mov	r2, r0
 8010270:	4053      	eors	r3, r2
 8010272:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8010276:	462b      	mov	r3, r5
 8010278:	460a      	mov	r2, r1
 801027a:	4053      	eors	r3, r2
 801027c:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8010280:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8010284:	0a5a      	lsrs	r2, r3, #9
 8010286:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 801028a:	05db      	lsls	r3, r3, #23
 801028c:	4313      	orrs	r3, r2
 801028e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8010292:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8010296:	0a5a      	lsrs	r2, r3, #9
 8010298:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 801029c:	05db      	lsls	r3, r3, #23
 801029e:	4313      	orrs	r3, r2
 80102a0:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 80102a4:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	; 0x308
 80102a8:	4623      	mov	r3, r4
 80102aa:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 80102ae:	4602      	mov	r2, r0
 80102b0:	4053      	eors	r3, r2
 80102b2:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 80102b6:	462b      	mov	r3, r5
 80102b8:	460a      	mov	r2, r1
 80102ba:	4053      	eors	r3, r2
 80102bc:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80102c0:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80102c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c8:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 80102cc:	4621      	mov	r1, r4
 80102ce:	1889      	adds	r1, r1, r2
 80102d0:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 80102d4:	4629      	mov	r1, r5
 80102d6:	eb41 0303 	adc.w	r3, r1, r3
 80102da:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80102de:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80102e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102e6:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80102ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ee:	ea80 0402 	eor.w	r4, r0, r2
 80102f2:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 80102f6:	404b      	eors	r3, r1
 80102f8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80102fc:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 8010308:	4621      	mov	r1, r4
 801030a:	4011      	ands	r1, r2
 801030c:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8010310:	4629      	mov	r1, r5
 8010312:	400b      	ands	r3, r1
 8010314:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8010318:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8010324:	4621      	mov	r1, r4
 8010326:	4051      	eors	r1, r2
 8010328:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 801032c:	4629      	mov	r1, r5
 801032e:	404b      	eors	r3, r1
 8010330:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8010334:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 8010338:	4623      	mov	r3, r4
 801033a:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	; 0x2d8
 801033e:	4602      	mov	r2, r0
 8010340:	189b      	adds	r3, r3, r2
 8010342:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8010346:	462b      	mov	r3, r5
 8010348:	460a      	mov	r2, r1
 801034a:	4153      	adcs	r3, r2
 801034c:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8010350:	4a30      	ldr	r2, [pc, #192]	; (8010414 <mbedtls_internal_sha512_process+0x1844>)
 8010352:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8010356:	00db      	lsls	r3, r3, #3
 8010358:	4413      	add	r3, r2
 801035a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035e:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8010362:	4621      	mov	r1, r4
 8010364:	1889      	adds	r1, r1, r2
 8010366:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 801036a:	4629      	mov	r1, r5
 801036c:	eb41 0303 	adc.w	r3, r1, r3
 8010370:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8010374:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010378:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801037c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8010380:	00db      	lsls	r3, r3, #3
 8010382:	4413      	add	r3, r2
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 801038c:	4621      	mov	r1, r4
 801038e:	1889      	adds	r1, r1, r2
 8010390:	65b9      	str	r1, [r7, #88]	; 0x58
 8010392:	4629      	mov	r1, r5
 8010394:	eb41 0303 	adc.w	r3, r1, r3
 8010398:	65fb      	str	r3, [r7, #92]	; 0x5c
 801039a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 801039e:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 80103a2:	e9c2 3400 	strd	r3, r4, [r2]
 80103a6:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 80103aa:	011a      	lsls	r2, r3, #4
 80103ac:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 80103b0:	0f1b      	lsrs	r3, r3, #28
 80103b2:	4313      	orrs	r3, r2
 80103b4:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 80103b8:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 80103bc:	011a      	lsls	r2, r3, #4
 80103be:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 80103c2:	0f1b      	lsrs	r3, r3, #28
 80103c4:	4313      	orrs	r3, r2
 80103c6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80103ca:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 80103ce:	089a      	lsrs	r2, r3, #2
 80103d0:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 80103d4:	079b      	lsls	r3, r3, #30
 80103d6:	4313      	orrs	r3, r2
 80103d8:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80103dc:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 80103e0:	089a      	lsrs	r2, r3, #2
 80103e2:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 80103e6:	079b      	lsls	r3, r3, #30
 80103e8:	4313      	orrs	r3, r2
 80103ea:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 80103ee:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 80103f2:	4623      	mov	r3, r4
 80103f4:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80103f8:	4602      	mov	r2, r0
 80103fa:	4053      	eors	r3, r2
 80103fc:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8010400:	462b      	mov	r3, r5
 8010402:	460a      	mov	r2, r1
 8010404:	4053      	eors	r3, r2
 8010406:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 801040a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801040e:	09da      	lsrs	r2, r3, #7
 8010410:	e002      	b.n	8010418 <mbedtls_internal_sha512_process+0x1848>
 8010412:	bf00      	nop
 8010414:	08014d58 	.word	0x08014d58
 8010418:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 801041c:	065b      	lsls	r3, r3, #25
 801041e:	4313      	orrs	r3, r2
 8010420:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8010424:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 8010428:	09da      	lsrs	r2, r3, #7
 801042a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801042e:	065b      	lsls	r3, r3, #25
 8010430:	4313      	orrs	r3, r2
 8010432:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8010436:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 801043a:	4623      	mov	r3, r4
 801043c:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8010440:	4602      	mov	r2, r0
 8010442:	4053      	eors	r3, r2
 8010444:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8010448:	462b      	mov	r3, r5
 801044a:	460a      	mov	r2, r1
 801044c:	4053      	eors	r3, r2
 801044e:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8010452:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8010456:	e9d3 0100 	ldrd	r0, r1, [r3]
 801045a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801045e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010462:	ea00 0402 	and.w	r4, r0, r2
 8010466:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 801046a:	400b      	ands	r3, r1
 801046c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8010470:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8010474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010478:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 801047c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010480:	ea40 0402 	orr.w	r4, r0, r2
 8010484:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 8010488:	430b      	orrs	r3, r1
 801048a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801048e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010496:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 801049a:	4621      	mov	r1, r4
 801049c:	4011      	ands	r1, r2
 801049e:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 80104a2:	4629      	mov	r1, r5
 80104a4:	400b      	ands	r3, r1
 80104a6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80104aa:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 80104ae:	4623      	mov	r3, r4
 80104b0:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 80104b4:	4602      	mov	r2, r0
 80104b6:	4313      	orrs	r3, r2
 80104b8:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80104bc:	462b      	mov	r3, r5
 80104be:	460a      	mov	r2, r1
 80104c0:	4313      	orrs	r3, r2
 80104c2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80104c6:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 80104ca:	4623      	mov	r3, r4
 80104cc:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 80104d0:	4602      	mov	r2, r0
 80104d2:	189b      	adds	r3, r3, r2
 80104d4:	653b      	str	r3, [r7, #80]	; 0x50
 80104d6:	462b      	mov	r3, r5
 80104d8:	460a      	mov	r2, r1
 80104da:	4153      	adcs	r3, r2
 80104dc:	657b      	str	r3, [r7, #84]	; 0x54
 80104de:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80104e2:	f607 1288 	addw	r2, r7, #2440	; 0x988
 80104e6:	e9c2 3400 	strd	r3, r4, [r2]
 80104ea:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80104ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104f2:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80104f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fa:	1884      	adds	r4, r0, r2
 80104fc:	64bc      	str	r4, [r7, #72]	; 0x48
 80104fe:	eb41 0303 	adc.w	r3, r1, r3
 8010502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010504:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8010508:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 801050c:	e9c2 3400 	strd	r3, r4, [r2]
 8010510:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8010514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010518:	f607 1388 	addw	r3, r7, #2440	; 0x988
 801051c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010520:	1884      	adds	r4, r0, r2
 8010522:	643c      	str	r4, [r7, #64]	; 0x40
 8010524:	eb41 0303 	adc.w	r3, r1, r3
 8010528:	647b      	str	r3, [r7, #68]	; 0x44
 801052a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801052e:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8010532:	e9c2 3400 	strd	r3, r4, [r2]
 8010536:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 801053a:	3301      	adds	r3, #1
 801053c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 8010540:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8010544:	049a      	lsls	r2, r3, #18
 8010546:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801054a:	0b9b      	lsrs	r3, r3, #14
 801054c:	4313      	orrs	r3, r2
 801054e:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8010552:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8010556:	049a      	lsls	r2, r3, #18
 8010558:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 801055c:	0b9b      	lsrs	r3, r3, #14
 801055e:	4313      	orrs	r3, r2
 8010560:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8010564:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8010568:	039a      	lsls	r2, r3, #14
 801056a:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801056e:	0c9b      	lsrs	r3, r3, #18
 8010570:	4313      	orrs	r3, r2
 8010572:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8010576:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801057a:	039a      	lsls	r2, r3, #14
 801057c:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8010580:	0c9b      	lsrs	r3, r3, #18
 8010582:	4313      	orrs	r3, r2
 8010584:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8010588:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 801058c:	4623      	mov	r3, r4
 801058e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
 8010592:	4602      	mov	r2, r0
 8010594:	4053      	eors	r3, r2
 8010596:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801059a:	462b      	mov	r3, r5
 801059c:	460a      	mov	r2, r1
 801059e:	4053      	eors	r3, r2
 80105a0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80105a4:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 80105a8:	0a5a      	lsrs	r2, r3, #9
 80105aa:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80105ae:	05db      	lsls	r3, r3, #23
 80105b0:	4313      	orrs	r3, r2
 80105b2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80105b6:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80105ba:	0a5a      	lsrs	r2, r3, #9
 80105bc:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 80105c0:	05db      	lsls	r3, r3, #23
 80105c2:	4313      	orrs	r3, r2
 80105c4:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80105c8:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 80105cc:	4623      	mov	r3, r4
 80105ce:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 80105d2:	4602      	mov	r2, r0
 80105d4:	4053      	eors	r3, r2
 80105d6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80105da:	462b      	mov	r3, r5
 80105dc:	460a      	mov	r2, r1
 80105de:	4053      	eors	r3, r2
 80105e0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80105e4:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80105e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ec:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 80105f0:	4621      	mov	r1, r4
 80105f2:	1889      	adds	r1, r1, r2
 80105f4:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 80105f8:	4629      	mov	r1, r5
 80105fa:	eb41 0303 	adc.w	r3, r1, r3
 80105fe:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8010602:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8010606:	e9d3 0100 	ldrd	r0, r1, [r3]
 801060a:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 801060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010612:	ea80 0402 	eor.w	r4, r0, r2
 8010616:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 801061a:	404b      	eors	r3, r1
 801061c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8010620:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 801062c:	4621      	mov	r1, r4
 801062e:	4011      	ands	r1, r2
 8010630:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8010634:	4629      	mov	r1, r5
 8010636:	400b      	ands	r3, r1
 8010638:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801063c:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8010648:	4621      	mov	r1, r4
 801064a:	4051      	eors	r1, r2
 801064c:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8010650:	4629      	mov	r1, r5
 8010652:	404b      	eors	r3, r1
 8010654:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8010658:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 801065c:	4623      	mov	r3, r4
 801065e:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 8010662:	4602      	mov	r2, r0
 8010664:	189b      	adds	r3, r3, r2
 8010666:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 801066a:	462b      	mov	r3, r5
 801066c:	460a      	mov	r2, r1
 801066e:	4153      	adcs	r3, r2
 8010670:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8010674:	4af7      	ldr	r2, [pc, #988]	; (8010a54 <mbedtls_internal_sha512_process+0x1e84>)
 8010676:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 801067a:	00db      	lsls	r3, r3, #3
 801067c:	4413      	add	r3, r2
 801067e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010682:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8010686:	4621      	mov	r1, r4
 8010688:	1889      	adds	r1, r1, r2
 801068a:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 801068e:	4629      	mov	r1, r5
 8010690:	eb41 0303 	adc.w	r3, r1, r3
 8010694:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8010698:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801069c:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80106a0:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 80106a4:	00db      	lsls	r3, r3, #3
 80106a6:	4413      	add	r3, r2
 80106a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ac:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 80106b0:	4621      	mov	r1, r4
 80106b2:	1889      	adds	r1, r1, r2
 80106b4:	63b9      	str	r1, [r7, #56]	; 0x38
 80106b6:	4629      	mov	r1, r5
 80106b8:	eb41 0303 	adc.w	r3, r1, r3
 80106bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106be:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80106c2:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 80106c6:	e9c2 3400 	strd	r3, r4, [r2]
 80106ca:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 80106ce:	011a      	lsls	r2, r3, #4
 80106d0:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 80106d4:	0f1b      	lsrs	r3, r3, #28
 80106d6:	4313      	orrs	r3, r2
 80106d8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80106dc:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 80106e0:	011a      	lsls	r2, r3, #4
 80106e2:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 80106e6:	0f1b      	lsrs	r3, r3, #28
 80106e8:	4313      	orrs	r3, r2
 80106ea:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80106ee:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 80106f2:	089a      	lsrs	r2, r3, #2
 80106f4:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 80106f8:	079b      	lsls	r3, r3, #30
 80106fa:	4313      	orrs	r3, r2
 80106fc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8010700:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 8010704:	089a      	lsrs	r2, r3, #2
 8010706:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 801070a:	079b      	lsls	r3, r3, #30
 801070c:	4313      	orrs	r3, r2
 801070e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8010712:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8010716:	4623      	mov	r3, r4
 8010718:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 801071c:	4602      	mov	r2, r0
 801071e:	4053      	eors	r3, r2
 8010720:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8010724:	462b      	mov	r3, r5
 8010726:	460a      	mov	r2, r1
 8010728:	4053      	eors	r3, r2
 801072a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 801072e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 8010732:	09da      	lsrs	r2, r3, #7
 8010734:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 8010738:	065b      	lsls	r3, r3, #25
 801073a:	4313      	orrs	r3, r2
 801073c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8010740:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	; 0x9c4
 8010744:	09da      	lsrs	r2, r3, #7
 8010746:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	; 0x9c0
 801074a:	065b      	lsls	r3, r3, #25
 801074c:	4313      	orrs	r3, r2
 801074e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8010752:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8010756:	4623      	mov	r3, r4
 8010758:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 801075c:	4602      	mov	r2, r0
 801075e:	4053      	eors	r3, r2
 8010760:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8010764:	462b      	mov	r3, r5
 8010766:	460a      	mov	r2, r1
 8010768:	4053      	eors	r3, r2
 801076a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 801076e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010776:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 801077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077e:	ea00 0402 	and.w	r4, r0, r2
 8010782:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 8010786:	400b      	ands	r3, r1
 8010788:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 801078c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010794:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8010798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079c:	ea40 0402 	orr.w	r4, r0, r2
 80107a0:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80107a4:	430b      	orrs	r3, r1
 80107a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80107aa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80107ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b2:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80107b6:	4621      	mov	r1, r4
 80107b8:	4011      	ands	r1, r2
 80107ba:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 80107be:	4629      	mov	r1, r5
 80107c0:	400b      	ands	r3, r1
 80107c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80107c6:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80107ca:	4623      	mov	r3, r4
 80107cc:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80107d0:	4602      	mov	r2, r0
 80107d2:	4313      	orrs	r3, r2
 80107d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80107d8:	462b      	mov	r3, r5
 80107da:	460a      	mov	r2, r1
 80107dc:	4313      	orrs	r3, r2
 80107de:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80107e2:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80107e6:	4623      	mov	r3, r4
 80107e8:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 80107ec:	4602      	mov	r2, r0
 80107ee:	189b      	adds	r3, r3, r2
 80107f0:	633b      	str	r3, [r7, #48]	; 0x30
 80107f2:	462b      	mov	r3, r5
 80107f4:	460a      	mov	r2, r1
 80107f6:	4153      	adcs	r3, r2
 80107f8:	637b      	str	r3, [r7, #52]	; 0x34
 80107fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80107fe:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8010802:	e9c2 3400 	strd	r3, r4, [r2]
 8010806:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801080a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801080e:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8010812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010816:	1884      	adds	r4, r0, r2
 8010818:	62bc      	str	r4, [r7, #40]	; 0x28
 801081a:	eb41 0303 	adc.w	r3, r1, r3
 801081e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010820:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8010824:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 8010828:	e9c2 3400 	strd	r3, r4, [r2]
 801082c:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8010830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010834:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	1884      	adds	r4, r0, r2
 801083e:	623c      	str	r4, [r7, #32]
 8010840:	eb41 0303 	adc.w	r3, r1, r3
 8010844:	627b      	str	r3, [r7, #36]	; 0x24
 8010846:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801084a:	f607 12c8 	addw	r2, r7, #2504	; 0x9c8
 801084e:	e9c2 3400 	strd	r3, r4, [r2]
 8010852:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8010856:	3301      	adds	r3, #1
 8010858:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 801085c:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 8010860:	049a      	lsls	r2, r3, #18
 8010862:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 8010866:	0b9b      	lsrs	r3, r3, #14
 8010868:	4313      	orrs	r3, r2
 801086a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 801086e:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 8010872:	049a      	lsls	r2, r3, #18
 8010874:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 8010878:	0b9b      	lsrs	r3, r3, #14
 801087a:	4313      	orrs	r3, r2
 801087c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8010880:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 8010884:	039a      	lsls	r2, r3, #14
 8010886:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 801088a:	0c9b      	lsrs	r3, r3, #18
 801088c:	4313      	orrs	r3, r2
 801088e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8010892:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 8010896:	039a      	lsls	r2, r3, #14
 8010898:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 801089c:	0c9b      	lsrs	r3, r3, #18
 801089e:	4313      	orrs	r3, r2
 80108a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80108a4:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 80108a8:	4623      	mov	r3, r4
 80108aa:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80108ae:	4602      	mov	r2, r0
 80108b0:	4053      	eors	r3, r2
 80108b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80108b6:	462b      	mov	r3, r5
 80108b8:	460a      	mov	r2, r1
 80108ba:	4053      	eors	r3, r2
 80108bc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80108c0:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 80108c4:	0a5a      	lsrs	r2, r3, #9
 80108c6:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 80108ca:	05db      	lsls	r3, r3, #23
 80108cc:	4313      	orrs	r3, r2
 80108ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80108d2:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	; 0x9ac
 80108d6:	0a5a      	lsrs	r2, r3, #9
 80108d8:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	; 0x9a8
 80108dc:	05db      	lsls	r3, r3, #23
 80108de:	4313      	orrs	r3, r2
 80108e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80108e4:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80108e8:	4623      	mov	r3, r4
 80108ea:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80108ee:	4602      	mov	r2, r0
 80108f0:	4053      	eors	r3, r2
 80108f2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80108f6:	462b      	mov	r3, r5
 80108f8:	460a      	mov	r2, r1
 80108fa:	4053      	eors	r3, r2
 80108fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010900:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8010904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010908:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 801090c:	4621      	mov	r1, r4
 801090e:	1889      	adds	r1, r1, r2
 8010910:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8010914:	4629      	mov	r1, r5
 8010916:	eb41 0303 	adc.w	r3, r1, r3
 801091a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 801091e:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8010922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010926:	f607 1398 	addw	r3, r7, #2456	; 0x998
 801092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092e:	ea80 0402 	eor.w	r4, r0, r2
 8010932:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8010936:	404b      	eors	r3, r1
 8010938:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 801093c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010944:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8010948:	4621      	mov	r1, r4
 801094a:	4011      	ands	r1, r2
 801094c:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8010950:	4629      	mov	r1, r5
 8010952:	400b      	ands	r3, r1
 8010954:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010958:	f607 1398 	addw	r3, r7, #2456	; 0x998
 801095c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010960:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8010964:	4621      	mov	r1, r4
 8010966:	4051      	eors	r1, r2
 8010968:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 801096c:	4629      	mov	r1, r5
 801096e:	404b      	eors	r3, r1
 8010970:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010974:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8010978:	4623      	mov	r3, r4
 801097a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 801097e:	4602      	mov	r2, r0
 8010980:	189b      	adds	r3, r3, r2
 8010982:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8010986:	462b      	mov	r3, r5
 8010988:	460a      	mov	r2, r1
 801098a:	4153      	adcs	r3, r2
 801098c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8010990:	4a30      	ldr	r2, [pc, #192]	; (8010a54 <mbedtls_internal_sha512_process+0x1e84>)
 8010992:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8010996:	00db      	lsls	r3, r3, #3
 8010998:	4413      	add	r3, r2
 801099a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099e:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80109a2:	4621      	mov	r1, r4
 80109a4:	1889      	adds	r1, r1, r2
 80109a6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80109aa:	4629      	mov	r1, r5
 80109ac:	eb41 0303 	adc.w	r3, r1, r3
 80109b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80109b4:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80109b8:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80109bc:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	4413      	add	r3, r2
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80109cc:	4621      	mov	r1, r4
 80109ce:	1889      	adds	r1, r1, r2
 80109d0:	61b9      	str	r1, [r7, #24]
 80109d2:	4629      	mov	r1, r5
 80109d4:	eb41 0303 	adc.w	r3, r1, r3
 80109d8:	61fb      	str	r3, [r7, #28]
 80109da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80109de:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 80109e2:	e9c2 3400 	strd	r3, r4, [r2]
 80109e6:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80109ea:	011a      	lsls	r2, r3, #4
 80109ec:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 80109f0:	0f1b      	lsrs	r3, r3, #28
 80109f2:	4313      	orrs	r3, r2
 80109f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80109f8:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 80109fc:	011a      	lsls	r2, r3, #4
 80109fe:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8010a02:	0f1b      	lsrs	r3, r3, #28
 8010a04:	4313      	orrs	r3, r2
 8010a06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8010a0a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8010a0e:	089a      	lsrs	r2, r3, #2
 8010a10:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8010a14:	079b      	lsls	r3, r3, #30
 8010a16:	4313      	orrs	r3, r2
 8010a18:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8010a1c:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8010a20:	089a      	lsrs	r2, r3, #2
 8010a22:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8010a26:	079b      	lsls	r3, r3, #30
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8010a2e:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8010a32:	4623      	mov	r3, r4
 8010a34:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8010a38:	4602      	mov	r2, r0
 8010a3a:	4053      	eors	r3, r2
 8010a3c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8010a40:	462b      	mov	r3, r5
 8010a42:	460a      	mov	r2, r1
 8010a44:	4053      	eors	r3, r2
 8010a46:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010a4a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8010a4e:	09da      	lsrs	r2, r3, #7
 8010a50:	e002      	b.n	8010a58 <mbedtls_internal_sha512_process+0x1e88>
 8010a52:	bf00      	nop
 8010a54:	08014d58 	.word	0x08014d58
 8010a58:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8010a5c:	065b      	lsls	r3, r3, #25
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8010a64:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8010a68:	09da      	lsrs	r2, r3, #7
 8010a6a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8010a6e:	065b      	lsls	r3, r3, #25
 8010a70:	4313      	orrs	r3, r2
 8010a72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8010a76:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8010a7a:	4623      	mov	r3, r4
 8010a7c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8010a80:	4602      	mov	r2, r0
 8010a82:	4053      	eors	r3, r2
 8010a84:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8010a88:	462b      	mov	r3, r5
 8010a8a:	460a      	mov	r2, r1
 8010a8c:	4053      	eors	r3, r2
 8010a8e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010a92:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8010a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a9a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	ea00 0402 	and.w	r4, r0, r2
 8010aa6:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 8010aaa:	400b      	ands	r3, r1
 8010aac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8010ab0:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8010ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ab8:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac0:	ea40 0402 	orr.w	r4, r0, r2
 8010ac4:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8010ac8:	430b      	orrs	r3, r1
 8010aca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8010ace:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8010ada:	4621      	mov	r1, r4
 8010adc:	4011      	ands	r1, r2
 8010ade:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	400b      	ands	r3, r1
 8010ae6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8010aea:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8010aee:	4623      	mov	r3, r4
 8010af0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8010af4:	4602      	mov	r2, r0
 8010af6:	4313      	orrs	r3, r2
 8010af8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8010afc:	462b      	mov	r3, r5
 8010afe:	460a      	mov	r2, r1
 8010b00:	4313      	orrs	r3, r2
 8010b02:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8010b06:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8010b0a:	4623      	mov	r3, r4
 8010b0c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8010b10:	4602      	mov	r2, r0
 8010b12:	189b      	adds	r3, r3, r2
 8010b14:	613b      	str	r3, [r7, #16]
 8010b16:	462b      	mov	r3, r5
 8010b18:	460a      	mov	r2, r1
 8010b1a:	4153      	adcs	r3, r2
 8010b1c:	617b      	str	r3, [r7, #20]
 8010b1e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010b22:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8010b26:	e9c2 3400 	strd	r3, r4, [r2]
 8010b2a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b32:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8010b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b3a:	1884      	adds	r4, r0, r2
 8010b3c:	60bc      	str	r4, [r7, #8]
 8010b3e:	eb41 0303 	adc.w	r3, r1, r3
 8010b42:	60fb      	str	r3, [r7, #12]
 8010b44:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010b48:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8010b4c:	e9c2 3400 	strd	r3, r4, [r2]
 8010b50:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8010b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b58:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8010b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b60:	1884      	adds	r4, r0, r2
 8010b62:	603c      	str	r4, [r7, #0]
 8010b64:	eb41 0303 	adc.w	r3, r1, r3
 8010b68:	607b      	str	r3, [r7, #4]
 8010b6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010b6e:	f507 621d 	add.w	r2, r7, #2512	; 0x9d0
 8010b72:	e9c2 3400 	strd	r3, r4, [r2]
 8010b76:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
    }
    while( i < 80 );
 8010b80:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8010b84:	2b4f      	cmp	r3, #79	; 0x4f
 8010b86:	f77e aacb 	ble.w	800f120 <mbedtls_internal_sha512_process+0x550>

    ctx->state[0] += A;
 8010b8a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010b8e:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010b98:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8010b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba0:	1884      	adds	r4, r0, r2
 8010ba2:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8010ba6:	eb41 0303 	adc.w	r3, r1, r3
 8010baa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8010bae:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010bb2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8010bbc:	e9c3 1204 	strd	r1, r2, [r3, #16]
    ctx->state[1] += B;
 8010bc0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010bc4:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8010bce:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8010bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd6:	1884      	adds	r4, r0, r2
 8010bd8:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8010bdc:	eb41 0303 	adc.w	r3, r1, r3
 8010be0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8010be4:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010be8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8010bf2:	e9c3 1206 	strd	r1, r2, [r3, #24]
    ctx->state[2] += C;
 8010bf6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010bfa:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8010c04:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8010c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0c:	1884      	adds	r4, r0, r2
 8010c0e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8010c12:	eb41 0303 	adc.w	r3, r1, r3
 8010c16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010c1a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c1e:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8010c28:	e9c3 1208 	strd	r1, r2, [r3, #32]
    ctx->state[3] += D;
 8010c2c:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c30:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8010c3a:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8010c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c42:	1884      	adds	r4, r0, r2
 8010c44:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8010c48:	eb41 0303 	adc.w	r3, r1, r3
 8010c4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8010c50:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c54:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8010c5e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
    ctx->state[4] += E;
 8010c62:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c66:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8010c70:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8010c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c78:	1884      	adds	r4, r0, r2
 8010c7a:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8010c7e:	eb41 0303 	adc.w	r3, r1, r3
 8010c82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010c86:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c8a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8010c94:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
    ctx->state[5] += F;
 8010c98:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010c9c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010ca6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cae:	1884      	adds	r4, r0, r2
 8010cb0:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8010cb4:	eb41 0303 	adc.w	r3, r1, r3
 8010cb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010cbc:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010cc0:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8010cca:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
    ctx->state[6] += G;
 8010cce:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010cd2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8010cdc:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	1884      	adds	r4, r0, r2
 8010ce6:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8010cea:	eb41 0303 	adc.w	r3, r1, r3
 8010cee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010cf2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010cf6:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8010d00:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
    ctx->state[7] += H;
 8010d04:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010d08:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8010d12:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	1884      	adds	r4, r0, r2
 8010d1c:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 8010d20:	eb41 0303 	adc.w	r3, r1, r3
 8010d24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010d28:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8010d2c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8010d36:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48

    return( 0 );
 8010d3a:	2300      	movs	r3, #0
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f507 671e 	add.w	r7, r7, #2528	; 0x9e0
 8010d42:	46bd      	mov	sp, r7
 8010d44:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop

08010d4c <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8010d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d50:	b08a      	sub	sp, #40	; 0x28
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6178      	str	r0, [r7, #20]
 8010d56:	6139      	str	r1, [r7, #16]
 8010d58:	60fa      	str	r2, [r7, #12]
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d101      	bne.n	8010d64 <mbedtls_sha512_update_ret+0x18>
        return( 0 );
 8010d60:	2300      	movs	r3, #0
 8010d62:	e079      	b.n	8010e58 <mbedtls_sha512_update_ret+0x10c>

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d70:	627b      	str	r3, [r7, #36]	; 0x24
    fill = 128 - left;
 8010d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d74:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8010d78:	623b      	str	r3, [r7, #32]

    ctx->total[0] += (uint64_t) ilen;
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d80:	68f9      	ldr	r1, [r7, #12]
 8010d82:	2000      	movs	r0, #0
 8010d84:	4688      	mov	r8, r1
 8010d86:	4681      	mov	r9, r0
 8010d88:	eb12 0108 	adds.w	r1, r2, r8
 8010d8c:	6039      	str	r1, [r7, #0]
 8010d8e:	eb43 0309 	adc.w	r3, r3, r9
 8010d92:	607b      	str	r3, [r7, #4]
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010d9a:	e9c3 1200 	strd	r1, r2, [r3]

    if( ctx->total[0] < (uint64_t) ilen )
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	68f9      	ldr	r1, [r7, #12]
 8010da6:	2000      	movs	r0, #0
 8010da8:	460c      	mov	r4, r1
 8010daa:	4605      	mov	r5, r0
 8010dac:	42a2      	cmp	r2, r4
 8010dae:	41ab      	sbcs	r3, r5
 8010db0:	d209      	bcs.n	8010dc6 <mbedtls_sha512_update_ret+0x7a>
        ctx->total[1]++;
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010db8:	f112 0a01 	adds.w	sl, r2, #1
 8010dbc:	f143 0b00 	adc.w	fp, r3, #0
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	e9c3 ab02 	strd	sl, fp, [r3, #8]

    if( left && ilen >= fill )
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d034      	beq.n	8010e36 <mbedtls_sha512_update_ret+0xea>
 8010dcc:	68fa      	ldr	r2, [r7, #12]
 8010dce:	6a3b      	ldr	r3, [r7, #32]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d330      	bcc.n	8010e36 <mbedtls_sha512_update_ret+0xea>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8010dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ddc:	4413      	add	r3, r2
 8010dde:	6a3a      	ldr	r2, [r7, #32]
 8010de0:	6939      	ldr	r1, [r7, #16]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f000 fd36 	bl	8011854 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	3350      	adds	r3, #80	; 0x50
 8010dec:	4619      	mov	r1, r3
 8010dee:	6978      	ldr	r0, [r7, #20]
 8010df0:	f7fd feee 	bl	800ebd0 <mbedtls_internal_sha512_process>
 8010df4:	61f8      	str	r0, [r7, #28]
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <mbedtls_sha512_update_ret+0xb4>
            return( ret );
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	e02b      	b.n	8010e58 <mbedtls_sha512_update_ret+0x10c>

        input += fill;
 8010e00:	693a      	ldr	r2, [r7, #16]
 8010e02:	6a3b      	ldr	r3, [r7, #32]
 8010e04:	4413      	add	r3, r2
 8010e06:	613b      	str	r3, [r7, #16]
        ilen  -= fill;
 8010e08:	68fa      	ldr	r2, [r7, #12]
 8010e0a:	6a3b      	ldr	r3, [r7, #32]
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	60fb      	str	r3, [r7, #12]
        left = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while( ilen >= 128 )
 8010e14:	e00f      	b.n	8010e36 <mbedtls_sha512_update_ret+0xea>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 8010e16:	6939      	ldr	r1, [r7, #16]
 8010e18:	6978      	ldr	r0, [r7, #20]
 8010e1a:	f7fd fed9 	bl	800ebd0 <mbedtls_internal_sha512_process>
 8010e1e:	61f8      	str	r0, [r7, #28]
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d001      	beq.n	8010e2a <mbedtls_sha512_update_ret+0xde>
            return( ret );
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	e016      	b.n	8010e58 <mbedtls_sha512_update_ret+0x10c>

        input += 128;
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	3380      	adds	r3, #128	; 0x80
 8010e2e:	613b      	str	r3, [r7, #16]
        ilen  -= 128;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	3b80      	subs	r3, #128	; 0x80
 8010e34:	60fb      	str	r3, [r7, #12]
    while( ilen >= 128 )
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b7f      	cmp	r3, #127	; 0x7f
 8010e3a:	d8ec      	bhi.n	8010e16 <mbedtls_sha512_update_ret+0xca>
    }

    if( ilen > 0 )
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d009      	beq.n	8010e56 <mbedtls_sha512_update_ret+0x10a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8010e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4a:	4413      	add	r3, r2
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	6939      	ldr	r1, [r7, #16]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f000 fcff 	bl	8011854 <memcpy>

    return( 0 );
 8010e56:	2300      	movs	r3, #0
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3728      	adds	r7, #40	; 0x28
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010e62 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 8010e62:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010e66:	b088      	sub	sp, #32
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e74:	4613      	mov	r3, r2
 8010e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e7a:	61fb      	str	r3, [r7, #28]

    ctx->buffer[used++] = 0x80;
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	1c5a      	adds	r2, r3, #1
 8010e80:	61fa      	str	r2, [r7, #28]
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	4413      	add	r3, r2
 8010e86:	2280      	movs	r2, #128	; 0x80
 8010e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    if( used <= 112 )
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	2b70      	cmp	r3, #112	; 0x70
 8010e90:	d80c      	bhi.n	8010eac <mbedtls_sha512_finish_ret+0x4a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	18d0      	adds	r0, r2, r3
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	f000 fce3 	bl	8011870 <memset>
 8010eaa:	e01f      	b.n	8010eec <mbedtls_sha512_finish_ret+0x8a>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	18d0      	adds	r0, r2, r3
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	f000 fcd6 	bl	8011870 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	3350      	adds	r3, #80	; 0x50
 8010ec8:	4619      	mov	r1, r3
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7fd fe80 	bl	800ebd0 <mbedtls_internal_sha512_process>
 8010ed0:	61b8      	str	r0, [r7, #24]
 8010ed2:	69bb      	ldr	r3, [r7, #24]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d002      	beq.n	8010ede <mbedtls_sha512_finish_ret+0x7c>
            return( ret );
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	f000 bc3c 	b.w	8011756 <mbedtls_sha512_finish_ret+0x8f4>

        memset( ctx->buffer, 0, 112 );
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	3350      	adds	r3, #80	; 0x50
 8010ee2:	2270      	movs	r2, #112	; 0x70
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 fcc2 	bl	8011870 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef2:	f04f 0000 	mov.w	r0, #0
 8010ef6:	f04f 0100 	mov.w	r1, #0
 8010efa:	0f58      	lsrs	r0, r3, #29
 8010efc:	2100      	movs	r1, #0
         | ( ctx->total[1] <<  3 );
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8010f04:	f04f 0200 	mov.w	r2, #0
 8010f08:	f04f 0300 	mov.w	r3, #0
 8010f0c:	00eb      	lsls	r3, r5, #3
 8010f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010f12:	00e2      	lsls	r2, r4, #3
    high = ( ctx->total[0] >> 61 )
 8010f14:	ea40 0802 	orr.w	r8, r0, r2
 8010f18:	ea41 0903 	orr.w	r9, r1, r3
 8010f1c:	e9c7 8904 	strd	r8, r9, [r7, #16]
    low  = ( ctx->total[0] <<  3 );
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f26:	f04f 0200 	mov.w	r2, #0
 8010f2a:	f04f 0300 	mov.w	r3, #0
 8010f2e:	00cb      	lsls	r3, r1, #3
 8010f30:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010f34:	00c2      	lsls	r2, r0, #3
 8010f36:	e9c7 2302 	strd	r2, r3, [r7, #8]

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 8010f3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010f3e:	f04f 0200 	mov.w	r2, #0
 8010f42:	f04f 0300 	mov.w	r3, #0
 8010f46:	0e0a      	lsrs	r2, r1, #24
 8010f48:	2300      	movs	r3, #0
 8010f4a:	b2d2      	uxtb	r2, r2
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8010f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010f56:	f04f 0200 	mov.w	r2, #0
 8010f5a:	f04f 0300 	mov.w	r3, #0
 8010f5e:	0c0a      	lsrs	r2, r1, #16
 8010f60:	2300      	movs	r3, #0
 8010f62:	b2d2      	uxtb	r2, r2
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8010f6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010f6e:	f04f 0200 	mov.w	r2, #0
 8010f72:	f04f 0300 	mov.w	r3, #0
 8010f76:	0a0a      	lsrs	r2, r1, #8
 8010f78:	2300      	movs	r3, #0
 8010f7a:	b2d2      	uxtb	r2, r2
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8010f82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010f86:	f04f 0200 	mov.w	r2, #0
 8010f8a:	f04f 0300 	mov.w	r3, #0
 8010f8e:	000a      	movs	r2, r1
 8010f90:	2300      	movs	r3, #0
 8010f92:	b2d2      	uxtb	r2, r2
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8010f9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010f9e:	f04f 0200 	mov.w	r2, #0
 8010fa2:	f04f 0300 	mov.w	r3, #0
 8010fa6:	0e02      	lsrs	r2, r0, #24
 8010fa8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010fac:	0e0b      	lsrs	r3, r1, #24
 8010fae:	b2d2      	uxtb	r2, r2
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8010fb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010fba:	f04f 0200 	mov.w	r2, #0
 8010fbe:	f04f 0300 	mov.w	r3, #0
 8010fc2:	0c02      	lsrs	r2, r0, #16
 8010fc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fc8:	0c0b      	lsrs	r3, r1, #16
 8010fca:	b2d2      	uxtb	r2, r2
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8010fd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010fd6:	f04f 0200 	mov.w	r2, #0
 8010fda:	f04f 0300 	mov.w	r3, #0
 8010fde:	0a02      	lsrs	r2, r0, #8
 8010fe0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010fe4:	0a0b      	lsrs	r3, r1, #8
 8010fe6:	b2d2      	uxtb	r2, r2
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8010fee:	7c3a      	ldrb	r2, [r7, #16]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 8010ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ffa:	f04f 0200 	mov.w	r2, #0
 8010ffe:	f04f 0300 	mov.w	r3, #0
 8011002:	0e0a      	lsrs	r2, r1, #24
 8011004:	2300      	movs	r3, #0
 8011006:	b2d2      	uxtb	r2, r2
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 801100e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011012:	f04f 0200 	mov.w	r2, #0
 8011016:	f04f 0300 	mov.w	r3, #0
 801101a:	0c0a      	lsrs	r2, r1, #16
 801101c:	2300      	movs	r3, #0
 801101e:	b2d2      	uxtb	r2, r2
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8011026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801102a:	f04f 0200 	mov.w	r2, #0
 801102e:	f04f 0300 	mov.w	r3, #0
 8011032:	0a0a      	lsrs	r2, r1, #8
 8011034:	2300      	movs	r3, #0
 8011036:	b2d2      	uxtb	r2, r2
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 801103e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011042:	f04f 0200 	mov.w	r2, #0
 8011046:	f04f 0300 	mov.w	r3, #0
 801104a:	000a      	movs	r2, r1
 801104c:	2300      	movs	r3, #0
 801104e:	b2d2      	uxtb	r2, r2
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8011056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801105a:	f04f 0200 	mov.w	r2, #0
 801105e:	f04f 0300 	mov.w	r3, #0
 8011062:	0e02      	lsrs	r2, r0, #24
 8011064:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011068:	0e0b      	lsrs	r3, r1, #24
 801106a:	b2d2      	uxtb	r2, r2
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8011072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011076:	f04f 0200 	mov.w	r2, #0
 801107a:	f04f 0300 	mov.w	r3, #0
 801107e:	0c02      	lsrs	r2, r0, #16
 8011080:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011084:	0c0b      	lsrs	r3, r1, #16
 8011086:	b2d2      	uxtb	r2, r2
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 801108e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011092:	f04f 0200 	mov.w	r2, #0
 8011096:	f04f 0300 	mov.w	r3, #0
 801109a:	0a02      	lsrs	r2, r0, #8
 801109c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80110a0:	0a0b      	lsrs	r3, r1, #8
 80110a2:	b2d2      	uxtb	r2, r2
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 80110aa:	7a3a      	ldrb	r2, [r7, #8]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	3350      	adds	r3, #80	; 0x50
 80110b6:	4619      	mov	r1, r3
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7fd fd89 	bl	800ebd0 <mbedtls_internal_sha512_process>
 80110be:	61b8      	str	r0, [r7, #24]
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <mbedtls_sha512_finish_ret+0x268>
        return( ret );
 80110c6:	69bb      	ldr	r3, [r7, #24]
 80110c8:	e345      	b.n	8011756 <mbedtls_sha512_finish_ret+0x8f4>

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80110d0:	f04f 0200 	mov.w	r2, #0
 80110d4:	f04f 0300 	mov.w	r3, #0
 80110d8:	0e0a      	lsrs	r2, r1, #24
 80110da:	2300      	movs	r3, #0
 80110dc:	b2d2      	uxtb	r2, r2
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	701a      	strb	r2, [r3, #0]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80110e8:	f04f 0200 	mov.w	r2, #0
 80110ec:	f04f 0300 	mov.w	r3, #0
 80110f0:	0c0a      	lsrs	r2, r1, #16
 80110f2:	2300      	movs	r3, #0
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	3101      	adds	r1, #1
 80110f8:	b2d3      	uxtb	r3, r2
 80110fa:	700b      	strb	r3, [r1, #0]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011102:	f04f 0200 	mov.w	r2, #0
 8011106:	f04f 0300 	mov.w	r3, #0
 801110a:	0a0a      	lsrs	r2, r1, #8
 801110c:	2300      	movs	r3, #0
 801110e:	6839      	ldr	r1, [r7, #0]
 8011110:	3102      	adds	r1, #2
 8011112:	b2d3      	uxtb	r3, r2
 8011114:	700b      	strb	r3, [r1, #0]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801111c:	f04f 0200 	mov.w	r2, #0
 8011120:	f04f 0300 	mov.w	r3, #0
 8011124:	000a      	movs	r2, r1
 8011126:	2300      	movs	r3, #0
 8011128:	6839      	ldr	r1, [r7, #0]
 801112a:	3103      	adds	r1, #3
 801112c:	b2d3      	uxtb	r3, r2
 801112e:	700b      	strb	r3, [r1, #0]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011136:	f04f 0200 	mov.w	r2, #0
 801113a:	f04f 0300 	mov.w	r3, #0
 801113e:	0e02      	lsrs	r2, r0, #24
 8011140:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011144:	0e0b      	lsrs	r3, r1, #24
 8011146:	6839      	ldr	r1, [r7, #0]
 8011148:	3104      	adds	r1, #4
 801114a:	b2d3      	uxtb	r3, r2
 801114c:	700b      	strb	r3, [r1, #0]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011154:	f04f 0200 	mov.w	r2, #0
 8011158:	f04f 0300 	mov.w	r3, #0
 801115c:	0c02      	lsrs	r2, r0, #16
 801115e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011162:	0c0b      	lsrs	r3, r1, #16
 8011164:	6839      	ldr	r1, [r7, #0]
 8011166:	3105      	adds	r1, #5
 8011168:	b2d3      	uxtb	r3, r2
 801116a:	700b      	strb	r3, [r1, #0]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011172:	f04f 0200 	mov.w	r2, #0
 8011176:	f04f 0300 	mov.w	r3, #0
 801117a:	0a02      	lsrs	r2, r0, #8
 801117c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011180:	0a0b      	lsrs	r3, r1, #8
 8011182:	6839      	ldr	r1, [r7, #0]
 8011184:	3106      	adds	r1, #6
 8011186:	b2d3      	uxtb	r3, r2
 8011188:	700b      	strb	r3, [r1, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011190:	6839      	ldr	r1, [r7, #0]
 8011192:	3107      	adds	r1, #7
 8011194:	b2d3      	uxtb	r3, r2
 8011196:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801119e:	f04f 0200 	mov.w	r2, #0
 80111a2:	f04f 0300 	mov.w	r3, #0
 80111a6:	0e0a      	lsrs	r2, r1, #24
 80111a8:	2300      	movs	r3, #0
 80111aa:	6839      	ldr	r1, [r7, #0]
 80111ac:	3108      	adds	r1, #8
 80111ae:	b2d3      	uxtb	r3, r2
 80111b0:	700b      	strb	r3, [r1, #0]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80111b8:	f04f 0200 	mov.w	r2, #0
 80111bc:	f04f 0300 	mov.w	r3, #0
 80111c0:	0c0a      	lsrs	r2, r1, #16
 80111c2:	2300      	movs	r3, #0
 80111c4:	6839      	ldr	r1, [r7, #0]
 80111c6:	3109      	adds	r1, #9
 80111c8:	b2d3      	uxtb	r3, r2
 80111ca:	700b      	strb	r3, [r1, #0]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80111d2:	f04f 0200 	mov.w	r2, #0
 80111d6:	f04f 0300 	mov.w	r3, #0
 80111da:	0a0a      	lsrs	r2, r1, #8
 80111dc:	2300      	movs	r3, #0
 80111de:	6839      	ldr	r1, [r7, #0]
 80111e0:	310a      	adds	r1, #10
 80111e2:	b2d3      	uxtb	r3, r2
 80111e4:	700b      	strb	r3, [r1, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80111ec:	f04f 0200 	mov.w	r2, #0
 80111f0:	f04f 0300 	mov.w	r3, #0
 80111f4:	000a      	movs	r2, r1
 80111f6:	2300      	movs	r3, #0
 80111f8:	6839      	ldr	r1, [r7, #0]
 80111fa:	310b      	adds	r1, #11
 80111fc:	b2d3      	uxtb	r3, r2
 80111fe:	700b      	strb	r3, [r1, #0]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8011206:	f04f 0200 	mov.w	r2, #0
 801120a:	f04f 0300 	mov.w	r3, #0
 801120e:	0e02      	lsrs	r2, r0, #24
 8011210:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011214:	0e0b      	lsrs	r3, r1, #24
 8011216:	6839      	ldr	r1, [r7, #0]
 8011218:	310c      	adds	r1, #12
 801121a:	b2d3      	uxtb	r3, r2
 801121c:	700b      	strb	r3, [r1, #0]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8011224:	f04f 0200 	mov.w	r2, #0
 8011228:	f04f 0300 	mov.w	r3, #0
 801122c:	0c02      	lsrs	r2, r0, #16
 801122e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011232:	0c0b      	lsrs	r3, r1, #16
 8011234:	6839      	ldr	r1, [r7, #0]
 8011236:	310d      	adds	r1, #13
 8011238:	b2d3      	uxtb	r3, r2
 801123a:	700b      	strb	r3, [r1, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8011242:	f04f 0200 	mov.w	r2, #0
 8011246:	f04f 0300 	mov.w	r3, #0
 801124a:	0a02      	lsrs	r2, r0, #8
 801124c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011250:	0a0b      	lsrs	r3, r1, #8
 8011252:	6839      	ldr	r1, [r7, #0]
 8011254:	310e      	adds	r1, #14
 8011256:	b2d3      	uxtb	r3, r2
 8011258:	700b      	strb	r3, [r1, #0]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8011260:	6839      	ldr	r1, [r7, #0]
 8011262:	310f      	adds	r1, #15
 8011264:	b2d3      	uxtb	r3, r2
 8011266:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801126e:	f04f 0200 	mov.w	r2, #0
 8011272:	f04f 0300 	mov.w	r3, #0
 8011276:	0e0a      	lsrs	r2, r1, #24
 8011278:	2300      	movs	r3, #0
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	3110      	adds	r1, #16
 801127e:	b2d3      	uxtb	r3, r2
 8011280:	700b      	strb	r3, [r1, #0]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8011288:	f04f 0200 	mov.w	r2, #0
 801128c:	f04f 0300 	mov.w	r3, #0
 8011290:	0c0a      	lsrs	r2, r1, #16
 8011292:	2300      	movs	r3, #0
 8011294:	6839      	ldr	r1, [r7, #0]
 8011296:	3111      	adds	r1, #17
 8011298:	b2d3      	uxtb	r3, r2
 801129a:	700b      	strb	r3, [r1, #0]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80112a2:	f04f 0200 	mov.w	r2, #0
 80112a6:	f04f 0300 	mov.w	r3, #0
 80112aa:	0a0a      	lsrs	r2, r1, #8
 80112ac:	2300      	movs	r3, #0
 80112ae:	6839      	ldr	r1, [r7, #0]
 80112b0:	3112      	adds	r1, #18
 80112b2:	b2d3      	uxtb	r3, r2
 80112b4:	700b      	strb	r3, [r1, #0]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80112bc:	f04f 0200 	mov.w	r2, #0
 80112c0:	f04f 0300 	mov.w	r3, #0
 80112c4:	000a      	movs	r2, r1
 80112c6:	2300      	movs	r3, #0
 80112c8:	6839      	ldr	r1, [r7, #0]
 80112ca:	3113      	adds	r1, #19
 80112cc:	b2d3      	uxtb	r3, r2
 80112ce:	700b      	strb	r3, [r1, #0]
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80112d6:	f04f 0200 	mov.w	r2, #0
 80112da:	f04f 0300 	mov.w	r3, #0
 80112de:	0e02      	lsrs	r2, r0, #24
 80112e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80112e4:	0e0b      	lsrs	r3, r1, #24
 80112e6:	6839      	ldr	r1, [r7, #0]
 80112e8:	3114      	adds	r1, #20
 80112ea:	b2d3      	uxtb	r3, r2
 80112ec:	700b      	strb	r3, [r1, #0]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80112f4:	f04f 0200 	mov.w	r2, #0
 80112f8:	f04f 0300 	mov.w	r3, #0
 80112fc:	0c02      	lsrs	r2, r0, #16
 80112fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011302:	0c0b      	lsrs	r3, r1, #16
 8011304:	6839      	ldr	r1, [r7, #0]
 8011306:	3115      	adds	r1, #21
 8011308:	b2d3      	uxtb	r3, r2
 801130a:	700b      	strb	r3, [r1, #0]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8011312:	f04f 0200 	mov.w	r2, #0
 8011316:	f04f 0300 	mov.w	r3, #0
 801131a:	0a02      	lsrs	r2, r0, #8
 801131c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011320:	0a0b      	lsrs	r3, r1, #8
 8011322:	6839      	ldr	r1, [r7, #0]
 8011324:	3116      	adds	r1, #22
 8011326:	b2d3      	uxtb	r3, r2
 8011328:	700b      	strb	r3, [r1, #0]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011330:	6839      	ldr	r1, [r7, #0]
 8011332:	3117      	adds	r1, #23
 8011334:	b2d3      	uxtb	r3, r2
 8011336:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 801133e:	f04f 0200 	mov.w	r2, #0
 8011342:	f04f 0300 	mov.w	r3, #0
 8011346:	0e0a      	lsrs	r2, r1, #24
 8011348:	2300      	movs	r3, #0
 801134a:	6839      	ldr	r1, [r7, #0]
 801134c:	3118      	adds	r1, #24
 801134e:	b2d3      	uxtb	r3, r2
 8011350:	700b      	strb	r3, [r1, #0]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8011358:	f04f 0200 	mov.w	r2, #0
 801135c:	f04f 0300 	mov.w	r3, #0
 8011360:	0c0a      	lsrs	r2, r1, #16
 8011362:	2300      	movs	r3, #0
 8011364:	6839      	ldr	r1, [r7, #0]
 8011366:	3119      	adds	r1, #25
 8011368:	b2d3      	uxtb	r3, r2
 801136a:	700b      	strb	r3, [r1, #0]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8011372:	f04f 0200 	mov.w	r2, #0
 8011376:	f04f 0300 	mov.w	r3, #0
 801137a:	0a0a      	lsrs	r2, r1, #8
 801137c:	2300      	movs	r3, #0
 801137e:	6839      	ldr	r1, [r7, #0]
 8011380:	311a      	adds	r1, #26
 8011382:	b2d3      	uxtb	r3, r2
 8011384:	700b      	strb	r3, [r1, #0]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 801138c:	f04f 0200 	mov.w	r2, #0
 8011390:	f04f 0300 	mov.w	r3, #0
 8011394:	000a      	movs	r2, r1
 8011396:	2300      	movs	r3, #0
 8011398:	6839      	ldr	r1, [r7, #0]
 801139a:	311b      	adds	r1, #27
 801139c:	b2d3      	uxtb	r3, r2
 801139e:	700b      	strb	r3, [r1, #0]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80113a6:	f04f 0200 	mov.w	r2, #0
 80113aa:	f04f 0300 	mov.w	r3, #0
 80113ae:	0e02      	lsrs	r2, r0, #24
 80113b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80113b4:	0e0b      	lsrs	r3, r1, #24
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	311c      	adds	r1, #28
 80113ba:	b2d3      	uxtb	r3, r2
 80113bc:	700b      	strb	r3, [r1, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80113c4:	f04f 0200 	mov.w	r2, #0
 80113c8:	f04f 0300 	mov.w	r3, #0
 80113cc:	0c02      	lsrs	r2, r0, #16
 80113ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80113d2:	0c0b      	lsrs	r3, r1, #16
 80113d4:	6839      	ldr	r1, [r7, #0]
 80113d6:	311d      	adds	r1, #29
 80113d8:	b2d3      	uxtb	r3, r2
 80113da:	700b      	strb	r3, [r1, #0]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80113e2:	f04f 0200 	mov.w	r2, #0
 80113e6:	f04f 0300 	mov.w	r3, #0
 80113ea:	0a02      	lsrs	r2, r0, #8
 80113ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80113f0:	0a0b      	lsrs	r3, r1, #8
 80113f2:	6839      	ldr	r1, [r7, #0]
 80113f4:	311e      	adds	r1, #30
 80113f6:	b2d3      	uxtb	r3, r2
 80113f8:	700b      	strb	r3, [r1, #0]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8011400:	6839      	ldr	r1, [r7, #0]
 8011402:	311f      	adds	r1, #31
 8011404:	b2d3      	uxtb	r3, r2
 8011406:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 801140e:	f04f 0200 	mov.w	r2, #0
 8011412:	f04f 0300 	mov.w	r3, #0
 8011416:	0e0a      	lsrs	r2, r1, #24
 8011418:	2300      	movs	r3, #0
 801141a:	6839      	ldr	r1, [r7, #0]
 801141c:	3120      	adds	r1, #32
 801141e:	b2d3      	uxtb	r3, r2
 8011420:	700b      	strb	r3, [r1, #0]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8011428:	f04f 0200 	mov.w	r2, #0
 801142c:	f04f 0300 	mov.w	r3, #0
 8011430:	0c0a      	lsrs	r2, r1, #16
 8011432:	2300      	movs	r3, #0
 8011434:	6839      	ldr	r1, [r7, #0]
 8011436:	3121      	adds	r1, #33	; 0x21
 8011438:	b2d3      	uxtb	r3, r2
 801143a:	700b      	strb	r3, [r1, #0]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8011442:	f04f 0200 	mov.w	r2, #0
 8011446:	f04f 0300 	mov.w	r3, #0
 801144a:	0a0a      	lsrs	r2, r1, #8
 801144c:	2300      	movs	r3, #0
 801144e:	6839      	ldr	r1, [r7, #0]
 8011450:	3122      	adds	r1, #34	; 0x22
 8011452:	b2d3      	uxtb	r3, r2
 8011454:	700b      	strb	r3, [r1, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 801145c:	f04f 0200 	mov.w	r2, #0
 8011460:	f04f 0300 	mov.w	r3, #0
 8011464:	000a      	movs	r2, r1
 8011466:	2300      	movs	r3, #0
 8011468:	6839      	ldr	r1, [r7, #0]
 801146a:	3123      	adds	r1, #35	; 0x23
 801146c:	b2d3      	uxtb	r3, r2
 801146e:	700b      	strb	r3, [r1, #0]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8011476:	f04f 0200 	mov.w	r2, #0
 801147a:	f04f 0300 	mov.w	r3, #0
 801147e:	0e02      	lsrs	r2, r0, #24
 8011480:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011484:	0e0b      	lsrs	r3, r1, #24
 8011486:	6839      	ldr	r1, [r7, #0]
 8011488:	3124      	adds	r1, #36	; 0x24
 801148a:	b2d3      	uxtb	r3, r2
 801148c:	700b      	strb	r3, [r1, #0]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8011494:	f04f 0200 	mov.w	r2, #0
 8011498:	f04f 0300 	mov.w	r3, #0
 801149c:	0c02      	lsrs	r2, r0, #16
 801149e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80114a2:	0c0b      	lsrs	r3, r1, #16
 80114a4:	6839      	ldr	r1, [r7, #0]
 80114a6:	3125      	adds	r1, #37	; 0x25
 80114a8:	b2d3      	uxtb	r3, r2
 80114aa:	700b      	strb	r3, [r1, #0]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80114b2:	f04f 0200 	mov.w	r2, #0
 80114b6:	f04f 0300 	mov.w	r3, #0
 80114ba:	0a02      	lsrs	r2, r0, #8
 80114bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80114c0:	0a0b      	lsrs	r3, r1, #8
 80114c2:	6839      	ldr	r1, [r7, #0]
 80114c4:	3126      	adds	r1, #38	; 0x26
 80114c6:	b2d3      	uxtb	r3, r2
 80114c8:	700b      	strb	r3, [r1, #0]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80114d0:	6839      	ldr	r1, [r7, #0]
 80114d2:	3127      	adds	r1, #39	; 0x27
 80114d4:	b2d3      	uxtb	r3, r2
 80114d6:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80114de:	f04f 0200 	mov.w	r2, #0
 80114e2:	f04f 0300 	mov.w	r3, #0
 80114e6:	0e0a      	lsrs	r2, r1, #24
 80114e8:	2300      	movs	r3, #0
 80114ea:	6839      	ldr	r1, [r7, #0]
 80114ec:	3128      	adds	r1, #40	; 0x28
 80114ee:	b2d3      	uxtb	r3, r2
 80114f0:	700b      	strb	r3, [r1, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80114f8:	f04f 0200 	mov.w	r2, #0
 80114fc:	f04f 0300 	mov.w	r3, #0
 8011500:	0c0a      	lsrs	r2, r1, #16
 8011502:	2300      	movs	r3, #0
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	3129      	adds	r1, #41	; 0x29
 8011508:	b2d3      	uxtb	r3, r2
 801150a:	700b      	strb	r3, [r1, #0]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011512:	f04f 0200 	mov.w	r2, #0
 8011516:	f04f 0300 	mov.w	r3, #0
 801151a:	0a0a      	lsrs	r2, r1, #8
 801151c:	2300      	movs	r3, #0
 801151e:	6839      	ldr	r1, [r7, #0]
 8011520:	312a      	adds	r1, #42	; 0x2a
 8011522:	b2d3      	uxtb	r3, r2
 8011524:	700b      	strb	r3, [r1, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801152c:	f04f 0200 	mov.w	r2, #0
 8011530:	f04f 0300 	mov.w	r3, #0
 8011534:	000a      	movs	r2, r1
 8011536:	2300      	movs	r3, #0
 8011538:	6839      	ldr	r1, [r7, #0]
 801153a:	312b      	adds	r1, #43	; 0x2b
 801153c:	b2d3      	uxtb	r3, r2
 801153e:	700b      	strb	r3, [r1, #0]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011546:	f04f 0200 	mov.w	r2, #0
 801154a:	f04f 0300 	mov.w	r3, #0
 801154e:	0e02      	lsrs	r2, r0, #24
 8011550:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011554:	0e0b      	lsrs	r3, r1, #24
 8011556:	6839      	ldr	r1, [r7, #0]
 8011558:	312c      	adds	r1, #44	; 0x2c
 801155a:	b2d3      	uxtb	r3, r2
 801155c:	700b      	strb	r3, [r1, #0]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011564:	f04f 0200 	mov.w	r2, #0
 8011568:	f04f 0300 	mov.w	r3, #0
 801156c:	0c02      	lsrs	r2, r0, #16
 801156e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011572:	0c0b      	lsrs	r3, r1, #16
 8011574:	6839      	ldr	r1, [r7, #0]
 8011576:	312d      	adds	r1, #45	; 0x2d
 8011578:	b2d3      	uxtb	r3, r2
 801157a:	700b      	strb	r3, [r1, #0]
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011582:	f04f 0200 	mov.w	r2, #0
 8011586:	f04f 0300 	mov.w	r3, #0
 801158a:	0a02      	lsrs	r2, r0, #8
 801158c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011590:	0a0b      	lsrs	r3, r1, #8
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	312e      	adds	r1, #46	; 0x2e
 8011596:	b2d3      	uxtb	r3, r2
 8011598:	700b      	strb	r3, [r1, #0]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	312f      	adds	r1, #47	; 0x2f
 80115a4:	b2d3      	uxtb	r3, r2
 80115a6:	700b      	strb	r3, [r1, #0]

    if( ctx->is384 == 0 )
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f040 80d0 	bne.w	8011754 <mbedtls_sha512_finish_ret+0x8f2>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80115ba:	f04f 0200 	mov.w	r2, #0
 80115be:	f04f 0300 	mov.w	r3, #0
 80115c2:	0e0a      	lsrs	r2, r1, #24
 80115c4:	2300      	movs	r3, #0
 80115c6:	6839      	ldr	r1, [r7, #0]
 80115c8:	3130      	adds	r1, #48	; 0x30
 80115ca:	b2d3      	uxtb	r3, r2
 80115cc:	700b      	strb	r3, [r1, #0]
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80115d4:	f04f 0200 	mov.w	r2, #0
 80115d8:	f04f 0300 	mov.w	r3, #0
 80115dc:	0c0a      	lsrs	r2, r1, #16
 80115de:	2300      	movs	r3, #0
 80115e0:	6839      	ldr	r1, [r7, #0]
 80115e2:	3131      	adds	r1, #49	; 0x31
 80115e4:	b2d3      	uxtb	r3, r2
 80115e6:	700b      	strb	r3, [r1, #0]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80115ee:	f04f 0200 	mov.w	r2, #0
 80115f2:	f04f 0300 	mov.w	r3, #0
 80115f6:	0a0a      	lsrs	r2, r1, #8
 80115f8:	2300      	movs	r3, #0
 80115fa:	6839      	ldr	r1, [r7, #0]
 80115fc:	3132      	adds	r1, #50	; 0x32
 80115fe:	b2d3      	uxtb	r3, r2
 8011600:	700b      	strb	r3, [r1, #0]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8011608:	f04f 0200 	mov.w	r2, #0
 801160c:	f04f 0300 	mov.w	r3, #0
 8011610:	000a      	movs	r2, r1
 8011612:	2300      	movs	r3, #0
 8011614:	6839      	ldr	r1, [r7, #0]
 8011616:	3133      	adds	r1, #51	; 0x33
 8011618:	b2d3      	uxtb	r3, r2
 801161a:	700b      	strb	r3, [r1, #0]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8011622:	f04f 0200 	mov.w	r2, #0
 8011626:	f04f 0300 	mov.w	r3, #0
 801162a:	0e02      	lsrs	r2, r0, #24
 801162c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011630:	0e0b      	lsrs	r3, r1, #24
 8011632:	6839      	ldr	r1, [r7, #0]
 8011634:	3134      	adds	r1, #52	; 0x34
 8011636:	b2d3      	uxtb	r3, r2
 8011638:	700b      	strb	r3, [r1, #0]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8011640:	f04f 0200 	mov.w	r2, #0
 8011644:	f04f 0300 	mov.w	r3, #0
 8011648:	0c02      	lsrs	r2, r0, #16
 801164a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801164e:	0c0b      	lsrs	r3, r1, #16
 8011650:	6839      	ldr	r1, [r7, #0]
 8011652:	3135      	adds	r1, #53	; 0x35
 8011654:	b2d3      	uxtb	r3, r2
 8011656:	700b      	strb	r3, [r1, #0]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 801165e:	f04f 0200 	mov.w	r2, #0
 8011662:	f04f 0300 	mov.w	r3, #0
 8011666:	0a02      	lsrs	r2, r0, #8
 8011668:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801166c:	0a0b      	lsrs	r3, r1, #8
 801166e:	6839      	ldr	r1, [r7, #0]
 8011670:	3136      	adds	r1, #54	; 0x36
 8011672:	b2d3      	uxtb	r3, r2
 8011674:	700b      	strb	r3, [r1, #0]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 801167c:	6839      	ldr	r1, [r7, #0]
 801167e:	3137      	adds	r1, #55	; 0x37
 8011680:	b2d3      	uxtb	r3, r2
 8011682:	700b      	strb	r3, [r1, #0]
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801168a:	f04f 0200 	mov.w	r2, #0
 801168e:	f04f 0300 	mov.w	r3, #0
 8011692:	0e0a      	lsrs	r2, r1, #24
 8011694:	2300      	movs	r3, #0
 8011696:	6839      	ldr	r1, [r7, #0]
 8011698:	3138      	adds	r1, #56	; 0x38
 801169a:	b2d3      	uxtb	r3, r2
 801169c:	700b      	strb	r3, [r1, #0]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80116a4:	f04f 0200 	mov.w	r2, #0
 80116a8:	f04f 0300 	mov.w	r3, #0
 80116ac:	0c0a      	lsrs	r2, r1, #16
 80116ae:	2300      	movs	r3, #0
 80116b0:	6839      	ldr	r1, [r7, #0]
 80116b2:	3139      	adds	r1, #57	; 0x39
 80116b4:	b2d3      	uxtb	r3, r2
 80116b6:	700b      	strb	r3, [r1, #0]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80116be:	f04f 0200 	mov.w	r2, #0
 80116c2:	f04f 0300 	mov.w	r3, #0
 80116c6:	0a0a      	lsrs	r2, r1, #8
 80116c8:	2300      	movs	r3, #0
 80116ca:	6839      	ldr	r1, [r7, #0]
 80116cc:	313a      	adds	r1, #58	; 0x3a
 80116ce:	b2d3      	uxtb	r3, r2
 80116d0:	700b      	strb	r3, [r1, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80116d8:	f04f 0200 	mov.w	r2, #0
 80116dc:	f04f 0300 	mov.w	r3, #0
 80116e0:	000a      	movs	r2, r1
 80116e2:	2300      	movs	r3, #0
 80116e4:	6839      	ldr	r1, [r7, #0]
 80116e6:	313b      	adds	r1, #59	; 0x3b
 80116e8:	b2d3      	uxtb	r3, r2
 80116ea:	700b      	strb	r3, [r1, #0]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80116f2:	f04f 0200 	mov.w	r2, #0
 80116f6:	f04f 0300 	mov.w	r3, #0
 80116fa:	0e02      	lsrs	r2, r0, #24
 80116fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8011700:	0e0b      	lsrs	r3, r1, #24
 8011702:	6839      	ldr	r1, [r7, #0]
 8011704:	313c      	adds	r1, #60	; 0x3c
 8011706:	b2d3      	uxtb	r3, r2
 8011708:	700b      	strb	r3, [r1, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8011710:	f04f 0200 	mov.w	r2, #0
 8011714:	f04f 0300 	mov.w	r3, #0
 8011718:	0c02      	lsrs	r2, r0, #16
 801171a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801171e:	0c0b      	lsrs	r3, r1, #16
 8011720:	6839      	ldr	r1, [r7, #0]
 8011722:	313d      	adds	r1, #61	; 0x3d
 8011724:	b2d3      	uxtb	r3, r2
 8011726:	700b      	strb	r3, [r1, #0]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801172e:	f04f 0200 	mov.w	r2, #0
 8011732:	f04f 0300 	mov.w	r3, #0
 8011736:	0a02      	lsrs	r2, r0, #8
 8011738:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801173c:	0a0b      	lsrs	r3, r1, #8
 801173e:	6839      	ldr	r1, [r7, #0]
 8011740:	313e      	adds	r1, #62	; 0x3e
 8011742:	b2d3      	uxtb	r3, r2
 8011744:	700b      	strb	r3, [r1, #0]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 801174c:	6839      	ldr	r1, [r7, #0]
 801174e:	313f      	adds	r1, #63	; 0x3f
 8011750:	b2d3      	uxtb	r3, r2
 8011752:	700b      	strb	r3, [r1, #0]
    }

    return( 0 );
 8011754:	2300      	movs	r3, #0
}
 8011756:	4618      	mov	r0, r3
 8011758:	3720      	adds	r7, #32
 801175a:	46bd      	mov	sp, r7
 801175c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08011760 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b0bc      	sub	sp, #240	; 0xf0
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
 801176c:	603b      	str	r3, [r7, #0]

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 801176e:	f107 0310 	add.w	r3, r7, #16
 8011772:	4618      	mov	r0, r3
 8011774:	f7fd f94a 	bl	800ea0c <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 8011778:	f107 0310 	add.w	r3, r7, #16
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	4618      	mov	r0, r3
 8011780:	f7fd f962 	bl	800ea48 <mbedtls_sha512_starts_ret>
 8011784:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8011788:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801178c:	2b00      	cmp	r3, #0
 801178e:	d118      	bne.n	80117c2 <mbedtls_sha512_ret+0x62>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 8011790:	f107 0310 	add.w	r3, r7, #16
 8011794:	68ba      	ldr	r2, [r7, #8]
 8011796:	68f9      	ldr	r1, [r7, #12]
 8011798:	4618      	mov	r0, r3
 801179a:	f7ff fad7 	bl	8010d4c <mbedtls_sha512_update_ret>
 801179e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80117a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d10d      	bne.n	80117c6 <mbedtls_sha512_ret+0x66>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 80117aa:	f107 0310 	add.w	r3, r7, #16
 80117ae:	6879      	ldr	r1, [r7, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7ff fb56 	bl	8010e62 <mbedtls_sha512_finish_ret>
 80117b6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80117ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117be:	2b00      	cmp	r3, #0
        goto exit;

exit:
 80117c0:	e002      	b.n	80117c8 <mbedtls_sha512_ret+0x68>
        goto exit;
 80117c2:	bf00      	nop
 80117c4:	e000      	b.n	80117c8 <mbedtls_sha512_ret+0x68>
        goto exit;
 80117c6:	bf00      	nop
    mbedtls_sha512_free( &ctx );
 80117c8:	f107 0310 	add.w	r3, r7, #16
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fd f92a 	bl	800ea26 <mbedtls_sha512_free>

    return( ret );
 80117d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	37f0      	adds	r7, #240	; 0xf0
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
	...

080117e0 <calloc>:
 80117e0:	4b02      	ldr	r3, [pc, #8]	; (80117ec <calloc+0xc>)
 80117e2:	460a      	mov	r2, r1
 80117e4:	4601      	mov	r1, r0
 80117e6:	6818      	ldr	r0, [r3, #0]
 80117e8:	f000 b84a 	b.w	8011880 <_calloc_r>
 80117ec:	20000014 	.word	0x20000014

080117f0 <__errno>:
 80117f0:	4b01      	ldr	r3, [pc, #4]	; (80117f8 <__errno+0x8>)
 80117f2:	6818      	ldr	r0, [r3, #0]
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	20000014 	.word	0x20000014

080117fc <__libc_init_array>:
 80117fc:	b570      	push	{r4, r5, r6, lr}
 80117fe:	4d0d      	ldr	r5, [pc, #52]	; (8011834 <__libc_init_array+0x38>)
 8011800:	4c0d      	ldr	r4, [pc, #52]	; (8011838 <__libc_init_array+0x3c>)
 8011802:	1b64      	subs	r4, r4, r5
 8011804:	10a4      	asrs	r4, r4, #2
 8011806:	2600      	movs	r6, #0
 8011808:	42a6      	cmp	r6, r4
 801180a:	d109      	bne.n	8011820 <__libc_init_array+0x24>
 801180c:	4d0b      	ldr	r5, [pc, #44]	; (801183c <__libc_init_array+0x40>)
 801180e:	4c0c      	ldr	r4, [pc, #48]	; (8011840 <__libc_init_array+0x44>)
 8011810:	f000 ffda 	bl	80127c8 <_init>
 8011814:	1b64      	subs	r4, r4, r5
 8011816:	10a4      	asrs	r4, r4, #2
 8011818:	2600      	movs	r6, #0
 801181a:	42a6      	cmp	r6, r4
 801181c:	d105      	bne.n	801182a <__libc_init_array+0x2e>
 801181e:	bd70      	pop	{r4, r5, r6, pc}
 8011820:	f855 3b04 	ldr.w	r3, [r5], #4
 8011824:	4798      	blx	r3
 8011826:	3601      	adds	r6, #1
 8011828:	e7ee      	b.n	8011808 <__libc_init_array+0xc>
 801182a:	f855 3b04 	ldr.w	r3, [r5], #4
 801182e:	4798      	blx	r3
 8011830:	3601      	adds	r6, #1
 8011832:	e7f2      	b.n	801181a <__libc_init_array+0x1e>
 8011834:	08015078 	.word	0x08015078
 8011838:	08015078 	.word	0x08015078
 801183c:	08015078 	.word	0x08015078
 8011840:	0801507c 	.word	0x0801507c

08011844 <free>:
 8011844:	4b02      	ldr	r3, [pc, #8]	; (8011850 <free+0xc>)
 8011846:	4601      	mov	r1, r0
 8011848:	6818      	ldr	r0, [r3, #0]
 801184a:	f000 b82f 	b.w	80118ac <_free_r>
 801184e:	bf00      	nop
 8011850:	20000014 	.word	0x20000014

08011854 <memcpy>:
 8011854:	440a      	add	r2, r1
 8011856:	4291      	cmp	r1, r2
 8011858:	f100 33ff 	add.w	r3, r0, #4294967295
 801185c:	d100      	bne.n	8011860 <memcpy+0xc>
 801185e:	4770      	bx	lr
 8011860:	b510      	push	{r4, lr}
 8011862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011866:	f803 4f01 	strb.w	r4, [r3, #1]!
 801186a:	4291      	cmp	r1, r2
 801186c:	d1f9      	bne.n	8011862 <memcpy+0xe>
 801186e:	bd10      	pop	{r4, pc}

08011870 <memset>:
 8011870:	4402      	add	r2, r0
 8011872:	4603      	mov	r3, r0
 8011874:	4293      	cmp	r3, r2
 8011876:	d100      	bne.n	801187a <memset+0xa>
 8011878:	4770      	bx	lr
 801187a:	f803 1b01 	strb.w	r1, [r3], #1
 801187e:	e7f9      	b.n	8011874 <memset+0x4>

08011880 <_calloc_r>:
 8011880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011882:	fba1 2402 	umull	r2, r4, r1, r2
 8011886:	b94c      	cbnz	r4, 801189c <_calloc_r+0x1c>
 8011888:	4611      	mov	r1, r2
 801188a:	9201      	str	r2, [sp, #4]
 801188c:	f000 f87a 	bl	8011984 <_malloc_r>
 8011890:	9a01      	ldr	r2, [sp, #4]
 8011892:	4605      	mov	r5, r0
 8011894:	b930      	cbnz	r0, 80118a4 <_calloc_r+0x24>
 8011896:	4628      	mov	r0, r5
 8011898:	b003      	add	sp, #12
 801189a:	bd30      	pop	{r4, r5, pc}
 801189c:	220c      	movs	r2, #12
 801189e:	6002      	str	r2, [r0, #0]
 80118a0:	2500      	movs	r5, #0
 80118a2:	e7f8      	b.n	8011896 <_calloc_r+0x16>
 80118a4:	4621      	mov	r1, r4
 80118a6:	f7ff ffe3 	bl	8011870 <memset>
 80118aa:	e7f4      	b.n	8011896 <_calloc_r+0x16>

080118ac <_free_r>:
 80118ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118ae:	2900      	cmp	r1, #0
 80118b0:	d044      	beq.n	801193c <_free_r+0x90>
 80118b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118b6:	9001      	str	r0, [sp, #4]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f1a1 0404 	sub.w	r4, r1, #4
 80118be:	bfb8      	it	lt
 80118c0:	18e4      	addlt	r4, r4, r3
 80118c2:	f000 f9f3 	bl	8011cac <__malloc_lock>
 80118c6:	4a1e      	ldr	r2, [pc, #120]	; (8011940 <_free_r+0x94>)
 80118c8:	9801      	ldr	r0, [sp, #4]
 80118ca:	6813      	ldr	r3, [r2, #0]
 80118cc:	b933      	cbnz	r3, 80118dc <_free_r+0x30>
 80118ce:	6063      	str	r3, [r4, #4]
 80118d0:	6014      	str	r4, [r2, #0]
 80118d2:	b003      	add	sp, #12
 80118d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118d8:	f000 b9ee 	b.w	8011cb8 <__malloc_unlock>
 80118dc:	42a3      	cmp	r3, r4
 80118de:	d908      	bls.n	80118f2 <_free_r+0x46>
 80118e0:	6825      	ldr	r5, [r4, #0]
 80118e2:	1961      	adds	r1, r4, r5
 80118e4:	428b      	cmp	r3, r1
 80118e6:	bf01      	itttt	eq
 80118e8:	6819      	ldreq	r1, [r3, #0]
 80118ea:	685b      	ldreq	r3, [r3, #4]
 80118ec:	1949      	addeq	r1, r1, r5
 80118ee:	6021      	streq	r1, [r4, #0]
 80118f0:	e7ed      	b.n	80118ce <_free_r+0x22>
 80118f2:	461a      	mov	r2, r3
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	b10b      	cbz	r3, 80118fc <_free_r+0x50>
 80118f8:	42a3      	cmp	r3, r4
 80118fa:	d9fa      	bls.n	80118f2 <_free_r+0x46>
 80118fc:	6811      	ldr	r1, [r2, #0]
 80118fe:	1855      	adds	r5, r2, r1
 8011900:	42a5      	cmp	r5, r4
 8011902:	d10b      	bne.n	801191c <_free_r+0x70>
 8011904:	6824      	ldr	r4, [r4, #0]
 8011906:	4421      	add	r1, r4
 8011908:	1854      	adds	r4, r2, r1
 801190a:	42a3      	cmp	r3, r4
 801190c:	6011      	str	r1, [r2, #0]
 801190e:	d1e0      	bne.n	80118d2 <_free_r+0x26>
 8011910:	681c      	ldr	r4, [r3, #0]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	6053      	str	r3, [r2, #4]
 8011916:	4421      	add	r1, r4
 8011918:	6011      	str	r1, [r2, #0]
 801191a:	e7da      	b.n	80118d2 <_free_r+0x26>
 801191c:	d902      	bls.n	8011924 <_free_r+0x78>
 801191e:	230c      	movs	r3, #12
 8011920:	6003      	str	r3, [r0, #0]
 8011922:	e7d6      	b.n	80118d2 <_free_r+0x26>
 8011924:	6825      	ldr	r5, [r4, #0]
 8011926:	1961      	adds	r1, r4, r5
 8011928:	428b      	cmp	r3, r1
 801192a:	bf04      	itt	eq
 801192c:	6819      	ldreq	r1, [r3, #0]
 801192e:	685b      	ldreq	r3, [r3, #4]
 8011930:	6063      	str	r3, [r4, #4]
 8011932:	bf04      	itt	eq
 8011934:	1949      	addeq	r1, r1, r5
 8011936:	6021      	streq	r1, [r4, #0]
 8011938:	6054      	str	r4, [r2, #4]
 801193a:	e7ca      	b.n	80118d2 <_free_r+0x26>
 801193c:	b003      	add	sp, #12
 801193e:	bd30      	pop	{r4, r5, pc}
 8011940:	20000790 	.word	0x20000790

08011944 <sbrk_aligned>:
 8011944:	b570      	push	{r4, r5, r6, lr}
 8011946:	4e0e      	ldr	r6, [pc, #56]	; (8011980 <sbrk_aligned+0x3c>)
 8011948:	460c      	mov	r4, r1
 801194a:	6831      	ldr	r1, [r6, #0]
 801194c:	4605      	mov	r5, r0
 801194e:	b911      	cbnz	r1, 8011956 <sbrk_aligned+0x12>
 8011950:	f000 f8a4 	bl	8011a9c <_sbrk_r>
 8011954:	6030      	str	r0, [r6, #0]
 8011956:	4621      	mov	r1, r4
 8011958:	4628      	mov	r0, r5
 801195a:	f000 f89f 	bl	8011a9c <_sbrk_r>
 801195e:	1c43      	adds	r3, r0, #1
 8011960:	d00a      	beq.n	8011978 <sbrk_aligned+0x34>
 8011962:	1cc4      	adds	r4, r0, #3
 8011964:	f024 0403 	bic.w	r4, r4, #3
 8011968:	42a0      	cmp	r0, r4
 801196a:	d007      	beq.n	801197c <sbrk_aligned+0x38>
 801196c:	1a21      	subs	r1, r4, r0
 801196e:	4628      	mov	r0, r5
 8011970:	f000 f894 	bl	8011a9c <_sbrk_r>
 8011974:	3001      	adds	r0, #1
 8011976:	d101      	bne.n	801197c <sbrk_aligned+0x38>
 8011978:	f04f 34ff 	mov.w	r4, #4294967295
 801197c:	4620      	mov	r0, r4
 801197e:	bd70      	pop	{r4, r5, r6, pc}
 8011980:	20000794 	.word	0x20000794

08011984 <_malloc_r>:
 8011984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011988:	1ccd      	adds	r5, r1, #3
 801198a:	f025 0503 	bic.w	r5, r5, #3
 801198e:	3508      	adds	r5, #8
 8011990:	2d0c      	cmp	r5, #12
 8011992:	bf38      	it	cc
 8011994:	250c      	movcc	r5, #12
 8011996:	2d00      	cmp	r5, #0
 8011998:	4607      	mov	r7, r0
 801199a:	db01      	blt.n	80119a0 <_malloc_r+0x1c>
 801199c:	42a9      	cmp	r1, r5
 801199e:	d905      	bls.n	80119ac <_malloc_r+0x28>
 80119a0:	230c      	movs	r3, #12
 80119a2:	603b      	str	r3, [r7, #0]
 80119a4:	2600      	movs	r6, #0
 80119a6:	4630      	mov	r0, r6
 80119a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ac:	4e2e      	ldr	r6, [pc, #184]	; (8011a68 <_malloc_r+0xe4>)
 80119ae:	f000 f97d 	bl	8011cac <__malloc_lock>
 80119b2:	6833      	ldr	r3, [r6, #0]
 80119b4:	461c      	mov	r4, r3
 80119b6:	bb34      	cbnz	r4, 8011a06 <_malloc_r+0x82>
 80119b8:	4629      	mov	r1, r5
 80119ba:	4638      	mov	r0, r7
 80119bc:	f7ff ffc2 	bl	8011944 <sbrk_aligned>
 80119c0:	1c43      	adds	r3, r0, #1
 80119c2:	4604      	mov	r4, r0
 80119c4:	d14d      	bne.n	8011a62 <_malloc_r+0xde>
 80119c6:	6834      	ldr	r4, [r6, #0]
 80119c8:	4626      	mov	r6, r4
 80119ca:	2e00      	cmp	r6, #0
 80119cc:	d140      	bne.n	8011a50 <_malloc_r+0xcc>
 80119ce:	6823      	ldr	r3, [r4, #0]
 80119d0:	4631      	mov	r1, r6
 80119d2:	4638      	mov	r0, r7
 80119d4:	eb04 0803 	add.w	r8, r4, r3
 80119d8:	f000 f860 	bl	8011a9c <_sbrk_r>
 80119dc:	4580      	cmp	r8, r0
 80119de:	d13a      	bne.n	8011a56 <_malloc_r+0xd2>
 80119e0:	6821      	ldr	r1, [r4, #0]
 80119e2:	3503      	adds	r5, #3
 80119e4:	1a6d      	subs	r5, r5, r1
 80119e6:	f025 0503 	bic.w	r5, r5, #3
 80119ea:	3508      	adds	r5, #8
 80119ec:	2d0c      	cmp	r5, #12
 80119ee:	bf38      	it	cc
 80119f0:	250c      	movcc	r5, #12
 80119f2:	4629      	mov	r1, r5
 80119f4:	4638      	mov	r0, r7
 80119f6:	f7ff ffa5 	bl	8011944 <sbrk_aligned>
 80119fa:	3001      	adds	r0, #1
 80119fc:	d02b      	beq.n	8011a56 <_malloc_r+0xd2>
 80119fe:	6823      	ldr	r3, [r4, #0]
 8011a00:	442b      	add	r3, r5
 8011a02:	6023      	str	r3, [r4, #0]
 8011a04:	e00e      	b.n	8011a24 <_malloc_r+0xa0>
 8011a06:	6822      	ldr	r2, [r4, #0]
 8011a08:	1b52      	subs	r2, r2, r5
 8011a0a:	d41e      	bmi.n	8011a4a <_malloc_r+0xc6>
 8011a0c:	2a0b      	cmp	r2, #11
 8011a0e:	d916      	bls.n	8011a3e <_malloc_r+0xba>
 8011a10:	1961      	adds	r1, r4, r5
 8011a12:	42a3      	cmp	r3, r4
 8011a14:	6025      	str	r5, [r4, #0]
 8011a16:	bf18      	it	ne
 8011a18:	6059      	strne	r1, [r3, #4]
 8011a1a:	6863      	ldr	r3, [r4, #4]
 8011a1c:	bf08      	it	eq
 8011a1e:	6031      	streq	r1, [r6, #0]
 8011a20:	5162      	str	r2, [r4, r5]
 8011a22:	604b      	str	r3, [r1, #4]
 8011a24:	4638      	mov	r0, r7
 8011a26:	f104 060b 	add.w	r6, r4, #11
 8011a2a:	f000 f945 	bl	8011cb8 <__malloc_unlock>
 8011a2e:	f026 0607 	bic.w	r6, r6, #7
 8011a32:	1d23      	adds	r3, r4, #4
 8011a34:	1af2      	subs	r2, r6, r3
 8011a36:	d0b6      	beq.n	80119a6 <_malloc_r+0x22>
 8011a38:	1b9b      	subs	r3, r3, r6
 8011a3a:	50a3      	str	r3, [r4, r2]
 8011a3c:	e7b3      	b.n	80119a6 <_malloc_r+0x22>
 8011a3e:	6862      	ldr	r2, [r4, #4]
 8011a40:	42a3      	cmp	r3, r4
 8011a42:	bf0c      	ite	eq
 8011a44:	6032      	streq	r2, [r6, #0]
 8011a46:	605a      	strne	r2, [r3, #4]
 8011a48:	e7ec      	b.n	8011a24 <_malloc_r+0xa0>
 8011a4a:	4623      	mov	r3, r4
 8011a4c:	6864      	ldr	r4, [r4, #4]
 8011a4e:	e7b2      	b.n	80119b6 <_malloc_r+0x32>
 8011a50:	4634      	mov	r4, r6
 8011a52:	6876      	ldr	r6, [r6, #4]
 8011a54:	e7b9      	b.n	80119ca <_malloc_r+0x46>
 8011a56:	230c      	movs	r3, #12
 8011a58:	603b      	str	r3, [r7, #0]
 8011a5a:	4638      	mov	r0, r7
 8011a5c:	f000 f92c 	bl	8011cb8 <__malloc_unlock>
 8011a60:	e7a1      	b.n	80119a6 <_malloc_r+0x22>
 8011a62:	6025      	str	r5, [r4, #0]
 8011a64:	e7de      	b.n	8011a24 <_malloc_r+0xa0>
 8011a66:	bf00      	nop
 8011a68:	20000790 	.word	0x20000790

08011a6c <iprintf>:
 8011a6c:	b40f      	push	{r0, r1, r2, r3}
 8011a6e:	4b0a      	ldr	r3, [pc, #40]	; (8011a98 <iprintf+0x2c>)
 8011a70:	b513      	push	{r0, r1, r4, lr}
 8011a72:	681c      	ldr	r4, [r3, #0]
 8011a74:	b124      	cbz	r4, 8011a80 <iprintf+0x14>
 8011a76:	69a3      	ldr	r3, [r4, #24]
 8011a78:	b913      	cbnz	r3, 8011a80 <iprintf+0x14>
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	f000 f876 	bl	8011b6c <__sinit>
 8011a80:	ab05      	add	r3, sp, #20
 8011a82:	9a04      	ldr	r2, [sp, #16]
 8011a84:	68a1      	ldr	r1, [r4, #8]
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f000 f945 	bl	8011d18 <_vfiprintf_r>
 8011a8e:	b002      	add	sp, #8
 8011a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a94:	b004      	add	sp, #16
 8011a96:	4770      	bx	lr
 8011a98:	20000014 	.word	0x20000014

08011a9c <_sbrk_r>:
 8011a9c:	b538      	push	{r3, r4, r5, lr}
 8011a9e:	4d06      	ldr	r5, [pc, #24]	; (8011ab8 <_sbrk_r+0x1c>)
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	4608      	mov	r0, r1
 8011aa6:	602b      	str	r3, [r5, #0]
 8011aa8:	f7ef f9a6 	bl	8000df8 <_sbrk>
 8011aac:	1c43      	adds	r3, r0, #1
 8011aae:	d102      	bne.n	8011ab6 <_sbrk_r+0x1a>
 8011ab0:	682b      	ldr	r3, [r5, #0]
 8011ab2:	b103      	cbz	r3, 8011ab6 <_sbrk_r+0x1a>
 8011ab4:	6023      	str	r3, [r4, #0]
 8011ab6:	bd38      	pop	{r3, r4, r5, pc}
 8011ab8:	2000079c 	.word	0x2000079c

08011abc <std>:
 8011abc:	2300      	movs	r3, #0
 8011abe:	b510      	push	{r4, lr}
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8011ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011aca:	6083      	str	r3, [r0, #8]
 8011acc:	8181      	strh	r1, [r0, #12]
 8011ace:	6643      	str	r3, [r0, #100]	; 0x64
 8011ad0:	81c2      	strh	r2, [r0, #14]
 8011ad2:	6183      	str	r3, [r0, #24]
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	2208      	movs	r2, #8
 8011ad8:	305c      	adds	r0, #92	; 0x5c
 8011ada:	f7ff fec9 	bl	8011870 <memset>
 8011ade:	4b05      	ldr	r3, [pc, #20]	; (8011af4 <std+0x38>)
 8011ae0:	6263      	str	r3, [r4, #36]	; 0x24
 8011ae2:	4b05      	ldr	r3, [pc, #20]	; (8011af8 <std+0x3c>)
 8011ae4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ae6:	4b05      	ldr	r3, [pc, #20]	; (8011afc <std+0x40>)
 8011ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011aea:	4b05      	ldr	r3, [pc, #20]	; (8011b00 <std+0x44>)
 8011aec:	6224      	str	r4, [r4, #32]
 8011aee:	6323      	str	r3, [r4, #48]	; 0x30
 8011af0:	bd10      	pop	{r4, pc}
 8011af2:	bf00      	nop
 8011af4:	080122a1 	.word	0x080122a1
 8011af8:	080122c3 	.word	0x080122c3
 8011afc:	080122fb 	.word	0x080122fb
 8011b00:	0801231f 	.word	0x0801231f

08011b04 <_cleanup_r>:
 8011b04:	4901      	ldr	r1, [pc, #4]	; (8011b0c <_cleanup_r+0x8>)
 8011b06:	f000 b8af 	b.w	8011c68 <_fwalk_reent>
 8011b0a:	bf00      	nop
 8011b0c:	080125f9 	.word	0x080125f9

08011b10 <__sfmoreglue>:
 8011b10:	b570      	push	{r4, r5, r6, lr}
 8011b12:	2268      	movs	r2, #104	; 0x68
 8011b14:	1e4d      	subs	r5, r1, #1
 8011b16:	4355      	muls	r5, r2
 8011b18:	460e      	mov	r6, r1
 8011b1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b1e:	f7ff ff31 	bl	8011984 <_malloc_r>
 8011b22:	4604      	mov	r4, r0
 8011b24:	b140      	cbz	r0, 8011b38 <__sfmoreglue+0x28>
 8011b26:	2100      	movs	r1, #0
 8011b28:	e9c0 1600 	strd	r1, r6, [r0]
 8011b2c:	300c      	adds	r0, #12
 8011b2e:	60a0      	str	r0, [r4, #8]
 8011b30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011b34:	f7ff fe9c 	bl	8011870 <memset>
 8011b38:	4620      	mov	r0, r4
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}

08011b3c <__sfp_lock_acquire>:
 8011b3c:	4801      	ldr	r0, [pc, #4]	; (8011b44 <__sfp_lock_acquire+0x8>)
 8011b3e:	f000 b8b3 	b.w	8011ca8 <__retarget_lock_acquire_recursive>
 8011b42:	bf00      	nop
 8011b44:	20000799 	.word	0x20000799

08011b48 <__sfp_lock_release>:
 8011b48:	4801      	ldr	r0, [pc, #4]	; (8011b50 <__sfp_lock_release+0x8>)
 8011b4a:	f000 b8ae 	b.w	8011caa <__retarget_lock_release_recursive>
 8011b4e:	bf00      	nop
 8011b50:	20000799 	.word	0x20000799

08011b54 <__sinit_lock_acquire>:
 8011b54:	4801      	ldr	r0, [pc, #4]	; (8011b5c <__sinit_lock_acquire+0x8>)
 8011b56:	f000 b8a7 	b.w	8011ca8 <__retarget_lock_acquire_recursive>
 8011b5a:	bf00      	nop
 8011b5c:	2000079a 	.word	0x2000079a

08011b60 <__sinit_lock_release>:
 8011b60:	4801      	ldr	r0, [pc, #4]	; (8011b68 <__sinit_lock_release+0x8>)
 8011b62:	f000 b8a2 	b.w	8011caa <__retarget_lock_release_recursive>
 8011b66:	bf00      	nop
 8011b68:	2000079a 	.word	0x2000079a

08011b6c <__sinit>:
 8011b6c:	b510      	push	{r4, lr}
 8011b6e:	4604      	mov	r4, r0
 8011b70:	f7ff fff0 	bl	8011b54 <__sinit_lock_acquire>
 8011b74:	69a3      	ldr	r3, [r4, #24]
 8011b76:	b11b      	cbz	r3, 8011b80 <__sinit+0x14>
 8011b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b7c:	f7ff bff0 	b.w	8011b60 <__sinit_lock_release>
 8011b80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011b84:	6523      	str	r3, [r4, #80]	; 0x50
 8011b86:	4b13      	ldr	r3, [pc, #76]	; (8011bd4 <__sinit+0x68>)
 8011b88:	4a13      	ldr	r2, [pc, #76]	; (8011bd8 <__sinit+0x6c>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011b8e:	42a3      	cmp	r3, r4
 8011b90:	bf04      	itt	eq
 8011b92:	2301      	moveq	r3, #1
 8011b94:	61a3      	streq	r3, [r4, #24]
 8011b96:	4620      	mov	r0, r4
 8011b98:	f000 f820 	bl	8011bdc <__sfp>
 8011b9c:	6060      	str	r0, [r4, #4]
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	f000 f81c 	bl	8011bdc <__sfp>
 8011ba4:	60a0      	str	r0, [r4, #8]
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f000 f818 	bl	8011bdc <__sfp>
 8011bac:	2200      	movs	r2, #0
 8011bae:	60e0      	str	r0, [r4, #12]
 8011bb0:	2104      	movs	r1, #4
 8011bb2:	6860      	ldr	r0, [r4, #4]
 8011bb4:	f7ff ff82 	bl	8011abc <std>
 8011bb8:	68a0      	ldr	r0, [r4, #8]
 8011bba:	2201      	movs	r2, #1
 8011bbc:	2109      	movs	r1, #9
 8011bbe:	f7ff ff7d 	bl	8011abc <std>
 8011bc2:	68e0      	ldr	r0, [r4, #12]
 8011bc4:	2202      	movs	r2, #2
 8011bc6:	2112      	movs	r1, #18
 8011bc8:	f7ff ff78 	bl	8011abc <std>
 8011bcc:	2301      	movs	r3, #1
 8011bce:	61a3      	str	r3, [r4, #24]
 8011bd0:	e7d2      	b.n	8011b78 <__sinit+0xc>
 8011bd2:	bf00      	nop
 8011bd4:	08014fd8 	.word	0x08014fd8
 8011bd8:	08011b05 	.word	0x08011b05

08011bdc <__sfp>:
 8011bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bde:	4607      	mov	r7, r0
 8011be0:	f7ff ffac 	bl	8011b3c <__sfp_lock_acquire>
 8011be4:	4b1e      	ldr	r3, [pc, #120]	; (8011c60 <__sfp+0x84>)
 8011be6:	681e      	ldr	r6, [r3, #0]
 8011be8:	69b3      	ldr	r3, [r6, #24]
 8011bea:	b913      	cbnz	r3, 8011bf2 <__sfp+0x16>
 8011bec:	4630      	mov	r0, r6
 8011bee:	f7ff ffbd 	bl	8011b6c <__sinit>
 8011bf2:	3648      	adds	r6, #72	; 0x48
 8011bf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011bf8:	3b01      	subs	r3, #1
 8011bfa:	d503      	bpl.n	8011c04 <__sfp+0x28>
 8011bfc:	6833      	ldr	r3, [r6, #0]
 8011bfe:	b30b      	cbz	r3, 8011c44 <__sfp+0x68>
 8011c00:	6836      	ldr	r6, [r6, #0]
 8011c02:	e7f7      	b.n	8011bf4 <__sfp+0x18>
 8011c04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c08:	b9d5      	cbnz	r5, 8011c40 <__sfp+0x64>
 8011c0a:	4b16      	ldr	r3, [pc, #88]	; (8011c64 <__sfp+0x88>)
 8011c0c:	60e3      	str	r3, [r4, #12]
 8011c0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c12:	6665      	str	r5, [r4, #100]	; 0x64
 8011c14:	f000 f847 	bl	8011ca6 <__retarget_lock_init_recursive>
 8011c18:	f7ff ff96 	bl	8011b48 <__sfp_lock_release>
 8011c1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c24:	6025      	str	r5, [r4, #0]
 8011c26:	61a5      	str	r5, [r4, #24]
 8011c28:	2208      	movs	r2, #8
 8011c2a:	4629      	mov	r1, r5
 8011c2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c30:	f7ff fe1e 	bl	8011870 <memset>
 8011c34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c40:	3468      	adds	r4, #104	; 0x68
 8011c42:	e7d9      	b.n	8011bf8 <__sfp+0x1c>
 8011c44:	2104      	movs	r1, #4
 8011c46:	4638      	mov	r0, r7
 8011c48:	f7ff ff62 	bl	8011b10 <__sfmoreglue>
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	6030      	str	r0, [r6, #0]
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d1d5      	bne.n	8011c00 <__sfp+0x24>
 8011c54:	f7ff ff78 	bl	8011b48 <__sfp_lock_release>
 8011c58:	230c      	movs	r3, #12
 8011c5a:	603b      	str	r3, [r7, #0]
 8011c5c:	e7ee      	b.n	8011c3c <__sfp+0x60>
 8011c5e:	bf00      	nop
 8011c60:	08014fd8 	.word	0x08014fd8
 8011c64:	ffff0001 	.word	0xffff0001

08011c68 <_fwalk_reent>:
 8011c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	4688      	mov	r8, r1
 8011c70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c74:	2700      	movs	r7, #0
 8011c76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c7a:	f1b9 0901 	subs.w	r9, r9, #1
 8011c7e:	d505      	bpl.n	8011c8c <_fwalk_reent+0x24>
 8011c80:	6824      	ldr	r4, [r4, #0]
 8011c82:	2c00      	cmp	r4, #0
 8011c84:	d1f7      	bne.n	8011c76 <_fwalk_reent+0xe>
 8011c86:	4638      	mov	r0, r7
 8011c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c8c:	89ab      	ldrh	r3, [r5, #12]
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d907      	bls.n	8011ca2 <_fwalk_reent+0x3a>
 8011c92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c96:	3301      	adds	r3, #1
 8011c98:	d003      	beq.n	8011ca2 <_fwalk_reent+0x3a>
 8011c9a:	4629      	mov	r1, r5
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	47c0      	blx	r8
 8011ca0:	4307      	orrs	r7, r0
 8011ca2:	3568      	adds	r5, #104	; 0x68
 8011ca4:	e7e9      	b.n	8011c7a <_fwalk_reent+0x12>

08011ca6 <__retarget_lock_init_recursive>:
 8011ca6:	4770      	bx	lr

08011ca8 <__retarget_lock_acquire_recursive>:
 8011ca8:	4770      	bx	lr

08011caa <__retarget_lock_release_recursive>:
 8011caa:	4770      	bx	lr

08011cac <__malloc_lock>:
 8011cac:	4801      	ldr	r0, [pc, #4]	; (8011cb4 <__malloc_lock+0x8>)
 8011cae:	f7ff bffb 	b.w	8011ca8 <__retarget_lock_acquire_recursive>
 8011cb2:	bf00      	nop
 8011cb4:	20000798 	.word	0x20000798

08011cb8 <__malloc_unlock>:
 8011cb8:	4801      	ldr	r0, [pc, #4]	; (8011cc0 <__malloc_unlock+0x8>)
 8011cba:	f7ff bff6 	b.w	8011caa <__retarget_lock_release_recursive>
 8011cbe:	bf00      	nop
 8011cc0:	20000798 	.word	0x20000798

08011cc4 <__sfputc_r>:
 8011cc4:	6893      	ldr	r3, [r2, #8]
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	b410      	push	{r4}
 8011ccc:	6093      	str	r3, [r2, #8]
 8011cce:	da08      	bge.n	8011ce2 <__sfputc_r+0x1e>
 8011cd0:	6994      	ldr	r4, [r2, #24]
 8011cd2:	42a3      	cmp	r3, r4
 8011cd4:	db01      	blt.n	8011cda <__sfputc_r+0x16>
 8011cd6:	290a      	cmp	r1, #10
 8011cd8:	d103      	bne.n	8011ce2 <__sfputc_r+0x1e>
 8011cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cde:	f000 bb23 	b.w	8012328 <__swbuf_r>
 8011ce2:	6813      	ldr	r3, [r2, #0]
 8011ce4:	1c58      	adds	r0, r3, #1
 8011ce6:	6010      	str	r0, [r2, #0]
 8011ce8:	7019      	strb	r1, [r3, #0]
 8011cea:	4608      	mov	r0, r1
 8011cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cf0:	4770      	bx	lr

08011cf2 <__sfputs_r>:
 8011cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	460f      	mov	r7, r1
 8011cf8:	4614      	mov	r4, r2
 8011cfa:	18d5      	adds	r5, r2, r3
 8011cfc:	42ac      	cmp	r4, r5
 8011cfe:	d101      	bne.n	8011d04 <__sfputs_r+0x12>
 8011d00:	2000      	movs	r0, #0
 8011d02:	e007      	b.n	8011d14 <__sfputs_r+0x22>
 8011d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d08:	463a      	mov	r2, r7
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	f7ff ffda 	bl	8011cc4 <__sfputc_r>
 8011d10:	1c43      	adds	r3, r0, #1
 8011d12:	d1f3      	bne.n	8011cfc <__sfputs_r+0xa>
 8011d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d18 <_vfiprintf_r>:
 8011d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	460d      	mov	r5, r1
 8011d1e:	b09d      	sub	sp, #116	; 0x74
 8011d20:	4614      	mov	r4, r2
 8011d22:	4698      	mov	r8, r3
 8011d24:	4606      	mov	r6, r0
 8011d26:	b118      	cbz	r0, 8011d30 <_vfiprintf_r+0x18>
 8011d28:	6983      	ldr	r3, [r0, #24]
 8011d2a:	b90b      	cbnz	r3, 8011d30 <_vfiprintf_r+0x18>
 8011d2c:	f7ff ff1e 	bl	8011b6c <__sinit>
 8011d30:	4b89      	ldr	r3, [pc, #548]	; (8011f58 <_vfiprintf_r+0x240>)
 8011d32:	429d      	cmp	r5, r3
 8011d34:	d11b      	bne.n	8011d6e <_vfiprintf_r+0x56>
 8011d36:	6875      	ldr	r5, [r6, #4]
 8011d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d3a:	07d9      	lsls	r1, r3, #31
 8011d3c:	d405      	bmi.n	8011d4a <_vfiprintf_r+0x32>
 8011d3e:	89ab      	ldrh	r3, [r5, #12]
 8011d40:	059a      	lsls	r2, r3, #22
 8011d42:	d402      	bmi.n	8011d4a <_vfiprintf_r+0x32>
 8011d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d46:	f7ff ffaf 	bl	8011ca8 <__retarget_lock_acquire_recursive>
 8011d4a:	89ab      	ldrh	r3, [r5, #12]
 8011d4c:	071b      	lsls	r3, r3, #28
 8011d4e:	d501      	bpl.n	8011d54 <_vfiprintf_r+0x3c>
 8011d50:	692b      	ldr	r3, [r5, #16]
 8011d52:	b9eb      	cbnz	r3, 8011d90 <_vfiprintf_r+0x78>
 8011d54:	4629      	mov	r1, r5
 8011d56:	4630      	mov	r0, r6
 8011d58:	f000 fb4a 	bl	80123f0 <__swsetup_r>
 8011d5c:	b1c0      	cbz	r0, 8011d90 <_vfiprintf_r+0x78>
 8011d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d60:	07dc      	lsls	r4, r3, #31
 8011d62:	d50e      	bpl.n	8011d82 <_vfiprintf_r+0x6a>
 8011d64:	f04f 30ff 	mov.w	r0, #4294967295
 8011d68:	b01d      	add	sp, #116	; 0x74
 8011d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6e:	4b7b      	ldr	r3, [pc, #492]	; (8011f5c <_vfiprintf_r+0x244>)
 8011d70:	429d      	cmp	r5, r3
 8011d72:	d101      	bne.n	8011d78 <_vfiprintf_r+0x60>
 8011d74:	68b5      	ldr	r5, [r6, #8]
 8011d76:	e7df      	b.n	8011d38 <_vfiprintf_r+0x20>
 8011d78:	4b79      	ldr	r3, [pc, #484]	; (8011f60 <_vfiprintf_r+0x248>)
 8011d7a:	429d      	cmp	r5, r3
 8011d7c:	bf08      	it	eq
 8011d7e:	68f5      	ldreq	r5, [r6, #12]
 8011d80:	e7da      	b.n	8011d38 <_vfiprintf_r+0x20>
 8011d82:	89ab      	ldrh	r3, [r5, #12]
 8011d84:	0598      	lsls	r0, r3, #22
 8011d86:	d4ed      	bmi.n	8011d64 <_vfiprintf_r+0x4c>
 8011d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d8a:	f7ff ff8e 	bl	8011caa <__retarget_lock_release_recursive>
 8011d8e:	e7e9      	b.n	8011d64 <_vfiprintf_r+0x4c>
 8011d90:	2300      	movs	r3, #0
 8011d92:	9309      	str	r3, [sp, #36]	; 0x24
 8011d94:	2320      	movs	r3, #32
 8011d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d9e:	2330      	movs	r3, #48	; 0x30
 8011da0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011f64 <_vfiprintf_r+0x24c>
 8011da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011da8:	f04f 0901 	mov.w	r9, #1
 8011dac:	4623      	mov	r3, r4
 8011dae:	469a      	mov	sl, r3
 8011db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011db4:	b10a      	cbz	r2, 8011dba <_vfiprintf_r+0xa2>
 8011db6:	2a25      	cmp	r2, #37	; 0x25
 8011db8:	d1f9      	bne.n	8011dae <_vfiprintf_r+0x96>
 8011dba:	ebba 0b04 	subs.w	fp, sl, r4
 8011dbe:	d00b      	beq.n	8011dd8 <_vfiprintf_r+0xc0>
 8011dc0:	465b      	mov	r3, fp
 8011dc2:	4622      	mov	r2, r4
 8011dc4:	4629      	mov	r1, r5
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f7ff ff93 	bl	8011cf2 <__sfputs_r>
 8011dcc:	3001      	adds	r0, #1
 8011dce:	f000 80aa 	beq.w	8011f26 <_vfiprintf_r+0x20e>
 8011dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011dd4:	445a      	add	r2, fp
 8011dd6:	9209      	str	r2, [sp, #36]	; 0x24
 8011dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	f000 80a2 	beq.w	8011f26 <_vfiprintf_r+0x20e>
 8011de2:	2300      	movs	r3, #0
 8011de4:	f04f 32ff 	mov.w	r2, #4294967295
 8011de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dec:	f10a 0a01 	add.w	sl, sl, #1
 8011df0:	9304      	str	r3, [sp, #16]
 8011df2:	9307      	str	r3, [sp, #28]
 8011df4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011df8:	931a      	str	r3, [sp, #104]	; 0x68
 8011dfa:	4654      	mov	r4, sl
 8011dfc:	2205      	movs	r2, #5
 8011dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e02:	4858      	ldr	r0, [pc, #352]	; (8011f64 <_vfiprintf_r+0x24c>)
 8011e04:	f7ee fa0c 	bl	8000220 <memchr>
 8011e08:	9a04      	ldr	r2, [sp, #16]
 8011e0a:	b9d8      	cbnz	r0, 8011e44 <_vfiprintf_r+0x12c>
 8011e0c:	06d1      	lsls	r1, r2, #27
 8011e0e:	bf44      	itt	mi
 8011e10:	2320      	movmi	r3, #32
 8011e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e16:	0713      	lsls	r3, r2, #28
 8011e18:	bf44      	itt	mi
 8011e1a:	232b      	movmi	r3, #43	; 0x2b
 8011e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e20:	f89a 3000 	ldrb.w	r3, [sl]
 8011e24:	2b2a      	cmp	r3, #42	; 0x2a
 8011e26:	d015      	beq.n	8011e54 <_vfiprintf_r+0x13c>
 8011e28:	9a07      	ldr	r2, [sp, #28]
 8011e2a:	4654      	mov	r4, sl
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	f04f 0c0a 	mov.w	ip, #10
 8011e32:	4621      	mov	r1, r4
 8011e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e38:	3b30      	subs	r3, #48	; 0x30
 8011e3a:	2b09      	cmp	r3, #9
 8011e3c:	d94e      	bls.n	8011edc <_vfiprintf_r+0x1c4>
 8011e3e:	b1b0      	cbz	r0, 8011e6e <_vfiprintf_r+0x156>
 8011e40:	9207      	str	r2, [sp, #28]
 8011e42:	e014      	b.n	8011e6e <_vfiprintf_r+0x156>
 8011e44:	eba0 0308 	sub.w	r3, r0, r8
 8011e48:	fa09 f303 	lsl.w	r3, r9, r3
 8011e4c:	4313      	orrs	r3, r2
 8011e4e:	9304      	str	r3, [sp, #16]
 8011e50:	46a2      	mov	sl, r4
 8011e52:	e7d2      	b.n	8011dfa <_vfiprintf_r+0xe2>
 8011e54:	9b03      	ldr	r3, [sp, #12]
 8011e56:	1d19      	adds	r1, r3, #4
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	9103      	str	r1, [sp, #12]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	bfbb      	ittet	lt
 8011e60:	425b      	neglt	r3, r3
 8011e62:	f042 0202 	orrlt.w	r2, r2, #2
 8011e66:	9307      	strge	r3, [sp, #28]
 8011e68:	9307      	strlt	r3, [sp, #28]
 8011e6a:	bfb8      	it	lt
 8011e6c:	9204      	strlt	r2, [sp, #16]
 8011e6e:	7823      	ldrb	r3, [r4, #0]
 8011e70:	2b2e      	cmp	r3, #46	; 0x2e
 8011e72:	d10c      	bne.n	8011e8e <_vfiprintf_r+0x176>
 8011e74:	7863      	ldrb	r3, [r4, #1]
 8011e76:	2b2a      	cmp	r3, #42	; 0x2a
 8011e78:	d135      	bne.n	8011ee6 <_vfiprintf_r+0x1ce>
 8011e7a:	9b03      	ldr	r3, [sp, #12]
 8011e7c:	1d1a      	adds	r2, r3, #4
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	9203      	str	r2, [sp, #12]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	bfb8      	it	lt
 8011e86:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e8a:	3402      	adds	r4, #2
 8011e8c:	9305      	str	r3, [sp, #20]
 8011e8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f74 <_vfiprintf_r+0x25c>
 8011e92:	7821      	ldrb	r1, [r4, #0]
 8011e94:	2203      	movs	r2, #3
 8011e96:	4650      	mov	r0, sl
 8011e98:	f7ee f9c2 	bl	8000220 <memchr>
 8011e9c:	b140      	cbz	r0, 8011eb0 <_vfiprintf_r+0x198>
 8011e9e:	2340      	movs	r3, #64	; 0x40
 8011ea0:	eba0 000a 	sub.w	r0, r0, sl
 8011ea4:	fa03 f000 	lsl.w	r0, r3, r0
 8011ea8:	9b04      	ldr	r3, [sp, #16]
 8011eaa:	4303      	orrs	r3, r0
 8011eac:	3401      	adds	r4, #1
 8011eae:	9304      	str	r3, [sp, #16]
 8011eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eb4:	482c      	ldr	r0, [pc, #176]	; (8011f68 <_vfiprintf_r+0x250>)
 8011eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011eba:	2206      	movs	r2, #6
 8011ebc:	f7ee f9b0 	bl	8000220 <memchr>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d03f      	beq.n	8011f44 <_vfiprintf_r+0x22c>
 8011ec4:	4b29      	ldr	r3, [pc, #164]	; (8011f6c <_vfiprintf_r+0x254>)
 8011ec6:	bb1b      	cbnz	r3, 8011f10 <_vfiprintf_r+0x1f8>
 8011ec8:	9b03      	ldr	r3, [sp, #12]
 8011eca:	3307      	adds	r3, #7
 8011ecc:	f023 0307 	bic.w	r3, r3, #7
 8011ed0:	3308      	adds	r3, #8
 8011ed2:	9303      	str	r3, [sp, #12]
 8011ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed6:	443b      	add	r3, r7
 8011ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8011eda:	e767      	b.n	8011dac <_vfiprintf_r+0x94>
 8011edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ee0:	460c      	mov	r4, r1
 8011ee2:	2001      	movs	r0, #1
 8011ee4:	e7a5      	b.n	8011e32 <_vfiprintf_r+0x11a>
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	3401      	adds	r4, #1
 8011eea:	9305      	str	r3, [sp, #20]
 8011eec:	4619      	mov	r1, r3
 8011eee:	f04f 0c0a 	mov.w	ip, #10
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ef8:	3a30      	subs	r2, #48	; 0x30
 8011efa:	2a09      	cmp	r2, #9
 8011efc:	d903      	bls.n	8011f06 <_vfiprintf_r+0x1ee>
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d0c5      	beq.n	8011e8e <_vfiprintf_r+0x176>
 8011f02:	9105      	str	r1, [sp, #20]
 8011f04:	e7c3      	b.n	8011e8e <_vfiprintf_r+0x176>
 8011f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	e7f0      	b.n	8011ef2 <_vfiprintf_r+0x1da>
 8011f10:	ab03      	add	r3, sp, #12
 8011f12:	9300      	str	r3, [sp, #0]
 8011f14:	462a      	mov	r2, r5
 8011f16:	4b16      	ldr	r3, [pc, #88]	; (8011f70 <_vfiprintf_r+0x258>)
 8011f18:	a904      	add	r1, sp, #16
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f3af 8000 	nop.w
 8011f20:	4607      	mov	r7, r0
 8011f22:	1c78      	adds	r0, r7, #1
 8011f24:	d1d6      	bne.n	8011ed4 <_vfiprintf_r+0x1bc>
 8011f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f28:	07d9      	lsls	r1, r3, #31
 8011f2a:	d405      	bmi.n	8011f38 <_vfiprintf_r+0x220>
 8011f2c:	89ab      	ldrh	r3, [r5, #12]
 8011f2e:	059a      	lsls	r2, r3, #22
 8011f30:	d402      	bmi.n	8011f38 <_vfiprintf_r+0x220>
 8011f32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f34:	f7ff feb9 	bl	8011caa <__retarget_lock_release_recursive>
 8011f38:	89ab      	ldrh	r3, [r5, #12]
 8011f3a:	065b      	lsls	r3, r3, #25
 8011f3c:	f53f af12 	bmi.w	8011d64 <_vfiprintf_r+0x4c>
 8011f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f42:	e711      	b.n	8011d68 <_vfiprintf_r+0x50>
 8011f44:	ab03      	add	r3, sp, #12
 8011f46:	9300      	str	r3, [sp, #0]
 8011f48:	462a      	mov	r2, r5
 8011f4a:	4b09      	ldr	r3, [pc, #36]	; (8011f70 <_vfiprintf_r+0x258>)
 8011f4c:	a904      	add	r1, sp, #16
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f000 f880 	bl	8012054 <_printf_i>
 8011f54:	e7e4      	b.n	8011f20 <_vfiprintf_r+0x208>
 8011f56:	bf00      	nop
 8011f58:	08014ffc 	.word	0x08014ffc
 8011f5c:	0801501c 	.word	0x0801501c
 8011f60:	08014fdc 	.word	0x08014fdc
 8011f64:	0801503c 	.word	0x0801503c
 8011f68:	08015046 	.word	0x08015046
 8011f6c:	00000000 	.word	0x00000000
 8011f70:	08011cf3 	.word	0x08011cf3
 8011f74:	08015042 	.word	0x08015042

08011f78 <_printf_common>:
 8011f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f7c:	4616      	mov	r6, r2
 8011f7e:	4699      	mov	r9, r3
 8011f80:	688a      	ldr	r2, [r1, #8]
 8011f82:	690b      	ldr	r3, [r1, #16]
 8011f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	bfb8      	it	lt
 8011f8c:	4613      	movlt	r3, r2
 8011f8e:	6033      	str	r3, [r6, #0]
 8011f90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f94:	4607      	mov	r7, r0
 8011f96:	460c      	mov	r4, r1
 8011f98:	b10a      	cbz	r2, 8011f9e <_printf_common+0x26>
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	6033      	str	r3, [r6, #0]
 8011f9e:	6823      	ldr	r3, [r4, #0]
 8011fa0:	0699      	lsls	r1, r3, #26
 8011fa2:	bf42      	ittt	mi
 8011fa4:	6833      	ldrmi	r3, [r6, #0]
 8011fa6:	3302      	addmi	r3, #2
 8011fa8:	6033      	strmi	r3, [r6, #0]
 8011faa:	6825      	ldr	r5, [r4, #0]
 8011fac:	f015 0506 	ands.w	r5, r5, #6
 8011fb0:	d106      	bne.n	8011fc0 <_printf_common+0x48>
 8011fb2:	f104 0a19 	add.w	sl, r4, #25
 8011fb6:	68e3      	ldr	r3, [r4, #12]
 8011fb8:	6832      	ldr	r2, [r6, #0]
 8011fba:	1a9b      	subs	r3, r3, r2
 8011fbc:	42ab      	cmp	r3, r5
 8011fbe:	dc26      	bgt.n	801200e <_printf_common+0x96>
 8011fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011fc4:	1e13      	subs	r3, r2, #0
 8011fc6:	6822      	ldr	r2, [r4, #0]
 8011fc8:	bf18      	it	ne
 8011fca:	2301      	movne	r3, #1
 8011fcc:	0692      	lsls	r2, r2, #26
 8011fce:	d42b      	bmi.n	8012028 <_printf_common+0xb0>
 8011fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011fd4:	4649      	mov	r1, r9
 8011fd6:	4638      	mov	r0, r7
 8011fd8:	47c0      	blx	r8
 8011fda:	3001      	adds	r0, #1
 8011fdc:	d01e      	beq.n	801201c <_printf_common+0xa4>
 8011fde:	6823      	ldr	r3, [r4, #0]
 8011fe0:	68e5      	ldr	r5, [r4, #12]
 8011fe2:	6832      	ldr	r2, [r6, #0]
 8011fe4:	f003 0306 	and.w	r3, r3, #6
 8011fe8:	2b04      	cmp	r3, #4
 8011fea:	bf08      	it	eq
 8011fec:	1aad      	subeq	r5, r5, r2
 8011fee:	68a3      	ldr	r3, [r4, #8]
 8011ff0:	6922      	ldr	r2, [r4, #16]
 8011ff2:	bf0c      	ite	eq
 8011ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ff8:	2500      	movne	r5, #0
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	bfc4      	itt	gt
 8011ffe:	1a9b      	subgt	r3, r3, r2
 8012000:	18ed      	addgt	r5, r5, r3
 8012002:	2600      	movs	r6, #0
 8012004:	341a      	adds	r4, #26
 8012006:	42b5      	cmp	r5, r6
 8012008:	d11a      	bne.n	8012040 <_printf_common+0xc8>
 801200a:	2000      	movs	r0, #0
 801200c:	e008      	b.n	8012020 <_printf_common+0xa8>
 801200e:	2301      	movs	r3, #1
 8012010:	4652      	mov	r2, sl
 8012012:	4649      	mov	r1, r9
 8012014:	4638      	mov	r0, r7
 8012016:	47c0      	blx	r8
 8012018:	3001      	adds	r0, #1
 801201a:	d103      	bne.n	8012024 <_printf_common+0xac>
 801201c:	f04f 30ff 	mov.w	r0, #4294967295
 8012020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012024:	3501      	adds	r5, #1
 8012026:	e7c6      	b.n	8011fb6 <_printf_common+0x3e>
 8012028:	18e1      	adds	r1, r4, r3
 801202a:	1c5a      	adds	r2, r3, #1
 801202c:	2030      	movs	r0, #48	; 0x30
 801202e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012032:	4422      	add	r2, r4
 8012034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801203c:	3302      	adds	r3, #2
 801203e:	e7c7      	b.n	8011fd0 <_printf_common+0x58>
 8012040:	2301      	movs	r3, #1
 8012042:	4622      	mov	r2, r4
 8012044:	4649      	mov	r1, r9
 8012046:	4638      	mov	r0, r7
 8012048:	47c0      	blx	r8
 801204a:	3001      	adds	r0, #1
 801204c:	d0e6      	beq.n	801201c <_printf_common+0xa4>
 801204e:	3601      	adds	r6, #1
 8012050:	e7d9      	b.n	8012006 <_printf_common+0x8e>
	...

08012054 <_printf_i>:
 8012054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012058:	7e0f      	ldrb	r7, [r1, #24]
 801205a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801205c:	2f78      	cmp	r7, #120	; 0x78
 801205e:	4691      	mov	r9, r2
 8012060:	4680      	mov	r8, r0
 8012062:	460c      	mov	r4, r1
 8012064:	469a      	mov	sl, r3
 8012066:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801206a:	d807      	bhi.n	801207c <_printf_i+0x28>
 801206c:	2f62      	cmp	r7, #98	; 0x62
 801206e:	d80a      	bhi.n	8012086 <_printf_i+0x32>
 8012070:	2f00      	cmp	r7, #0
 8012072:	f000 80d8 	beq.w	8012226 <_printf_i+0x1d2>
 8012076:	2f58      	cmp	r7, #88	; 0x58
 8012078:	f000 80a3 	beq.w	80121c2 <_printf_i+0x16e>
 801207c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012084:	e03a      	b.n	80120fc <_printf_i+0xa8>
 8012086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801208a:	2b15      	cmp	r3, #21
 801208c:	d8f6      	bhi.n	801207c <_printf_i+0x28>
 801208e:	a101      	add	r1, pc, #4	; (adr r1, 8012094 <_printf_i+0x40>)
 8012090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012094:	080120ed 	.word	0x080120ed
 8012098:	08012101 	.word	0x08012101
 801209c:	0801207d 	.word	0x0801207d
 80120a0:	0801207d 	.word	0x0801207d
 80120a4:	0801207d 	.word	0x0801207d
 80120a8:	0801207d 	.word	0x0801207d
 80120ac:	08012101 	.word	0x08012101
 80120b0:	0801207d 	.word	0x0801207d
 80120b4:	0801207d 	.word	0x0801207d
 80120b8:	0801207d 	.word	0x0801207d
 80120bc:	0801207d 	.word	0x0801207d
 80120c0:	0801220d 	.word	0x0801220d
 80120c4:	08012131 	.word	0x08012131
 80120c8:	080121ef 	.word	0x080121ef
 80120cc:	0801207d 	.word	0x0801207d
 80120d0:	0801207d 	.word	0x0801207d
 80120d4:	0801222f 	.word	0x0801222f
 80120d8:	0801207d 	.word	0x0801207d
 80120dc:	08012131 	.word	0x08012131
 80120e0:	0801207d 	.word	0x0801207d
 80120e4:	0801207d 	.word	0x0801207d
 80120e8:	080121f7 	.word	0x080121f7
 80120ec:	682b      	ldr	r3, [r5, #0]
 80120ee:	1d1a      	adds	r2, r3, #4
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	602a      	str	r2, [r5, #0]
 80120f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80120fc:	2301      	movs	r3, #1
 80120fe:	e0a3      	b.n	8012248 <_printf_i+0x1f4>
 8012100:	6820      	ldr	r0, [r4, #0]
 8012102:	6829      	ldr	r1, [r5, #0]
 8012104:	0606      	lsls	r6, r0, #24
 8012106:	f101 0304 	add.w	r3, r1, #4
 801210a:	d50a      	bpl.n	8012122 <_printf_i+0xce>
 801210c:	680e      	ldr	r6, [r1, #0]
 801210e:	602b      	str	r3, [r5, #0]
 8012110:	2e00      	cmp	r6, #0
 8012112:	da03      	bge.n	801211c <_printf_i+0xc8>
 8012114:	232d      	movs	r3, #45	; 0x2d
 8012116:	4276      	negs	r6, r6
 8012118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801211c:	485e      	ldr	r0, [pc, #376]	; (8012298 <_printf_i+0x244>)
 801211e:	230a      	movs	r3, #10
 8012120:	e019      	b.n	8012156 <_printf_i+0x102>
 8012122:	680e      	ldr	r6, [r1, #0]
 8012124:	602b      	str	r3, [r5, #0]
 8012126:	f010 0f40 	tst.w	r0, #64	; 0x40
 801212a:	bf18      	it	ne
 801212c:	b236      	sxthne	r6, r6
 801212e:	e7ef      	b.n	8012110 <_printf_i+0xbc>
 8012130:	682b      	ldr	r3, [r5, #0]
 8012132:	6820      	ldr	r0, [r4, #0]
 8012134:	1d19      	adds	r1, r3, #4
 8012136:	6029      	str	r1, [r5, #0]
 8012138:	0601      	lsls	r1, r0, #24
 801213a:	d501      	bpl.n	8012140 <_printf_i+0xec>
 801213c:	681e      	ldr	r6, [r3, #0]
 801213e:	e002      	b.n	8012146 <_printf_i+0xf2>
 8012140:	0646      	lsls	r6, r0, #25
 8012142:	d5fb      	bpl.n	801213c <_printf_i+0xe8>
 8012144:	881e      	ldrh	r6, [r3, #0]
 8012146:	4854      	ldr	r0, [pc, #336]	; (8012298 <_printf_i+0x244>)
 8012148:	2f6f      	cmp	r7, #111	; 0x6f
 801214a:	bf0c      	ite	eq
 801214c:	2308      	moveq	r3, #8
 801214e:	230a      	movne	r3, #10
 8012150:	2100      	movs	r1, #0
 8012152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012156:	6865      	ldr	r5, [r4, #4]
 8012158:	60a5      	str	r5, [r4, #8]
 801215a:	2d00      	cmp	r5, #0
 801215c:	bfa2      	ittt	ge
 801215e:	6821      	ldrge	r1, [r4, #0]
 8012160:	f021 0104 	bicge.w	r1, r1, #4
 8012164:	6021      	strge	r1, [r4, #0]
 8012166:	b90e      	cbnz	r6, 801216c <_printf_i+0x118>
 8012168:	2d00      	cmp	r5, #0
 801216a:	d04d      	beq.n	8012208 <_printf_i+0x1b4>
 801216c:	4615      	mov	r5, r2
 801216e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012172:	fb03 6711 	mls	r7, r3, r1, r6
 8012176:	5dc7      	ldrb	r7, [r0, r7]
 8012178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801217c:	4637      	mov	r7, r6
 801217e:	42bb      	cmp	r3, r7
 8012180:	460e      	mov	r6, r1
 8012182:	d9f4      	bls.n	801216e <_printf_i+0x11a>
 8012184:	2b08      	cmp	r3, #8
 8012186:	d10b      	bne.n	80121a0 <_printf_i+0x14c>
 8012188:	6823      	ldr	r3, [r4, #0]
 801218a:	07de      	lsls	r6, r3, #31
 801218c:	d508      	bpl.n	80121a0 <_printf_i+0x14c>
 801218e:	6923      	ldr	r3, [r4, #16]
 8012190:	6861      	ldr	r1, [r4, #4]
 8012192:	4299      	cmp	r1, r3
 8012194:	bfde      	ittt	le
 8012196:	2330      	movle	r3, #48	; 0x30
 8012198:	f805 3c01 	strble.w	r3, [r5, #-1]
 801219c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80121a0:	1b52      	subs	r2, r2, r5
 80121a2:	6122      	str	r2, [r4, #16]
 80121a4:	f8cd a000 	str.w	sl, [sp]
 80121a8:	464b      	mov	r3, r9
 80121aa:	aa03      	add	r2, sp, #12
 80121ac:	4621      	mov	r1, r4
 80121ae:	4640      	mov	r0, r8
 80121b0:	f7ff fee2 	bl	8011f78 <_printf_common>
 80121b4:	3001      	adds	r0, #1
 80121b6:	d14c      	bne.n	8012252 <_printf_i+0x1fe>
 80121b8:	f04f 30ff 	mov.w	r0, #4294967295
 80121bc:	b004      	add	sp, #16
 80121be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c2:	4835      	ldr	r0, [pc, #212]	; (8012298 <_printf_i+0x244>)
 80121c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80121c8:	6829      	ldr	r1, [r5, #0]
 80121ca:	6823      	ldr	r3, [r4, #0]
 80121cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80121d0:	6029      	str	r1, [r5, #0]
 80121d2:	061d      	lsls	r5, r3, #24
 80121d4:	d514      	bpl.n	8012200 <_printf_i+0x1ac>
 80121d6:	07df      	lsls	r7, r3, #31
 80121d8:	bf44      	itt	mi
 80121da:	f043 0320 	orrmi.w	r3, r3, #32
 80121de:	6023      	strmi	r3, [r4, #0]
 80121e0:	b91e      	cbnz	r6, 80121ea <_printf_i+0x196>
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	f023 0320 	bic.w	r3, r3, #32
 80121e8:	6023      	str	r3, [r4, #0]
 80121ea:	2310      	movs	r3, #16
 80121ec:	e7b0      	b.n	8012150 <_printf_i+0xfc>
 80121ee:	6823      	ldr	r3, [r4, #0]
 80121f0:	f043 0320 	orr.w	r3, r3, #32
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	2378      	movs	r3, #120	; 0x78
 80121f8:	4828      	ldr	r0, [pc, #160]	; (801229c <_printf_i+0x248>)
 80121fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80121fe:	e7e3      	b.n	80121c8 <_printf_i+0x174>
 8012200:	0659      	lsls	r1, r3, #25
 8012202:	bf48      	it	mi
 8012204:	b2b6      	uxthmi	r6, r6
 8012206:	e7e6      	b.n	80121d6 <_printf_i+0x182>
 8012208:	4615      	mov	r5, r2
 801220a:	e7bb      	b.n	8012184 <_printf_i+0x130>
 801220c:	682b      	ldr	r3, [r5, #0]
 801220e:	6826      	ldr	r6, [r4, #0]
 8012210:	6961      	ldr	r1, [r4, #20]
 8012212:	1d18      	adds	r0, r3, #4
 8012214:	6028      	str	r0, [r5, #0]
 8012216:	0635      	lsls	r5, r6, #24
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	d501      	bpl.n	8012220 <_printf_i+0x1cc>
 801221c:	6019      	str	r1, [r3, #0]
 801221e:	e002      	b.n	8012226 <_printf_i+0x1d2>
 8012220:	0670      	lsls	r0, r6, #25
 8012222:	d5fb      	bpl.n	801221c <_printf_i+0x1c8>
 8012224:	8019      	strh	r1, [r3, #0]
 8012226:	2300      	movs	r3, #0
 8012228:	6123      	str	r3, [r4, #16]
 801222a:	4615      	mov	r5, r2
 801222c:	e7ba      	b.n	80121a4 <_printf_i+0x150>
 801222e:	682b      	ldr	r3, [r5, #0]
 8012230:	1d1a      	adds	r2, r3, #4
 8012232:	602a      	str	r2, [r5, #0]
 8012234:	681d      	ldr	r5, [r3, #0]
 8012236:	6862      	ldr	r2, [r4, #4]
 8012238:	2100      	movs	r1, #0
 801223a:	4628      	mov	r0, r5
 801223c:	f7ed fff0 	bl	8000220 <memchr>
 8012240:	b108      	cbz	r0, 8012246 <_printf_i+0x1f2>
 8012242:	1b40      	subs	r0, r0, r5
 8012244:	6060      	str	r0, [r4, #4]
 8012246:	6863      	ldr	r3, [r4, #4]
 8012248:	6123      	str	r3, [r4, #16]
 801224a:	2300      	movs	r3, #0
 801224c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012250:	e7a8      	b.n	80121a4 <_printf_i+0x150>
 8012252:	6923      	ldr	r3, [r4, #16]
 8012254:	462a      	mov	r2, r5
 8012256:	4649      	mov	r1, r9
 8012258:	4640      	mov	r0, r8
 801225a:	47d0      	blx	sl
 801225c:	3001      	adds	r0, #1
 801225e:	d0ab      	beq.n	80121b8 <_printf_i+0x164>
 8012260:	6823      	ldr	r3, [r4, #0]
 8012262:	079b      	lsls	r3, r3, #30
 8012264:	d413      	bmi.n	801228e <_printf_i+0x23a>
 8012266:	68e0      	ldr	r0, [r4, #12]
 8012268:	9b03      	ldr	r3, [sp, #12]
 801226a:	4298      	cmp	r0, r3
 801226c:	bfb8      	it	lt
 801226e:	4618      	movlt	r0, r3
 8012270:	e7a4      	b.n	80121bc <_printf_i+0x168>
 8012272:	2301      	movs	r3, #1
 8012274:	4632      	mov	r2, r6
 8012276:	4649      	mov	r1, r9
 8012278:	4640      	mov	r0, r8
 801227a:	47d0      	blx	sl
 801227c:	3001      	adds	r0, #1
 801227e:	d09b      	beq.n	80121b8 <_printf_i+0x164>
 8012280:	3501      	adds	r5, #1
 8012282:	68e3      	ldr	r3, [r4, #12]
 8012284:	9903      	ldr	r1, [sp, #12]
 8012286:	1a5b      	subs	r3, r3, r1
 8012288:	42ab      	cmp	r3, r5
 801228a:	dcf2      	bgt.n	8012272 <_printf_i+0x21e>
 801228c:	e7eb      	b.n	8012266 <_printf_i+0x212>
 801228e:	2500      	movs	r5, #0
 8012290:	f104 0619 	add.w	r6, r4, #25
 8012294:	e7f5      	b.n	8012282 <_printf_i+0x22e>
 8012296:	bf00      	nop
 8012298:	0801504d 	.word	0x0801504d
 801229c:	0801505e 	.word	0x0801505e

080122a0 <__sread>:
 80122a0:	b510      	push	{r4, lr}
 80122a2:	460c      	mov	r4, r1
 80122a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122a8:	f000 fa5a 	bl	8012760 <_read_r>
 80122ac:	2800      	cmp	r0, #0
 80122ae:	bfab      	itete	ge
 80122b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122b2:	89a3      	ldrhlt	r3, [r4, #12]
 80122b4:	181b      	addge	r3, r3, r0
 80122b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122ba:	bfac      	ite	ge
 80122bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80122be:	81a3      	strhlt	r3, [r4, #12]
 80122c0:	bd10      	pop	{r4, pc}

080122c2 <__swrite>:
 80122c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c6:	461f      	mov	r7, r3
 80122c8:	898b      	ldrh	r3, [r1, #12]
 80122ca:	05db      	lsls	r3, r3, #23
 80122cc:	4605      	mov	r5, r0
 80122ce:	460c      	mov	r4, r1
 80122d0:	4616      	mov	r6, r2
 80122d2:	d505      	bpl.n	80122e0 <__swrite+0x1e>
 80122d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122d8:	2302      	movs	r3, #2
 80122da:	2200      	movs	r2, #0
 80122dc:	f000 f9c8 	bl	8012670 <_lseek_r>
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122ea:	81a3      	strh	r3, [r4, #12]
 80122ec:	4632      	mov	r2, r6
 80122ee:	463b      	mov	r3, r7
 80122f0:	4628      	mov	r0, r5
 80122f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122f6:	f000 b869 	b.w	80123cc <_write_r>

080122fa <__sseek>:
 80122fa:	b510      	push	{r4, lr}
 80122fc:	460c      	mov	r4, r1
 80122fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012302:	f000 f9b5 	bl	8012670 <_lseek_r>
 8012306:	1c43      	adds	r3, r0, #1
 8012308:	89a3      	ldrh	r3, [r4, #12]
 801230a:	bf15      	itete	ne
 801230c:	6560      	strne	r0, [r4, #84]	; 0x54
 801230e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012316:	81a3      	strheq	r3, [r4, #12]
 8012318:	bf18      	it	ne
 801231a:	81a3      	strhne	r3, [r4, #12]
 801231c:	bd10      	pop	{r4, pc}

0801231e <__sclose>:
 801231e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012322:	f000 b8d3 	b.w	80124cc <_close_r>
	...

08012328 <__swbuf_r>:
 8012328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232a:	460e      	mov	r6, r1
 801232c:	4614      	mov	r4, r2
 801232e:	4605      	mov	r5, r0
 8012330:	b118      	cbz	r0, 801233a <__swbuf_r+0x12>
 8012332:	6983      	ldr	r3, [r0, #24]
 8012334:	b90b      	cbnz	r3, 801233a <__swbuf_r+0x12>
 8012336:	f7ff fc19 	bl	8011b6c <__sinit>
 801233a:	4b21      	ldr	r3, [pc, #132]	; (80123c0 <__swbuf_r+0x98>)
 801233c:	429c      	cmp	r4, r3
 801233e:	d12b      	bne.n	8012398 <__swbuf_r+0x70>
 8012340:	686c      	ldr	r4, [r5, #4]
 8012342:	69a3      	ldr	r3, [r4, #24]
 8012344:	60a3      	str	r3, [r4, #8]
 8012346:	89a3      	ldrh	r3, [r4, #12]
 8012348:	071a      	lsls	r2, r3, #28
 801234a:	d52f      	bpl.n	80123ac <__swbuf_r+0x84>
 801234c:	6923      	ldr	r3, [r4, #16]
 801234e:	b36b      	cbz	r3, 80123ac <__swbuf_r+0x84>
 8012350:	6923      	ldr	r3, [r4, #16]
 8012352:	6820      	ldr	r0, [r4, #0]
 8012354:	1ac0      	subs	r0, r0, r3
 8012356:	6963      	ldr	r3, [r4, #20]
 8012358:	b2f6      	uxtb	r6, r6
 801235a:	4283      	cmp	r3, r0
 801235c:	4637      	mov	r7, r6
 801235e:	dc04      	bgt.n	801236a <__swbuf_r+0x42>
 8012360:	4621      	mov	r1, r4
 8012362:	4628      	mov	r0, r5
 8012364:	f000 f948 	bl	80125f8 <_fflush_r>
 8012368:	bb30      	cbnz	r0, 80123b8 <__swbuf_r+0x90>
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	3b01      	subs	r3, #1
 801236e:	60a3      	str	r3, [r4, #8]
 8012370:	6823      	ldr	r3, [r4, #0]
 8012372:	1c5a      	adds	r2, r3, #1
 8012374:	6022      	str	r2, [r4, #0]
 8012376:	701e      	strb	r6, [r3, #0]
 8012378:	6963      	ldr	r3, [r4, #20]
 801237a:	3001      	adds	r0, #1
 801237c:	4283      	cmp	r3, r0
 801237e:	d004      	beq.n	801238a <__swbuf_r+0x62>
 8012380:	89a3      	ldrh	r3, [r4, #12]
 8012382:	07db      	lsls	r3, r3, #31
 8012384:	d506      	bpl.n	8012394 <__swbuf_r+0x6c>
 8012386:	2e0a      	cmp	r6, #10
 8012388:	d104      	bne.n	8012394 <__swbuf_r+0x6c>
 801238a:	4621      	mov	r1, r4
 801238c:	4628      	mov	r0, r5
 801238e:	f000 f933 	bl	80125f8 <_fflush_r>
 8012392:	b988      	cbnz	r0, 80123b8 <__swbuf_r+0x90>
 8012394:	4638      	mov	r0, r7
 8012396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012398:	4b0a      	ldr	r3, [pc, #40]	; (80123c4 <__swbuf_r+0x9c>)
 801239a:	429c      	cmp	r4, r3
 801239c:	d101      	bne.n	80123a2 <__swbuf_r+0x7a>
 801239e:	68ac      	ldr	r4, [r5, #8]
 80123a0:	e7cf      	b.n	8012342 <__swbuf_r+0x1a>
 80123a2:	4b09      	ldr	r3, [pc, #36]	; (80123c8 <__swbuf_r+0xa0>)
 80123a4:	429c      	cmp	r4, r3
 80123a6:	bf08      	it	eq
 80123a8:	68ec      	ldreq	r4, [r5, #12]
 80123aa:	e7ca      	b.n	8012342 <__swbuf_r+0x1a>
 80123ac:	4621      	mov	r1, r4
 80123ae:	4628      	mov	r0, r5
 80123b0:	f000 f81e 	bl	80123f0 <__swsetup_r>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d0cb      	beq.n	8012350 <__swbuf_r+0x28>
 80123b8:	f04f 37ff 	mov.w	r7, #4294967295
 80123bc:	e7ea      	b.n	8012394 <__swbuf_r+0x6c>
 80123be:	bf00      	nop
 80123c0:	08014ffc 	.word	0x08014ffc
 80123c4:	0801501c 	.word	0x0801501c
 80123c8:	08014fdc 	.word	0x08014fdc

080123cc <_write_r>:
 80123cc:	b538      	push	{r3, r4, r5, lr}
 80123ce:	4d07      	ldr	r5, [pc, #28]	; (80123ec <_write_r+0x20>)
 80123d0:	4604      	mov	r4, r0
 80123d2:	4608      	mov	r0, r1
 80123d4:	4611      	mov	r1, r2
 80123d6:	2200      	movs	r2, #0
 80123d8:	602a      	str	r2, [r5, #0]
 80123da:	461a      	mov	r2, r3
 80123dc:	f7ee fcbb 	bl	8000d56 <_write>
 80123e0:	1c43      	adds	r3, r0, #1
 80123e2:	d102      	bne.n	80123ea <_write_r+0x1e>
 80123e4:	682b      	ldr	r3, [r5, #0]
 80123e6:	b103      	cbz	r3, 80123ea <_write_r+0x1e>
 80123e8:	6023      	str	r3, [r4, #0]
 80123ea:	bd38      	pop	{r3, r4, r5, pc}
 80123ec:	2000079c 	.word	0x2000079c

080123f0 <__swsetup_r>:
 80123f0:	4b32      	ldr	r3, [pc, #200]	; (80124bc <__swsetup_r+0xcc>)
 80123f2:	b570      	push	{r4, r5, r6, lr}
 80123f4:	681d      	ldr	r5, [r3, #0]
 80123f6:	4606      	mov	r6, r0
 80123f8:	460c      	mov	r4, r1
 80123fa:	b125      	cbz	r5, 8012406 <__swsetup_r+0x16>
 80123fc:	69ab      	ldr	r3, [r5, #24]
 80123fe:	b913      	cbnz	r3, 8012406 <__swsetup_r+0x16>
 8012400:	4628      	mov	r0, r5
 8012402:	f7ff fbb3 	bl	8011b6c <__sinit>
 8012406:	4b2e      	ldr	r3, [pc, #184]	; (80124c0 <__swsetup_r+0xd0>)
 8012408:	429c      	cmp	r4, r3
 801240a:	d10f      	bne.n	801242c <__swsetup_r+0x3c>
 801240c:	686c      	ldr	r4, [r5, #4]
 801240e:	89a3      	ldrh	r3, [r4, #12]
 8012410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012414:	0719      	lsls	r1, r3, #28
 8012416:	d42c      	bmi.n	8012472 <__swsetup_r+0x82>
 8012418:	06dd      	lsls	r5, r3, #27
 801241a:	d411      	bmi.n	8012440 <__swsetup_r+0x50>
 801241c:	2309      	movs	r3, #9
 801241e:	6033      	str	r3, [r6, #0]
 8012420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012424:	81a3      	strh	r3, [r4, #12]
 8012426:	f04f 30ff 	mov.w	r0, #4294967295
 801242a:	e03e      	b.n	80124aa <__swsetup_r+0xba>
 801242c:	4b25      	ldr	r3, [pc, #148]	; (80124c4 <__swsetup_r+0xd4>)
 801242e:	429c      	cmp	r4, r3
 8012430:	d101      	bne.n	8012436 <__swsetup_r+0x46>
 8012432:	68ac      	ldr	r4, [r5, #8]
 8012434:	e7eb      	b.n	801240e <__swsetup_r+0x1e>
 8012436:	4b24      	ldr	r3, [pc, #144]	; (80124c8 <__swsetup_r+0xd8>)
 8012438:	429c      	cmp	r4, r3
 801243a:	bf08      	it	eq
 801243c:	68ec      	ldreq	r4, [r5, #12]
 801243e:	e7e6      	b.n	801240e <__swsetup_r+0x1e>
 8012440:	0758      	lsls	r0, r3, #29
 8012442:	d512      	bpl.n	801246a <__swsetup_r+0x7a>
 8012444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012446:	b141      	cbz	r1, 801245a <__swsetup_r+0x6a>
 8012448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801244c:	4299      	cmp	r1, r3
 801244e:	d002      	beq.n	8012456 <__swsetup_r+0x66>
 8012450:	4630      	mov	r0, r6
 8012452:	f7ff fa2b 	bl	80118ac <_free_r>
 8012456:	2300      	movs	r3, #0
 8012458:	6363      	str	r3, [r4, #52]	; 0x34
 801245a:	89a3      	ldrh	r3, [r4, #12]
 801245c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012460:	81a3      	strh	r3, [r4, #12]
 8012462:	2300      	movs	r3, #0
 8012464:	6063      	str	r3, [r4, #4]
 8012466:	6923      	ldr	r3, [r4, #16]
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	89a3      	ldrh	r3, [r4, #12]
 801246c:	f043 0308 	orr.w	r3, r3, #8
 8012470:	81a3      	strh	r3, [r4, #12]
 8012472:	6923      	ldr	r3, [r4, #16]
 8012474:	b94b      	cbnz	r3, 801248a <__swsetup_r+0x9a>
 8012476:	89a3      	ldrh	r3, [r4, #12]
 8012478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012480:	d003      	beq.n	801248a <__swsetup_r+0x9a>
 8012482:	4621      	mov	r1, r4
 8012484:	4630      	mov	r0, r6
 8012486:	f000 f92b 	bl	80126e0 <__smakebuf_r>
 801248a:	89a0      	ldrh	r0, [r4, #12]
 801248c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012490:	f010 0301 	ands.w	r3, r0, #1
 8012494:	d00a      	beq.n	80124ac <__swsetup_r+0xbc>
 8012496:	2300      	movs	r3, #0
 8012498:	60a3      	str	r3, [r4, #8]
 801249a:	6963      	ldr	r3, [r4, #20]
 801249c:	425b      	negs	r3, r3
 801249e:	61a3      	str	r3, [r4, #24]
 80124a0:	6923      	ldr	r3, [r4, #16]
 80124a2:	b943      	cbnz	r3, 80124b6 <__swsetup_r+0xc6>
 80124a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80124a8:	d1ba      	bne.n	8012420 <__swsetup_r+0x30>
 80124aa:	bd70      	pop	{r4, r5, r6, pc}
 80124ac:	0781      	lsls	r1, r0, #30
 80124ae:	bf58      	it	pl
 80124b0:	6963      	ldrpl	r3, [r4, #20]
 80124b2:	60a3      	str	r3, [r4, #8]
 80124b4:	e7f4      	b.n	80124a0 <__swsetup_r+0xb0>
 80124b6:	2000      	movs	r0, #0
 80124b8:	e7f7      	b.n	80124aa <__swsetup_r+0xba>
 80124ba:	bf00      	nop
 80124bc:	20000014 	.word	0x20000014
 80124c0:	08014ffc 	.word	0x08014ffc
 80124c4:	0801501c 	.word	0x0801501c
 80124c8:	08014fdc 	.word	0x08014fdc

080124cc <_close_r>:
 80124cc:	b538      	push	{r3, r4, r5, lr}
 80124ce:	4d06      	ldr	r5, [pc, #24]	; (80124e8 <_close_r+0x1c>)
 80124d0:	2300      	movs	r3, #0
 80124d2:	4604      	mov	r4, r0
 80124d4:	4608      	mov	r0, r1
 80124d6:	602b      	str	r3, [r5, #0]
 80124d8:	f7ee fc59 	bl	8000d8e <_close>
 80124dc:	1c43      	adds	r3, r0, #1
 80124de:	d102      	bne.n	80124e6 <_close_r+0x1a>
 80124e0:	682b      	ldr	r3, [r5, #0]
 80124e2:	b103      	cbz	r3, 80124e6 <_close_r+0x1a>
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	bd38      	pop	{r3, r4, r5, pc}
 80124e8:	2000079c 	.word	0x2000079c

080124ec <__sflush_r>:
 80124ec:	898a      	ldrh	r2, [r1, #12]
 80124ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f2:	4605      	mov	r5, r0
 80124f4:	0710      	lsls	r0, r2, #28
 80124f6:	460c      	mov	r4, r1
 80124f8:	d458      	bmi.n	80125ac <__sflush_r+0xc0>
 80124fa:	684b      	ldr	r3, [r1, #4]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	dc05      	bgt.n	801250c <__sflush_r+0x20>
 8012500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012502:	2b00      	cmp	r3, #0
 8012504:	dc02      	bgt.n	801250c <__sflush_r+0x20>
 8012506:	2000      	movs	r0, #0
 8012508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801250c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801250e:	2e00      	cmp	r6, #0
 8012510:	d0f9      	beq.n	8012506 <__sflush_r+0x1a>
 8012512:	2300      	movs	r3, #0
 8012514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012518:	682f      	ldr	r7, [r5, #0]
 801251a:	602b      	str	r3, [r5, #0]
 801251c:	d032      	beq.n	8012584 <__sflush_r+0x98>
 801251e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012520:	89a3      	ldrh	r3, [r4, #12]
 8012522:	075a      	lsls	r2, r3, #29
 8012524:	d505      	bpl.n	8012532 <__sflush_r+0x46>
 8012526:	6863      	ldr	r3, [r4, #4]
 8012528:	1ac0      	subs	r0, r0, r3
 801252a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801252c:	b10b      	cbz	r3, 8012532 <__sflush_r+0x46>
 801252e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012530:	1ac0      	subs	r0, r0, r3
 8012532:	2300      	movs	r3, #0
 8012534:	4602      	mov	r2, r0
 8012536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012538:	6a21      	ldr	r1, [r4, #32]
 801253a:	4628      	mov	r0, r5
 801253c:	47b0      	blx	r6
 801253e:	1c43      	adds	r3, r0, #1
 8012540:	89a3      	ldrh	r3, [r4, #12]
 8012542:	d106      	bne.n	8012552 <__sflush_r+0x66>
 8012544:	6829      	ldr	r1, [r5, #0]
 8012546:	291d      	cmp	r1, #29
 8012548:	d82c      	bhi.n	80125a4 <__sflush_r+0xb8>
 801254a:	4a2a      	ldr	r2, [pc, #168]	; (80125f4 <__sflush_r+0x108>)
 801254c:	40ca      	lsrs	r2, r1
 801254e:	07d6      	lsls	r6, r2, #31
 8012550:	d528      	bpl.n	80125a4 <__sflush_r+0xb8>
 8012552:	2200      	movs	r2, #0
 8012554:	6062      	str	r2, [r4, #4]
 8012556:	04d9      	lsls	r1, r3, #19
 8012558:	6922      	ldr	r2, [r4, #16]
 801255a:	6022      	str	r2, [r4, #0]
 801255c:	d504      	bpl.n	8012568 <__sflush_r+0x7c>
 801255e:	1c42      	adds	r2, r0, #1
 8012560:	d101      	bne.n	8012566 <__sflush_r+0x7a>
 8012562:	682b      	ldr	r3, [r5, #0]
 8012564:	b903      	cbnz	r3, 8012568 <__sflush_r+0x7c>
 8012566:	6560      	str	r0, [r4, #84]	; 0x54
 8012568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801256a:	602f      	str	r7, [r5, #0]
 801256c:	2900      	cmp	r1, #0
 801256e:	d0ca      	beq.n	8012506 <__sflush_r+0x1a>
 8012570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012574:	4299      	cmp	r1, r3
 8012576:	d002      	beq.n	801257e <__sflush_r+0x92>
 8012578:	4628      	mov	r0, r5
 801257a:	f7ff f997 	bl	80118ac <_free_r>
 801257e:	2000      	movs	r0, #0
 8012580:	6360      	str	r0, [r4, #52]	; 0x34
 8012582:	e7c1      	b.n	8012508 <__sflush_r+0x1c>
 8012584:	6a21      	ldr	r1, [r4, #32]
 8012586:	2301      	movs	r3, #1
 8012588:	4628      	mov	r0, r5
 801258a:	47b0      	blx	r6
 801258c:	1c41      	adds	r1, r0, #1
 801258e:	d1c7      	bne.n	8012520 <__sflush_r+0x34>
 8012590:	682b      	ldr	r3, [r5, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d0c4      	beq.n	8012520 <__sflush_r+0x34>
 8012596:	2b1d      	cmp	r3, #29
 8012598:	d001      	beq.n	801259e <__sflush_r+0xb2>
 801259a:	2b16      	cmp	r3, #22
 801259c:	d101      	bne.n	80125a2 <__sflush_r+0xb6>
 801259e:	602f      	str	r7, [r5, #0]
 80125a0:	e7b1      	b.n	8012506 <__sflush_r+0x1a>
 80125a2:	89a3      	ldrh	r3, [r4, #12]
 80125a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125a8:	81a3      	strh	r3, [r4, #12]
 80125aa:	e7ad      	b.n	8012508 <__sflush_r+0x1c>
 80125ac:	690f      	ldr	r7, [r1, #16]
 80125ae:	2f00      	cmp	r7, #0
 80125b0:	d0a9      	beq.n	8012506 <__sflush_r+0x1a>
 80125b2:	0793      	lsls	r3, r2, #30
 80125b4:	680e      	ldr	r6, [r1, #0]
 80125b6:	bf08      	it	eq
 80125b8:	694b      	ldreq	r3, [r1, #20]
 80125ba:	600f      	str	r7, [r1, #0]
 80125bc:	bf18      	it	ne
 80125be:	2300      	movne	r3, #0
 80125c0:	eba6 0807 	sub.w	r8, r6, r7
 80125c4:	608b      	str	r3, [r1, #8]
 80125c6:	f1b8 0f00 	cmp.w	r8, #0
 80125ca:	dd9c      	ble.n	8012506 <__sflush_r+0x1a>
 80125cc:	6a21      	ldr	r1, [r4, #32]
 80125ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80125d0:	4643      	mov	r3, r8
 80125d2:	463a      	mov	r2, r7
 80125d4:	4628      	mov	r0, r5
 80125d6:	47b0      	blx	r6
 80125d8:	2800      	cmp	r0, #0
 80125da:	dc06      	bgt.n	80125ea <__sflush_r+0xfe>
 80125dc:	89a3      	ldrh	r3, [r4, #12]
 80125de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125e2:	81a3      	strh	r3, [r4, #12]
 80125e4:	f04f 30ff 	mov.w	r0, #4294967295
 80125e8:	e78e      	b.n	8012508 <__sflush_r+0x1c>
 80125ea:	4407      	add	r7, r0
 80125ec:	eba8 0800 	sub.w	r8, r8, r0
 80125f0:	e7e9      	b.n	80125c6 <__sflush_r+0xda>
 80125f2:	bf00      	nop
 80125f4:	20400001 	.word	0x20400001

080125f8 <_fflush_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	690b      	ldr	r3, [r1, #16]
 80125fc:	4605      	mov	r5, r0
 80125fe:	460c      	mov	r4, r1
 8012600:	b913      	cbnz	r3, 8012608 <_fflush_r+0x10>
 8012602:	2500      	movs	r5, #0
 8012604:	4628      	mov	r0, r5
 8012606:	bd38      	pop	{r3, r4, r5, pc}
 8012608:	b118      	cbz	r0, 8012612 <_fflush_r+0x1a>
 801260a:	6983      	ldr	r3, [r0, #24]
 801260c:	b90b      	cbnz	r3, 8012612 <_fflush_r+0x1a>
 801260e:	f7ff faad 	bl	8011b6c <__sinit>
 8012612:	4b14      	ldr	r3, [pc, #80]	; (8012664 <_fflush_r+0x6c>)
 8012614:	429c      	cmp	r4, r3
 8012616:	d11b      	bne.n	8012650 <_fflush_r+0x58>
 8012618:	686c      	ldr	r4, [r5, #4]
 801261a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d0ef      	beq.n	8012602 <_fflush_r+0xa>
 8012622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012624:	07d0      	lsls	r0, r2, #31
 8012626:	d404      	bmi.n	8012632 <_fflush_r+0x3a>
 8012628:	0599      	lsls	r1, r3, #22
 801262a:	d402      	bmi.n	8012632 <_fflush_r+0x3a>
 801262c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801262e:	f7ff fb3b 	bl	8011ca8 <__retarget_lock_acquire_recursive>
 8012632:	4628      	mov	r0, r5
 8012634:	4621      	mov	r1, r4
 8012636:	f7ff ff59 	bl	80124ec <__sflush_r>
 801263a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801263c:	07da      	lsls	r2, r3, #31
 801263e:	4605      	mov	r5, r0
 8012640:	d4e0      	bmi.n	8012604 <_fflush_r+0xc>
 8012642:	89a3      	ldrh	r3, [r4, #12]
 8012644:	059b      	lsls	r3, r3, #22
 8012646:	d4dd      	bmi.n	8012604 <_fflush_r+0xc>
 8012648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801264a:	f7ff fb2e 	bl	8011caa <__retarget_lock_release_recursive>
 801264e:	e7d9      	b.n	8012604 <_fflush_r+0xc>
 8012650:	4b05      	ldr	r3, [pc, #20]	; (8012668 <_fflush_r+0x70>)
 8012652:	429c      	cmp	r4, r3
 8012654:	d101      	bne.n	801265a <_fflush_r+0x62>
 8012656:	68ac      	ldr	r4, [r5, #8]
 8012658:	e7df      	b.n	801261a <_fflush_r+0x22>
 801265a:	4b04      	ldr	r3, [pc, #16]	; (801266c <_fflush_r+0x74>)
 801265c:	429c      	cmp	r4, r3
 801265e:	bf08      	it	eq
 8012660:	68ec      	ldreq	r4, [r5, #12]
 8012662:	e7da      	b.n	801261a <_fflush_r+0x22>
 8012664:	08014ffc 	.word	0x08014ffc
 8012668:	0801501c 	.word	0x0801501c
 801266c:	08014fdc 	.word	0x08014fdc

08012670 <_lseek_r>:
 8012670:	b538      	push	{r3, r4, r5, lr}
 8012672:	4d07      	ldr	r5, [pc, #28]	; (8012690 <_lseek_r+0x20>)
 8012674:	4604      	mov	r4, r0
 8012676:	4608      	mov	r0, r1
 8012678:	4611      	mov	r1, r2
 801267a:	2200      	movs	r2, #0
 801267c:	602a      	str	r2, [r5, #0]
 801267e:	461a      	mov	r2, r3
 8012680:	f7ee fbac 	bl	8000ddc <_lseek>
 8012684:	1c43      	adds	r3, r0, #1
 8012686:	d102      	bne.n	801268e <_lseek_r+0x1e>
 8012688:	682b      	ldr	r3, [r5, #0]
 801268a:	b103      	cbz	r3, 801268e <_lseek_r+0x1e>
 801268c:	6023      	str	r3, [r4, #0]
 801268e:	bd38      	pop	{r3, r4, r5, pc}
 8012690:	2000079c 	.word	0x2000079c

08012694 <__swhatbuf_r>:
 8012694:	b570      	push	{r4, r5, r6, lr}
 8012696:	460e      	mov	r6, r1
 8012698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801269c:	2900      	cmp	r1, #0
 801269e:	b096      	sub	sp, #88	; 0x58
 80126a0:	4614      	mov	r4, r2
 80126a2:	461d      	mov	r5, r3
 80126a4:	da08      	bge.n	80126b8 <__swhatbuf_r+0x24>
 80126a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80126aa:	2200      	movs	r2, #0
 80126ac:	602a      	str	r2, [r5, #0]
 80126ae:	061a      	lsls	r2, r3, #24
 80126b0:	d410      	bmi.n	80126d4 <__swhatbuf_r+0x40>
 80126b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126b6:	e00e      	b.n	80126d6 <__swhatbuf_r+0x42>
 80126b8:	466a      	mov	r2, sp
 80126ba:	f000 f863 	bl	8012784 <_fstat_r>
 80126be:	2800      	cmp	r0, #0
 80126c0:	dbf1      	blt.n	80126a6 <__swhatbuf_r+0x12>
 80126c2:	9a01      	ldr	r2, [sp, #4]
 80126c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80126c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80126cc:	425a      	negs	r2, r3
 80126ce:	415a      	adcs	r2, r3
 80126d0:	602a      	str	r2, [r5, #0]
 80126d2:	e7ee      	b.n	80126b2 <__swhatbuf_r+0x1e>
 80126d4:	2340      	movs	r3, #64	; 0x40
 80126d6:	2000      	movs	r0, #0
 80126d8:	6023      	str	r3, [r4, #0]
 80126da:	b016      	add	sp, #88	; 0x58
 80126dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080126e0 <__smakebuf_r>:
 80126e0:	898b      	ldrh	r3, [r1, #12]
 80126e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126e4:	079d      	lsls	r5, r3, #30
 80126e6:	4606      	mov	r6, r0
 80126e8:	460c      	mov	r4, r1
 80126ea:	d507      	bpl.n	80126fc <__smakebuf_r+0x1c>
 80126ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	6123      	str	r3, [r4, #16]
 80126f4:	2301      	movs	r3, #1
 80126f6:	6163      	str	r3, [r4, #20]
 80126f8:	b002      	add	sp, #8
 80126fa:	bd70      	pop	{r4, r5, r6, pc}
 80126fc:	ab01      	add	r3, sp, #4
 80126fe:	466a      	mov	r2, sp
 8012700:	f7ff ffc8 	bl	8012694 <__swhatbuf_r>
 8012704:	9900      	ldr	r1, [sp, #0]
 8012706:	4605      	mov	r5, r0
 8012708:	4630      	mov	r0, r6
 801270a:	f7ff f93b 	bl	8011984 <_malloc_r>
 801270e:	b948      	cbnz	r0, 8012724 <__smakebuf_r+0x44>
 8012710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012714:	059a      	lsls	r2, r3, #22
 8012716:	d4ef      	bmi.n	80126f8 <__smakebuf_r+0x18>
 8012718:	f023 0303 	bic.w	r3, r3, #3
 801271c:	f043 0302 	orr.w	r3, r3, #2
 8012720:	81a3      	strh	r3, [r4, #12]
 8012722:	e7e3      	b.n	80126ec <__smakebuf_r+0xc>
 8012724:	4b0d      	ldr	r3, [pc, #52]	; (801275c <__smakebuf_r+0x7c>)
 8012726:	62b3      	str	r3, [r6, #40]	; 0x28
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	6020      	str	r0, [r4, #0]
 801272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012730:	81a3      	strh	r3, [r4, #12]
 8012732:	9b00      	ldr	r3, [sp, #0]
 8012734:	6163      	str	r3, [r4, #20]
 8012736:	9b01      	ldr	r3, [sp, #4]
 8012738:	6120      	str	r0, [r4, #16]
 801273a:	b15b      	cbz	r3, 8012754 <__smakebuf_r+0x74>
 801273c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012740:	4630      	mov	r0, r6
 8012742:	f000 f831 	bl	80127a8 <_isatty_r>
 8012746:	b128      	cbz	r0, 8012754 <__smakebuf_r+0x74>
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	f023 0303 	bic.w	r3, r3, #3
 801274e:	f043 0301 	orr.w	r3, r3, #1
 8012752:	81a3      	strh	r3, [r4, #12]
 8012754:	89a0      	ldrh	r0, [r4, #12]
 8012756:	4305      	orrs	r5, r0
 8012758:	81a5      	strh	r5, [r4, #12]
 801275a:	e7cd      	b.n	80126f8 <__smakebuf_r+0x18>
 801275c:	08011b05 	.word	0x08011b05

08012760 <_read_r>:
 8012760:	b538      	push	{r3, r4, r5, lr}
 8012762:	4d07      	ldr	r5, [pc, #28]	; (8012780 <_read_r+0x20>)
 8012764:	4604      	mov	r4, r0
 8012766:	4608      	mov	r0, r1
 8012768:	4611      	mov	r1, r2
 801276a:	2200      	movs	r2, #0
 801276c:	602a      	str	r2, [r5, #0]
 801276e:	461a      	mov	r2, r3
 8012770:	f7ee fad4 	bl	8000d1c <_read>
 8012774:	1c43      	adds	r3, r0, #1
 8012776:	d102      	bne.n	801277e <_read_r+0x1e>
 8012778:	682b      	ldr	r3, [r5, #0]
 801277a:	b103      	cbz	r3, 801277e <_read_r+0x1e>
 801277c:	6023      	str	r3, [r4, #0]
 801277e:	bd38      	pop	{r3, r4, r5, pc}
 8012780:	2000079c 	.word	0x2000079c

08012784 <_fstat_r>:
 8012784:	b538      	push	{r3, r4, r5, lr}
 8012786:	4d07      	ldr	r5, [pc, #28]	; (80127a4 <_fstat_r+0x20>)
 8012788:	2300      	movs	r3, #0
 801278a:	4604      	mov	r4, r0
 801278c:	4608      	mov	r0, r1
 801278e:	4611      	mov	r1, r2
 8012790:	602b      	str	r3, [r5, #0]
 8012792:	f7ee fb08 	bl	8000da6 <_fstat>
 8012796:	1c43      	adds	r3, r0, #1
 8012798:	d102      	bne.n	80127a0 <_fstat_r+0x1c>
 801279a:	682b      	ldr	r3, [r5, #0]
 801279c:	b103      	cbz	r3, 80127a0 <_fstat_r+0x1c>
 801279e:	6023      	str	r3, [r4, #0]
 80127a0:	bd38      	pop	{r3, r4, r5, pc}
 80127a2:	bf00      	nop
 80127a4:	2000079c 	.word	0x2000079c

080127a8 <_isatty_r>:
 80127a8:	b538      	push	{r3, r4, r5, lr}
 80127aa:	4d06      	ldr	r5, [pc, #24]	; (80127c4 <_isatty_r+0x1c>)
 80127ac:	2300      	movs	r3, #0
 80127ae:	4604      	mov	r4, r0
 80127b0:	4608      	mov	r0, r1
 80127b2:	602b      	str	r3, [r5, #0]
 80127b4:	f7ee fb07 	bl	8000dc6 <_isatty>
 80127b8:	1c43      	adds	r3, r0, #1
 80127ba:	d102      	bne.n	80127c2 <_isatty_r+0x1a>
 80127bc:	682b      	ldr	r3, [r5, #0]
 80127be:	b103      	cbz	r3, 80127c2 <_isatty_r+0x1a>
 80127c0:	6023      	str	r3, [r4, #0]
 80127c2:	bd38      	pop	{r3, r4, r5, pc}
 80127c4:	2000079c 	.word	0x2000079c

080127c8 <_init>:
 80127c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ca:	bf00      	nop
 80127cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127ce:	bc08      	pop	{r3}
 80127d0:	469e      	mov	lr, r3
 80127d2:	4770      	bx	lr

080127d4 <_fini>:
 80127d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127d6:	bf00      	nop
 80127d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127da:	bc08      	pop	{r3}
 80127dc:	469e      	mov	lr, r3
 80127de:	4770      	bx	lr
